
LoaderBR24L04-W.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  24000000  24000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .init_array   00000004  240002cc  240002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .fini_array   00000004  240002d0  240002d0  000102d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000010  240002d4  240002d4  000102d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000074  240002e4  240002e4  000102e4  2**2
                  ALLOC
  5 .text         00004214  24000358  24000358  00010358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .Dev_Info     000000c8  2400456c  2400456c  0002456c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .rodata       00000010  24004634  24004634  00014634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 ._user_heap_stack 00000604  24004644  24004644  00014644  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00024634  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000d2ef  00000000  00000000  00024662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001c0f  00000000  00000000  00031951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a88  00000000  00000000  00033560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00030e9f  00000000  00000000  00033fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000e1b3  00000000  00000000  00064e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0013c906  00000000  00000000  0007303a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001af940  2**0
                  CONTENTS, READONLY
 17 .debug_ranges 00000998  00000000  00000000  001af990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00002a20  00000000  00000000  001b0328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

24000358 <__do_global_dtors_aux>:
24000358:	b510      	push	{r4, lr}
2400035a:	4c05      	ldr	r4, [pc, #20]	; (24000370 <__do_global_dtors_aux+0x18>)
2400035c:	7823      	ldrb	r3, [r4, #0]
2400035e:	b933      	cbnz	r3, 2400036e <__do_global_dtors_aux+0x16>
24000360:	4b04      	ldr	r3, [pc, #16]	; (24000374 <__do_global_dtors_aux+0x1c>)
24000362:	b113      	cbz	r3, 2400036a <__do_global_dtors_aux+0x12>
24000364:	4804      	ldr	r0, [pc, #16]	; (24000378 <__do_global_dtors_aux+0x20>)
24000366:	f3af 8000 	nop.w
2400036a:	2301      	movs	r3, #1
2400036c:	7023      	strb	r3, [r4, #0]
2400036e:	bd10      	pop	{r4, pc}
24000370:	240002e4 	.word	0x240002e4
24000374:	00000000 	.word	0x00000000
24000378:	24004554 	.word	0x24004554

2400037c <frame_dummy>:
2400037c:	b508      	push	{r3, lr}
2400037e:	4b03      	ldr	r3, [pc, #12]	; (2400038c <frame_dummy+0x10>)
24000380:	b11b      	cbz	r3, 2400038a <frame_dummy+0xe>
24000382:	4903      	ldr	r1, [pc, #12]	; (24000390 <frame_dummy+0x14>)
24000384:	4803      	ldr	r0, [pc, #12]	; (24000394 <frame_dummy+0x18>)
24000386:	f3af 8000 	nop.w
2400038a:	bd08      	pop	{r3, pc}
2400038c:	00000000 	.word	0x00000000
24000390:	240002e8 	.word	0x240002e8
24000394:	24004554 	.word	0x24004554

24000398 <E2_Read>:
//    or returns the actual number of bytes read on success
//  Note:
//    Blocking but times out after E2_TIMEOUT.
//-----------------------------------------------------------------------------
uint16_t E2_Read(void* pData, uint16_t Address, uint16_t Count)
{
24000398:	b580      	push	{r7, lr}
2400039a:	b086      	sub	sp, #24
2400039c:	af04      	add	r7, sp, #16
2400039e:	6078      	str	r0, [r7, #4]
240003a0:	460b      	mov	r3, r1
240003a2:	807b      	strh	r3, [r7, #2]
240003a4:	4613      	mov	r3, r2
240003a6:	803b      	strh	r3, [r7, #0]
	//Validate arguments
	if((pData == NULL) || (Address >= E2_SIZE) || (Count == 0))
240003a8:	687b      	ldr	r3, [r7, #4]
240003aa:	2b00      	cmp	r3, #0
240003ac:	d006      	beq.n	240003bc <E2_Read+0x24>
240003ae:	887b      	ldrh	r3, [r7, #2]
240003b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
240003b4:	d202      	bcs.n	240003bc <E2_Read+0x24>
240003b6:	883b      	ldrh	r3, [r7, #0]
240003b8:	2b00      	cmp	r3, #0
240003ba:	d101      	bne.n	240003c0 <E2_Read+0x28>
		return 0;
240003bc:	2300      	movs	r3, #0
240003be:	e029      	b.n	24000414 <E2_Read+0x7c>

	//Validate access range
	if((Address + Count) > E2_SIZE)
240003c0:	887a      	ldrh	r2, [r7, #2]
240003c2:	883b      	ldrh	r3, [r7, #0]
240003c4:	4413      	add	r3, r2
240003c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
240003ca:	dd01      	ble.n	240003d0 <E2_Read+0x38>
		return 0;
240003cc:	2300      	movs	r3, #0
240003ce:	e021      	b.n	24000414 <E2_Read+0x7c>

	//Make sure writing to device is disabled in case it was left enabled somehow
	E2_WRITE_DISABLE();
240003d0:	2201      	movs	r2, #1
240003d2:	2108      	movs	r1, #8
240003d4:	4811      	ldr	r0, [pc, #68]	; (2400041c <E2_Read+0x84>)
240003d6:	f000 fef9 	bl	240011cc <HAL_GPIO_WritePin>

	//Read data
	if(HAL_I2C_Mem_Read(&E2_I2C, E2_PHY_ADDRESS(Address), E2_MEM_ADDRESS(Address), 1, pData, Count, E2_TIMEOUT) != HAL_OK)
240003da:	887b      	ldrh	r3, [r7, #2]
240003dc:	09db      	lsrs	r3, r3, #7
240003de:	b29b      	uxth	r3, r3
240003e0:	f003 0302 	and.w	r3, r3, #2
240003e4:	b29b      	uxth	r3, r3
240003e6:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
240003ea:	b299      	uxth	r1, r3
240003ec:	887b      	ldrh	r3, [r7, #2]
240003ee:	b2db      	uxtb	r3, r3
240003f0:	b29a      	uxth	r2, r3
240003f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
240003f6:	9302      	str	r3, [sp, #8]
240003f8:	883b      	ldrh	r3, [r7, #0]
240003fa:	9301      	str	r3, [sp, #4]
240003fc:	687b      	ldr	r3, [r7, #4]
240003fe:	9300      	str	r3, [sp, #0]
24000400:	2301      	movs	r3, #1
24000402:	4807      	ldr	r0, [pc, #28]	; (24000420 <E2_Read+0x88>)
24000404:	f001 f8a0 	bl	24001548 <HAL_I2C_Mem_Read>
24000408:	4603      	mov	r3, r0
2400040a:	2b00      	cmp	r3, #0
2400040c:	d001      	beq.n	24000412 <E2_Read+0x7a>
		return 0;
2400040e:	2300      	movs	r3, #0
24000410:	e000      	b.n	24000414 <E2_Read+0x7c>

	return Count;
24000412:	883b      	ldrh	r3, [r7, #0]
}
24000414:	4618      	mov	r0, r3
24000416:	3708      	adds	r7, #8
24000418:	46bd      	mov	sp, r7
2400041a:	bd80      	pop	{r7, pc}
2400041c:	58021000 	.word	0x58021000
24000420:	24000300 	.word	0x24000300

24000424 <E2_Write>:
//    Blocking but times out after E2_TIMEOUT.
//    Writing operations smaller than page size are managed without loss of data.
//    Writing operations across device pages are managed.
//-----------------------------------------------------------------------------
uint16_t E2_Write(void* pData, uint16_t Address, uint16_t Count)
{
24000424:	b580      	push	{r7, lr}
24000426:	b08e      	sub	sp, #56	; 0x38
24000428:	af04      	add	r7, sp, #16
2400042a:	6078      	str	r0, [r7, #4]
2400042c:	460b      	mov	r3, r1
2400042e:	807b      	strh	r3, [r7, #2]
24000430:	4613      	mov	r3, r2
24000432:	803b      	strh	r3, [r7, #0]
	uint8_t  TmpBuffer[E2_PAGE_SIZE];
	bool_t   Error;
	uint8_t* Data;

	//Validate arguments
	if((pData == NULL) || (Address >= E2_SIZE) || (Count == 0))
24000434:	687b      	ldr	r3, [r7, #4]
24000436:	2b00      	cmp	r3, #0
24000438:	d006      	beq.n	24000448 <E2_Write+0x24>
2400043a:	887b      	ldrh	r3, [r7, #2]
2400043c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
24000440:	d202      	bcs.n	24000448 <E2_Write+0x24>
24000442:	883b      	ldrh	r3, [r7, #0]
24000444:	2b00      	cmp	r3, #0
24000446:	d101      	bne.n	2400044c <E2_Write+0x28>
		return 0;
24000448:	2300      	movs	r3, #0
2400044a:	e093      	b.n	24000574 <E2_Write+0x150>

	//Validate access range
	if((Address + Count) > E2_SIZE)
2400044c:	887a      	ldrh	r2, [r7, #2]
2400044e:	883b      	ldrh	r3, [r7, #0]
24000450:	4413      	add	r3, r2
24000452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
24000456:	dd01      	ble.n	2400045c <E2_Write+0x38>
		return 0;
24000458:	2300      	movs	r3, #0
2400045a:	e08b      	b.n	24000574 <E2_Write+0x150>

	Data = (uint8_t*)pData;
2400045c:	687b      	ldr	r3, [r7, #4]
2400045e:	61fb      	str	r3, [r7, #28]

	//Write data
	Index = 0;   //Pointer to data in input buffer
24000460:	2300      	movs	r3, #0
24000462:	84bb      	strh	r3, [r7, #36]	; 0x24
	Error = FALSE;
24000464:	2300      	movs	r3, #0
24000466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	//Enable writing to device
	E2_WRITE_ENABLE();
2400046a:	2200      	movs	r2, #0
2400046c:	2108      	movs	r1, #8
2400046e:	4843      	ldr	r0, [pc, #268]	; (2400057c <E2_Write+0x158>)
24000470:	f000 feac 	bl	240011cc <HAL_GPIO_WritePin>

	do
	{
		//Get base page address where to write data
		Page   = (Address / E2_PAGE_SIZE) * E2_PAGE_SIZE;
24000474:	887b      	ldrh	r3, [r7, #2]
24000476:	091b      	lsrs	r3, r3, #4
24000478:	b29b      	uxth	r3, r3
2400047a:	011b      	lsls	r3, r3, #4
2400047c:	837b      	strh	r3, [r7, #26]
		Offset = Address % E2_PAGE_SIZE;
2400047e:	887b      	ldrh	r3, [r7, #2]
24000480:	f003 030f 	and.w	r3, r3, #15
24000484:	84fb      	strh	r3, [r7, #38]	; 0x26

		//Read contents of that page in temporary buffer
		if(HAL_I2C_Mem_Read(&E2_I2C, E2_PHY_ADDRESS(Page), E2_MEM_ADDRESS(Page), 1, TmpBuffer, E2_PAGE_SIZE, E2_TIMEOUT) != HAL_OK)
24000486:	8b7b      	ldrh	r3, [r7, #26]
24000488:	09db      	lsrs	r3, r3, #7
2400048a:	b29b      	uxth	r3, r3
2400048c:	f003 0302 	and.w	r3, r3, #2
24000490:	b29b      	uxth	r3, r3
24000492:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
24000496:	b299      	uxth	r1, r3
24000498:	8b7b      	ldrh	r3, [r7, #26]
2400049a:	b2db      	uxtb	r3, r3
2400049c:	b29a      	uxth	r2, r3
2400049e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
240004a2:	9302      	str	r3, [sp, #8]
240004a4:	2310      	movs	r3, #16
240004a6:	9301      	str	r3, [sp, #4]
240004a8:	f107 0308 	add.w	r3, r7, #8
240004ac:	9300      	str	r3, [sp, #0]
240004ae:	2301      	movs	r3, #1
240004b0:	4833      	ldr	r0, [pc, #204]	; (24000580 <E2_Write+0x15c>)
240004b2:	f001 f849 	bl	24001548 <HAL_I2C_Mem_Read>
240004b6:	4603      	mov	r3, r0
240004b8:	2b00      	cmp	r3, #0
240004ba:	d002      	beq.n	240004c2 <E2_Write+0x9e>
			Error = TRUE;
240004bc:	2301      	movs	r3, #1
240004be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		//Write data from input buffer to current page range
		do
		{
			TmpBuffer[Offset] = Data[Index];
240004c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
240004c4:	69fa      	ldr	r2, [r7, #28]
240004c6:	441a      	add	r2, r3
240004c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
240004ca:	7812      	ldrb	r2, [r2, #0]
240004cc:	3328      	adds	r3, #40	; 0x28
240004ce:	443b      	add	r3, r7
240004d0:	f803 2c20 	strb.w	r2, [r3, #-32]
			Offset++;
240004d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
240004d6:	3301      	adds	r3, #1
240004d8:	84fb      	strh	r3, [r7, #38]	; 0x26
			Index++;
240004da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
240004dc:	3301      	adds	r3, #1
240004de:	84bb      	strh	r3, [r7, #36]	; 0x24
			Address++;
240004e0:	887b      	ldrh	r3, [r7, #2]
240004e2:	3301      	adds	r3, #1
240004e4:	807b      	strh	r3, [r7, #2]
			Count--;
240004e6:	883b      	ldrh	r3, [r7, #0]
240004e8:	3b01      	subs	r3, #1
240004ea:	803b      	strh	r3, [r7, #0]
		}
		while((Offset < E2_PAGE_SIZE) && (Count > 0));
240004ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
240004ee:	2b0f      	cmp	r3, #15
240004f0:	d802      	bhi.n	240004f8 <E2_Write+0xd4>
240004f2:	883b      	ldrh	r3, [r7, #0]
240004f4:	2b00      	cmp	r3, #0
240004f6:	d1e4      	bne.n	240004c2 <E2_Write+0x9e>

		//Write page back to E2
		if(HAL_I2C_Mem_Write(&E2_I2C, E2_PHY_ADDRESS(Page), E2_MEM_ADDRESS(Page), 1, TmpBuffer, E2_PAGE_SIZE, E2_TIMEOUT) != HAL_OK)
240004f8:	8b7b      	ldrh	r3, [r7, #26]
240004fa:	09db      	lsrs	r3, r3, #7
240004fc:	b29b      	uxth	r3, r3
240004fe:	f003 0302 	and.w	r3, r3, #2
24000502:	b29b      	uxth	r3, r3
24000504:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
24000508:	b299      	uxth	r1, r3
2400050a:	8b7b      	ldrh	r3, [r7, #26]
2400050c:	b2db      	uxtb	r3, r3
2400050e:	b29a      	uxth	r2, r3
24000510:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
24000514:	9302      	str	r3, [sp, #8]
24000516:	2310      	movs	r3, #16
24000518:	9301      	str	r3, [sp, #4]
2400051a:	f107 0308 	add.w	r3, r7, #8
2400051e:	9300      	str	r3, [sp, #0]
24000520:	2301      	movs	r3, #1
24000522:	4817      	ldr	r0, [pc, #92]	; (24000580 <E2_Write+0x15c>)
24000524:	f000 fefc 	bl	24001320 <HAL_I2C_Mem_Write>
24000528:	4603      	mov	r3, r0
2400052a:	2b00      	cmp	r3, #0
2400052c:	d002      	beq.n	24000534 <E2_Write+0x110>
			Error = TRUE;
2400052e:	2301      	movs	r3, #1
24000530:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		//Wait for write cycle to complete
		if(HAL_I2C_IsDeviceReady(&E2_I2C, E2_ADDRESS, E2_BUSY_CHECK, E2_TIMEOUT) != HAL_OK)
24000534:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
24000538:	2264      	movs	r2, #100	; 0x64
2400053a:	21a0      	movs	r1, #160	; 0xa0
2400053c:	4810      	ldr	r0, [pc, #64]	; (24000580 <E2_Write+0x15c>)
2400053e:	f001 f91d 	bl	2400177c <HAL_I2C_IsDeviceReady>
24000542:	4603      	mov	r3, r0
24000544:	2b00      	cmp	r3, #0
24000546:	d002      	beq.n	2400054e <E2_Write+0x12a>
			Error = TRUE;
24000548:	2301      	movs	r3, #1
2400054a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	while((Count > 0) && (!Error));
2400054e:	883b      	ldrh	r3, [r7, #0]
24000550:	2b00      	cmp	r3, #0
24000552:	d003      	beq.n	2400055c <E2_Write+0x138>
24000554:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
24000558:	2b00      	cmp	r3, #0
2400055a:	d08b      	beq.n	24000474 <E2_Write+0x50>

	//Disable writing to device
	E2_WRITE_DISABLE();
2400055c:	2201      	movs	r2, #1
2400055e:	2108      	movs	r1, #8
24000560:	4806      	ldr	r0, [pc, #24]	; (2400057c <E2_Write+0x158>)
24000562:	f000 fe33 	bl	240011cc <HAL_GPIO_WritePin>

	if(Error)
24000566:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
2400056a:	2b00      	cmp	r3, #0
2400056c:	d001      	beq.n	24000572 <E2_Write+0x14e>
		return 0;
2400056e:	2300      	movs	r3, #0
24000570:	e000      	b.n	24000574 <E2_Write+0x150>

	return Index;
24000572:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
}
24000574:	4618      	mov	r0, r3
24000576:	3728      	adds	r7, #40	; 0x28
24000578:	46bd      	mov	sp, r7
2400057a:	bd80      	pop	{r7, pc}
2400057c:	58021000 	.word	0x58021000
24000580:	24000300 	.word	0x24000300

24000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
24000584:	b580      	push	{r7, lr}
24000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
24000588:	f000 fb02 	bl	24000b90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
2400058c:	f000 f806 	bl	2400059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  SCB->VTOR = 0x24000000;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
24000590:	f000 f8b4 	bl	240006fc <MX_GPIO_Init>
  MX_I2C2_Init();
24000594:	f000 f872 	bl	2400067c <MX_I2C2_Init>
//  E2_Write(DeviceWR, 0, DEVICE_SIZE);
//
//  memset(DeviceRD, 0x00, DEVICE_SIZE);
//  E2_Read(DeviceRD, 0, DEVICE_SIZE);

  while (1)
24000598:	e7fe      	b.n	24000598 <main+0x14>
	...

2400059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
2400059c:	b580      	push	{r7, lr}
2400059e:	b09c      	sub	sp, #112	; 0x70
240005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
240005a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
240005a6:	224c      	movs	r2, #76	; 0x4c
240005a8:	2100      	movs	r1, #0
240005aa:	4618      	mov	r0, r3
240005ac:	f003 ffca 	bl	24004544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
240005b0:	1d3b      	adds	r3, r7, #4
240005b2:	2220      	movs	r2, #32
240005b4:	2100      	movs	r1, #0
240005b6:	4618      	mov	r0, r3
240005b8:	f003 ffc4 	bl	24004544 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
240005bc:	2004      	movs	r0, #4
240005be:	f001 fd35 	bl	2400202c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
240005c2:	2300      	movs	r3, #0
240005c4:	603b      	str	r3, [r7, #0]
240005c6:	4b2c      	ldr	r3, [pc, #176]	; (24000678 <SystemClock_Config+0xdc>)
240005c8:	699b      	ldr	r3, [r3, #24]
240005ca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
240005ce:	4a2a      	ldr	r2, [pc, #168]	; (24000678 <SystemClock_Config+0xdc>)
240005d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
240005d4:	6193      	str	r3, [r2, #24]
240005d6:	4b28      	ldr	r3, [pc, #160]	; (24000678 <SystemClock_Config+0xdc>)
240005d8:	699b      	ldr	r3, [r3, #24]
240005da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
240005de:	603b      	str	r3, [r7, #0]
240005e0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
240005e2:	bf00      	nop
240005e4:	4b24      	ldr	r3, [pc, #144]	; (24000678 <SystemClock_Config+0xdc>)
240005e6:	699b      	ldr	r3, [r3, #24]
240005e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
240005ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
240005f0:	d1f8      	bne.n	240005e4 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
240005f2:	2301      	movs	r3, #1
240005f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
240005f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
240005fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
240005fc:	2302      	movs	r3, #2
240005fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
24000600:	2302      	movs	r3, #2
24000602:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
24000604:	2302      	movs	r3, #2
24000606:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 15;
24000608:	230f      	movs	r3, #15
2400060a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
2400060c:	2302      	movs	r3, #2
2400060e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
24000610:	2302      	movs	r3, #2
24000612:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
24000614:	2302      	movs	r3, #2
24000616:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
24000618:	230c      	movs	r3, #12
2400061a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
2400061c:	2300      	movs	r3, #0
2400061e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 2950;
24000620:	f640 3386 	movw	r3, #2950	; 0xb86
24000624:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
24000626:	f107 0324 	add.w	r3, r7, #36	; 0x24
2400062a:	4618      	mov	r0, r3
2400062c:	f001 fd58 	bl	240020e0 <HAL_RCC_OscConfig>
24000630:	4603      	mov	r3, r0
24000632:	2b00      	cmp	r3, #0
24000634:	d001      	beq.n	2400063a <SystemClock_Config+0x9e>
  {
    Error_Handler();
24000636:	f000 f952 	bl	240008de <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
2400063a:	233f      	movs	r3, #63	; 0x3f
2400063c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
2400063e:	2303      	movs	r3, #3
24000640:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
24000642:	2300      	movs	r3, #0
24000644:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
24000646:	2308      	movs	r3, #8
24000648:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
2400064a:	2340      	movs	r3, #64	; 0x40
2400064c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
2400064e:	2340      	movs	r3, #64	; 0x40
24000650:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
24000652:	f44f 6380 	mov.w	r3, #1024	; 0x400
24000656:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
24000658:	2340      	movs	r3, #64	; 0x40
2400065a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
2400065c:	1d3b      	adds	r3, r7, #4
2400065e:	2101      	movs	r1, #1
24000660:	4618      	mov	r0, r3
24000662:	f002 f917 	bl	24002894 <HAL_RCC_ClockConfig>
24000666:	4603      	mov	r3, r0
24000668:	2b00      	cmp	r3, #0
2400066a:	d001      	beq.n	24000670 <SystemClock_Config+0xd4>
  {
    Error_Handler();
2400066c:	f000 f937 	bl	240008de <Error_Handler>
  }
}
24000670:	bf00      	nop
24000672:	3770      	adds	r7, #112	; 0x70
24000674:	46bd      	mov	sp, r7
24000676:	bd80      	pop	{r7, pc}
24000678:	58024800 	.word	0x58024800

2400067c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
2400067c:	b580      	push	{r7, lr}
2400067e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
24000680:	4b1b      	ldr	r3, [pc, #108]	; (240006f0 <MX_I2C2_Init+0x74>)
24000682:	4a1c      	ldr	r2, [pc, #112]	; (240006f4 <MX_I2C2_Init+0x78>)
24000684:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0xC0000709;
24000686:	4b1a      	ldr	r3, [pc, #104]	; (240006f0 <MX_I2C2_Init+0x74>)
24000688:	4a1b      	ldr	r2, [pc, #108]	; (240006f8 <MX_I2C2_Init+0x7c>)
2400068a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
2400068c:	4b18      	ldr	r3, [pc, #96]	; (240006f0 <MX_I2C2_Init+0x74>)
2400068e:	2200      	movs	r2, #0
24000690:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24000692:	4b17      	ldr	r3, [pc, #92]	; (240006f0 <MX_I2C2_Init+0x74>)
24000694:	2201      	movs	r2, #1
24000696:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
24000698:	4b15      	ldr	r3, [pc, #84]	; (240006f0 <MX_I2C2_Init+0x74>)
2400069a:	2200      	movs	r2, #0
2400069c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
2400069e:	4b14      	ldr	r3, [pc, #80]	; (240006f0 <MX_I2C2_Init+0x74>)
240006a0:	2200      	movs	r2, #0
240006a2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
240006a4:	4b12      	ldr	r3, [pc, #72]	; (240006f0 <MX_I2C2_Init+0x74>)
240006a6:	2200      	movs	r2, #0
240006a8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
240006aa:	4b11      	ldr	r3, [pc, #68]	; (240006f0 <MX_I2C2_Init+0x74>)
240006ac:	2200      	movs	r2, #0
240006ae:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
240006b0:	4b0f      	ldr	r3, [pc, #60]	; (240006f0 <MX_I2C2_Init+0x74>)
240006b2:	2200      	movs	r2, #0
240006b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
240006b6:	480e      	ldr	r0, [pc, #56]	; (240006f0 <MX_I2C2_Init+0x74>)
240006b8:	f000 fda2 	bl	24001200 <HAL_I2C_Init>
240006bc:	4603      	mov	r3, r0
240006be:	2b00      	cmp	r3, #0
240006c0:	d001      	beq.n	240006c6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
240006c2:	f000 f90c 	bl	240008de <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
240006c6:	2100      	movs	r1, #0
240006c8:	4809      	ldr	r0, [pc, #36]	; (240006f0 <MX_I2C2_Init+0x74>)
240006ca:	f001 fc17 	bl	24001efc <HAL_I2CEx_ConfigAnalogFilter>
240006ce:	4603      	mov	r3, r0
240006d0:	2b00      	cmp	r3, #0
240006d2:	d001      	beq.n	240006d8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
240006d4:	f000 f903 	bl	240008de <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
240006d8:	2100      	movs	r1, #0
240006da:	4805      	ldr	r0, [pc, #20]	; (240006f0 <MX_I2C2_Init+0x74>)
240006dc:	f001 fc59 	bl	24001f92 <HAL_I2CEx_ConfigDigitalFilter>
240006e0:	4603      	mov	r3, r0
240006e2:	2b00      	cmp	r3, #0
240006e4:	d001      	beq.n	240006ea <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
240006e6:	f000 f8fa 	bl	240008de <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
240006ea:	bf00      	nop
240006ec:	bd80      	pop	{r7, pc}
240006ee:	bf00      	nop
240006f0:	24000300 	.word	0x24000300
240006f4:	40005800 	.word	0x40005800
240006f8:	c0000709 	.word	0xc0000709

240006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
240006fc:	b580      	push	{r7, lr}
240006fe:	b08a      	sub	sp, #40	; 0x28
24000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24000702:	f107 0314 	add.w	r3, r7, #20
24000706:	2200      	movs	r2, #0
24000708:	601a      	str	r2, [r3, #0]
2400070a:	605a      	str	r2, [r3, #4]
2400070c:	609a      	str	r2, [r3, #8]
2400070e:	60da      	str	r2, [r3, #12]
24000710:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
24000712:	4b31      	ldr	r3, [pc, #196]	; (240007d8 <MX_GPIO_Init+0xdc>)
24000714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000718:	4a2f      	ldr	r2, [pc, #188]	; (240007d8 <MX_GPIO_Init+0xdc>)
2400071a:	f043 0301 	orr.w	r3, r3, #1
2400071e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24000722:	4b2d      	ldr	r3, [pc, #180]	; (240007d8 <MX_GPIO_Init+0xdc>)
24000724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000728:	f003 0301 	and.w	r3, r3, #1
2400072c:	613b      	str	r3, [r7, #16]
2400072e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
24000730:	4b29      	ldr	r3, [pc, #164]	; (240007d8 <MX_GPIO_Init+0xdc>)
24000732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000736:	4a28      	ldr	r2, [pc, #160]	; (240007d8 <MX_GPIO_Init+0xdc>)
24000738:	f043 0310 	orr.w	r3, r3, #16
2400073c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24000740:	4b25      	ldr	r3, [pc, #148]	; (240007d8 <MX_GPIO_Init+0xdc>)
24000742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000746:	f003 0310 	and.w	r3, r3, #16
2400074a:	60fb      	str	r3, [r7, #12]
2400074c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
2400074e:	4b22      	ldr	r3, [pc, #136]	; (240007d8 <MX_GPIO_Init+0xdc>)
24000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000754:	4a20      	ldr	r2, [pc, #128]	; (240007d8 <MX_GPIO_Init+0xdc>)
24000756:	f043 0304 	orr.w	r3, r3, #4
2400075a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
2400075e:	4b1e      	ldr	r3, [pc, #120]	; (240007d8 <MX_GPIO_Init+0xdc>)
24000760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000764:	f003 0304 	and.w	r3, r3, #4
24000768:	60bb      	str	r3, [r7, #8]
2400076a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
2400076c:	4b1a      	ldr	r3, [pc, #104]	; (240007d8 <MX_GPIO_Init+0xdc>)
2400076e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000772:	4a19      	ldr	r2, [pc, #100]	; (240007d8 <MX_GPIO_Init+0xdc>)
24000774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24000778:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
2400077c:	4b16      	ldr	r3, [pc, #88]	; (240007d8 <MX_GPIO_Init+0xdc>)
2400077e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000782:	f003 0380 	and.w	r3, r3, #128	; 0x80
24000786:	607b      	str	r3, [r7, #4]
24000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
2400078a:	4b13      	ldr	r3, [pc, #76]	; (240007d8 <MX_GPIO_Init+0xdc>)
2400078c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000790:	4a11      	ldr	r2, [pc, #68]	; (240007d8 <MX_GPIO_Init+0xdc>)
24000792:	f043 0302 	orr.w	r3, r3, #2
24000796:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
2400079a:	4b0f      	ldr	r3, [pc, #60]	; (240007d8 <MX_GPIO_Init+0xdc>)
2400079c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
240007a0:	f003 0302 	and.w	r3, r3, #2
240007a4:	603b      	str	r3, [r7, #0]
240007a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(E2_WP_GPIO_Port, E2_WP_Pin, GPIO_PIN_RESET);
240007a8:	2200      	movs	r2, #0
240007aa:	2108      	movs	r1, #8
240007ac:	480b      	ldr	r0, [pc, #44]	; (240007dc <MX_GPIO_Init+0xe0>)
240007ae:	f000 fd0d 	bl	240011cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : E2_WP_Pin */
  GPIO_InitStruct.Pin = E2_WP_Pin;
240007b2:	2308      	movs	r3, #8
240007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
240007b6:	2301      	movs	r3, #1
240007b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
240007ba:	2300      	movs	r3, #0
240007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
240007be:	2300      	movs	r3, #0
240007c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(E2_WP_GPIO_Port, &GPIO_InitStruct);
240007c2:	f107 0314 	add.w	r3, r7, #20
240007c6:	4619      	mov	r1, r3
240007c8:	4804      	ldr	r0, [pc, #16]	; (240007dc <MX_GPIO_Init+0xe0>)
240007ca:	f000 fb57 	bl	24000e7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
240007ce:	bf00      	nop
240007d0:	3728      	adds	r7, #40	; 0x28
240007d2:	46bd      	mov	sp, r7
240007d4:	bd80      	pop	{r7, pc}
240007d6:	bf00      	nop
240007d8:	58024400 	.word	0x58024400
240007dc:	58021000 	.word	0x58021000

240007e0 <Init>:
		{ 0x00000000, 0x00000000 }
    }
};

int Init(void)
{
240007e0:	b580      	push	{r7, lr}
240007e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
240007e4:	b672      	cpsid	i
}
240007e6:	bf00      	nop
	__disable_irq();
	MX_I2C2_Init();
240007e8:	f7ff ff48 	bl	2400067c <MX_I2C2_Init>
  __ASM volatile ("cpsie i" : : : "memory");
240007ec:	b662      	cpsie	i
}
240007ee:	bf00      	nop
	__enable_irq();

	return 1;
240007f0:	2301      	movs	r3, #1
}
240007f2:	4618      	mov	r0, r3
240007f4:	bd80      	pop	{r7, pc}
	...

240007f8 <Write>:

int Write(uint32_t Address, uint32_t Size, uint8_t *Buffer)
{
240007f8:	b580      	push	{r7, lr}
240007fa:	b084      	sub	sp, #16
240007fc:	af00      	add	r7, sp, #0
240007fe:	60f8      	str	r0, [r7, #12]
24000800:	60b9      	str	r1, [r7, #8]
24000802:	607a      	str	r2, [r7, #4]
	if(E2_Write(Buffer, Address - StrInfo.DeviceStartAddress, Size) == 0)
24000804:	68fb      	ldr	r3, [r7, #12]
24000806:	b29a      	uxth	r2, r3
24000808:	4b0a      	ldr	r3, [pc, #40]	; (24000834 <Write+0x3c>)
2400080a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2400080c:	b29b      	uxth	r3, r3
2400080e:	1ad3      	subs	r3, r2, r3
24000810:	b29b      	uxth	r3, r3
24000812:	68ba      	ldr	r2, [r7, #8]
24000814:	b292      	uxth	r2, r2
24000816:	4619      	mov	r1, r3
24000818:	6878      	ldr	r0, [r7, #4]
2400081a:	f7ff fe03 	bl	24000424 <E2_Write>
2400081e:	4603      	mov	r3, r0
24000820:	2b00      	cmp	r3, #0
24000822:	d101      	bne.n	24000828 <Write+0x30>
		return 0;
24000824:	2300      	movs	r3, #0
24000826:	e000      	b.n	2400082a <Write+0x32>

	return 1;
24000828:	2301      	movs	r3, #1
}
2400082a:	4618      	mov	r0, r3
2400082c:	3710      	adds	r7, #16
2400082e:	46bd      	mov	sp, r7
24000830:	bd80      	pop	{r7, pc}
24000832:	bf00      	nop
24000834:	2400456c 	.word	0x2400456c

24000838 <Read>:

int Read(uint32_t Address, uint32_t Size, uint8_t *Buffer)
{
24000838:	b580      	push	{r7, lr}
2400083a:	b084      	sub	sp, #16
2400083c:	af00      	add	r7, sp, #0
2400083e:	60f8      	str	r0, [r7, #12]
24000840:	60b9      	str	r1, [r7, #8]
24000842:	607a      	str	r2, [r7, #4]
//		return 0;

//	for(int i = 0; i < 4096; i++)
//		Buffer[i] = i;

	if(E2_Read(Buffer, (uint16_t)(Address - StrInfo.DeviceStartAddress), (uint16_t)Size) == 0)
24000844:	68fb      	ldr	r3, [r7, #12]
24000846:	b29a      	uxth	r2, r3
24000848:	4b0a      	ldr	r3, [pc, #40]	; (24000874 <Read+0x3c>)
2400084a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2400084c:	b29b      	uxth	r3, r3
2400084e:	1ad3      	subs	r3, r2, r3
24000850:	b29b      	uxth	r3, r3
24000852:	68ba      	ldr	r2, [r7, #8]
24000854:	b292      	uxth	r2, r2
24000856:	4619      	mov	r1, r3
24000858:	6878      	ldr	r0, [r7, #4]
2400085a:	f7ff fd9d 	bl	24000398 <E2_Read>
2400085e:	4603      	mov	r3, r0
24000860:	2b00      	cmp	r3, #0
24000862:	d101      	bne.n	24000868 <Read+0x30>
		return 0;
24000864:	2300      	movs	r3, #0
24000866:	e000      	b.n	2400086a <Read+0x32>

	return 1;
24000868:	2301      	movs	r3, #1
}
2400086a:	4618      	mov	r0, r3
2400086c:	3710      	adds	r7, #16
2400086e:	46bd      	mov	sp, r7
24000870:	bd80      	pop	{r7, pc}
24000872:	bf00      	nop
24000874:	2400456c 	.word	0x2400456c

24000878 <SectorErase>:

int SectorErase(uint32_t EraseStartAddress ,uint32_t EraseEndAddress)
{
24000878:	b480      	push	{r7}
2400087a:	b083      	sub	sp, #12
2400087c:	af00      	add	r7, sp, #0
2400087e:	6078      	str	r0, [r7, #4]
24000880:	6039      	str	r1, [r7, #0]
	return 1;
24000882:	2301      	movs	r3, #1
}
24000884:	4618      	mov	r0, r3
24000886:	370c      	adds	r7, #12
24000888:	46bd      	mov	sp, r7
2400088a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400088e:	4770      	bx	lr

24000890 <MassErase>:

int MassErase(void)
{
24000890:	b480      	push	{r7}
24000892:	af00      	add	r7, sp, #0
	return 1;
24000894:	2301      	movs	r3, #1
}
24000896:	4618      	mov	r0, r3
24000898:	46bd      	mov	sp, r7
2400089a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400089e:	4770      	bx	lr

240008a0 <CheckSum>:

uint32_t CheckSum(uint32_t StartAddress, uint32_t Size, uint32_t InitVal)
{
240008a0:	b480      	push	{r7}
240008a2:	b085      	sub	sp, #20
240008a4:	af00      	add	r7, sp, #0
240008a6:	60f8      	str	r0, [r7, #12]
240008a8:	60b9      	str	r1, [r7, #8]
240008aa:	607a      	str	r2, [r7, #4]
	return 0;
240008ac:	2300      	movs	r3, #0
}
240008ae:	4618      	mov	r0, r3
240008b0:	3714      	adds	r7, #20
240008b2:	46bd      	mov	sp, r7
240008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
240008b8:	4770      	bx	lr

240008ba <Verify>:

uint64_t Verify(uint32_t MemoryAddr, uint32_t BufferAddr, uint32_t Size, uint32_t Missalignement)
{
240008ba:	b480      	push	{r7}
240008bc:	b085      	sub	sp, #20
240008be:	af00      	add	r7, sp, #0
240008c0:	60f8      	str	r0, [r7, #12]
240008c2:	60b9      	str	r1, [r7, #8]
240008c4:	607a      	str	r2, [r7, #4]
240008c6:	603b      	str	r3, [r7, #0]
	return 0;
240008c8:	f04f 0200 	mov.w	r2, #0
240008cc:	f04f 0300 	mov.w	r3, #0
}
240008d0:	4610      	mov	r0, r2
240008d2:	4619      	mov	r1, r3
240008d4:	3714      	adds	r7, #20
240008d6:	46bd      	mov	sp, r7
240008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
240008dc:	4770      	bx	lr

240008de <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
240008de:	b480      	push	{r7}
240008e0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
240008e2:	b672      	cpsid	i
}
240008e4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
240008e6:	e7fe      	b.n	240008e6 <Error_Handler+0x8>

240008e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
240008e8:	b480      	push	{r7}
240008ea:	b083      	sub	sp, #12
240008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
240008ee:	4b0a      	ldr	r3, [pc, #40]	; (24000918 <HAL_MspInit+0x30>)
240008f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
240008f4:	4a08      	ldr	r2, [pc, #32]	; (24000918 <HAL_MspInit+0x30>)
240008f6:	f043 0302 	orr.w	r3, r3, #2
240008fa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
240008fe:	4b06      	ldr	r3, [pc, #24]	; (24000918 <HAL_MspInit+0x30>)
24000900:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24000904:	f003 0302 	and.w	r3, r3, #2
24000908:	607b      	str	r3, [r7, #4]
2400090a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
2400090c:	bf00      	nop
2400090e:	370c      	adds	r7, #12
24000910:	46bd      	mov	sp, r7
24000912:	f85d 7b04 	ldr.w	r7, [sp], #4
24000916:	4770      	bx	lr
24000918:	58024400 	.word	0x58024400

2400091c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
2400091c:	b580      	push	{r7, lr}
2400091e:	b0b8      	sub	sp, #224	; 0xe0
24000920:	af00      	add	r7, sp, #0
24000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24000924:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
24000928:	2200      	movs	r2, #0
2400092a:	601a      	str	r2, [r3, #0]
2400092c:	605a      	str	r2, [r3, #4]
2400092e:	609a      	str	r2, [r3, #8]
24000930:	60da      	str	r2, [r3, #12]
24000932:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24000934:	f107 0310 	add.w	r3, r7, #16
24000938:	22b8      	movs	r2, #184	; 0xb8
2400093a:	2100      	movs	r1, #0
2400093c:	4618      	mov	r0, r3
2400093e:	f003 fe01 	bl	24004544 <memset>
  if(hi2c->Instance==I2C2)
24000942:	687b      	ldr	r3, [r7, #4]
24000944:	681b      	ldr	r3, [r3, #0]
24000946:	4a27      	ldr	r2, [pc, #156]	; (240009e4 <HAL_I2C_MspInit+0xc8>)
24000948:	4293      	cmp	r3, r2
2400094a:	d146      	bne.n	240009da <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
2400094c:	f04f 0208 	mov.w	r2, #8
24000950:	f04f 0300 	mov.w	r3, #0
24000954:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
24000958:	2300      	movs	r3, #0
2400095a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400095e:	f107 0310 	add.w	r3, r7, #16
24000962:	4618      	mov	r0, r3
24000964:	f002 fac6 	bl	24002ef4 <HAL_RCCEx_PeriphCLKConfig>
24000968:	4603      	mov	r3, r0
2400096a:	2b00      	cmp	r3, #0
2400096c:	d001      	beq.n	24000972 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
2400096e:	f7ff ffb6 	bl	240008de <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
24000972:	4b1d      	ldr	r3, [pc, #116]	; (240009e8 <HAL_I2C_MspInit+0xcc>)
24000974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000978:	4a1b      	ldr	r2, [pc, #108]	; (240009e8 <HAL_I2C_MspInit+0xcc>)
2400097a:	f043 0302 	orr.w	r3, r3, #2
2400097e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24000982:	4b19      	ldr	r3, [pc, #100]	; (240009e8 <HAL_I2C_MspInit+0xcc>)
24000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000988:	f003 0302 	and.w	r3, r3, #2
2400098c:	60fb      	str	r3, [r7, #12]
2400098e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
24000990:	f44f 6340 	mov.w	r3, #3072	; 0xc00
24000994:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
24000998:	2312      	movs	r3, #18
2400099a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2400099e:	2300      	movs	r3, #0
240009a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
240009a4:	2300      	movs	r3, #0
240009a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
240009aa:	2304      	movs	r3, #4
240009ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240009b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
240009b4:	4619      	mov	r1, r3
240009b6:	480d      	ldr	r0, [pc, #52]	; (240009ec <HAL_I2C_MspInit+0xd0>)
240009b8:	f000 fa60 	bl	24000e7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
240009bc:	4b0a      	ldr	r3, [pc, #40]	; (240009e8 <HAL_I2C_MspInit+0xcc>)
240009be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
240009c2:	4a09      	ldr	r2, [pc, #36]	; (240009e8 <HAL_I2C_MspInit+0xcc>)
240009c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
240009c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
240009cc:	4b06      	ldr	r3, [pc, #24]	; (240009e8 <HAL_I2C_MspInit+0xcc>)
240009ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
240009d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
240009d6:	60bb      	str	r3, [r7, #8]
240009d8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
240009da:	bf00      	nop
240009dc:	37e0      	adds	r7, #224	; 0xe0
240009de:	46bd      	mov	sp, r7
240009e0:	bd80      	pop	{r7, pc}
240009e2:	bf00      	nop
240009e4:	40005800 	.word	0x40005800
240009e8:	58024400 	.word	0x58024400
240009ec:	58020400 	.word	0x58020400

240009f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
240009f0:	b480      	push	{r7}
240009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
240009f4:	e7fe      	b.n	240009f4 <NMI_Handler+0x4>

240009f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
240009f6:	b480      	push	{r7}
240009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
240009fa:	e7fe      	b.n	240009fa <HardFault_Handler+0x4>

240009fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
240009fc:	b480      	push	{r7}
240009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
24000a00:	e7fe      	b.n	24000a00 <MemManage_Handler+0x4>

24000a02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
24000a02:	b480      	push	{r7}
24000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
24000a06:	e7fe      	b.n	24000a06 <BusFault_Handler+0x4>

24000a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
24000a08:	b480      	push	{r7}
24000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
24000a0c:	e7fe      	b.n	24000a0c <UsageFault_Handler+0x4>

24000a0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
24000a0e:	b480      	push	{r7}
24000a10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
24000a12:	bf00      	nop
24000a14:	46bd      	mov	sp, r7
24000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
24000a1a:	4770      	bx	lr

24000a1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
24000a1c:	b480      	push	{r7}
24000a1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
24000a20:	bf00      	nop
24000a22:	46bd      	mov	sp, r7
24000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
24000a28:	4770      	bx	lr

24000a2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
24000a2a:	b480      	push	{r7}
24000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
24000a2e:	bf00      	nop
24000a30:	46bd      	mov	sp, r7
24000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
24000a36:	4770      	bx	lr

24000a38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
24000a38:	b580      	push	{r7, lr}
24000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
24000a3c:	f000 f91a 	bl	24000c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
24000a40:	bf00      	nop
24000a42:	bd80      	pop	{r7, pc}

24000a44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
24000a44:	b480      	push	{r7}
24000a46:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
24000a48:	4b34      	ldr	r3, [pc, #208]	; (24000b1c <SystemInit+0xd8>)
24000a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
24000a4e:	4a33      	ldr	r2, [pc, #204]	; (24000b1c <SystemInit+0xd8>)
24000a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
24000a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24000a58:	4b31      	ldr	r3, [pc, #196]	; (24000b20 <SystemInit+0xdc>)
24000a5a:	681b      	ldr	r3, [r3, #0]
24000a5c:	f003 030f 	and.w	r3, r3, #15
24000a60:	2b06      	cmp	r3, #6
24000a62:	d807      	bhi.n	24000a74 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24000a64:	4b2e      	ldr	r3, [pc, #184]	; (24000b20 <SystemInit+0xdc>)
24000a66:	681b      	ldr	r3, [r3, #0]
24000a68:	f023 030f 	bic.w	r3, r3, #15
24000a6c:	4a2c      	ldr	r2, [pc, #176]	; (24000b20 <SystemInit+0xdc>)
24000a6e:	f043 0307 	orr.w	r3, r3, #7
24000a72:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
24000a74:	4b2b      	ldr	r3, [pc, #172]	; (24000b24 <SystemInit+0xe0>)
24000a76:	681b      	ldr	r3, [r3, #0]
24000a78:	4a2a      	ldr	r2, [pc, #168]	; (24000b24 <SystemInit+0xe0>)
24000a7a:	f043 0301 	orr.w	r3, r3, #1
24000a7e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
24000a80:	4b28      	ldr	r3, [pc, #160]	; (24000b24 <SystemInit+0xe0>)
24000a82:	2200      	movs	r2, #0
24000a84:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
24000a86:	4b27      	ldr	r3, [pc, #156]	; (24000b24 <SystemInit+0xe0>)
24000a88:	681a      	ldr	r2, [r3, #0]
24000a8a:	4926      	ldr	r1, [pc, #152]	; (24000b24 <SystemInit+0xe0>)
24000a8c:	4b26      	ldr	r3, [pc, #152]	; (24000b28 <SystemInit+0xe4>)
24000a8e:	4013      	ands	r3, r2
24000a90:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24000a92:	4b23      	ldr	r3, [pc, #140]	; (24000b20 <SystemInit+0xdc>)
24000a94:	681b      	ldr	r3, [r3, #0]
24000a96:	f003 0308 	and.w	r3, r3, #8
24000a9a:	2b00      	cmp	r3, #0
24000a9c:	d007      	beq.n	24000aae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24000a9e:	4b20      	ldr	r3, [pc, #128]	; (24000b20 <SystemInit+0xdc>)
24000aa0:	681b      	ldr	r3, [r3, #0]
24000aa2:	f023 030f 	bic.w	r3, r3, #15
24000aa6:	4a1e      	ldr	r2, [pc, #120]	; (24000b20 <SystemInit+0xdc>)
24000aa8:	f043 0307 	orr.w	r3, r3, #7
24000aac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
24000aae:	4b1d      	ldr	r3, [pc, #116]	; (24000b24 <SystemInit+0xe0>)
24000ab0:	2200      	movs	r2, #0
24000ab2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
24000ab4:	4b1b      	ldr	r3, [pc, #108]	; (24000b24 <SystemInit+0xe0>)
24000ab6:	2200      	movs	r2, #0
24000ab8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
24000aba:	4b1a      	ldr	r3, [pc, #104]	; (24000b24 <SystemInit+0xe0>)
24000abc:	2200      	movs	r2, #0
24000abe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
24000ac0:	4b18      	ldr	r3, [pc, #96]	; (24000b24 <SystemInit+0xe0>)
24000ac2:	4a1a      	ldr	r2, [pc, #104]	; (24000b2c <SystemInit+0xe8>)
24000ac4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
24000ac6:	4b17      	ldr	r3, [pc, #92]	; (24000b24 <SystemInit+0xe0>)
24000ac8:	4a19      	ldr	r2, [pc, #100]	; (24000b30 <SystemInit+0xec>)
24000aca:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
24000acc:	4b15      	ldr	r3, [pc, #84]	; (24000b24 <SystemInit+0xe0>)
24000ace:	4a19      	ldr	r2, [pc, #100]	; (24000b34 <SystemInit+0xf0>)
24000ad0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
24000ad2:	4b14      	ldr	r3, [pc, #80]	; (24000b24 <SystemInit+0xe0>)
24000ad4:	2200      	movs	r2, #0
24000ad6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
24000ad8:	4b12      	ldr	r3, [pc, #72]	; (24000b24 <SystemInit+0xe0>)
24000ada:	4a16      	ldr	r2, [pc, #88]	; (24000b34 <SystemInit+0xf0>)
24000adc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
24000ade:	4b11      	ldr	r3, [pc, #68]	; (24000b24 <SystemInit+0xe0>)
24000ae0:	2200      	movs	r2, #0
24000ae2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
24000ae4:	4b0f      	ldr	r3, [pc, #60]	; (24000b24 <SystemInit+0xe0>)
24000ae6:	4a13      	ldr	r2, [pc, #76]	; (24000b34 <SystemInit+0xf0>)
24000ae8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
24000aea:	4b0e      	ldr	r3, [pc, #56]	; (24000b24 <SystemInit+0xe0>)
24000aec:	2200      	movs	r2, #0
24000aee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
24000af0:	4b0c      	ldr	r3, [pc, #48]	; (24000b24 <SystemInit+0xe0>)
24000af2:	681b      	ldr	r3, [r3, #0]
24000af4:	4a0b      	ldr	r2, [pc, #44]	; (24000b24 <SystemInit+0xe0>)
24000af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
24000afa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
24000afc:	4b09      	ldr	r3, [pc, #36]	; (24000b24 <SystemInit+0xe0>)
24000afe:	2200      	movs	r2, #0
24000b00:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
24000b02:	4b0d      	ldr	r3, [pc, #52]	; (24000b38 <SystemInit+0xf4>)
24000b04:	f243 02d2 	movw	r2, #12498	; 0x30d2
24000b08:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
24000b0a:	4b04      	ldr	r3, [pc, #16]	; (24000b1c <SystemInit+0xd8>)
24000b0c:	f04f 5210 	mov.w	r2, #603979776	; 0x24000000
24000b10:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
24000b12:	bf00      	nop
24000b14:	46bd      	mov	sp, r7
24000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
24000b1a:	4770      	bx	lr
24000b1c:	e000ed00 	.word	0xe000ed00
24000b20:	52002000 	.word	0x52002000
24000b24:	58024400 	.word	0x58024400
24000b28:	eaf6ed7f 	.word	0xeaf6ed7f
24000b2c:	02020200 	.word	0x02020200
24000b30:	01ff0000 	.word	0x01ff0000
24000b34:	01010280 	.word	0x01010280
24000b38:	52004000 	.word	0x52004000

24000b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
24000b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 24000b74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
24000b40:	f7ff ff80 	bl	24000a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
24000b44:	480c      	ldr	r0, [pc, #48]	; (24000b78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
24000b46:	490d      	ldr	r1, [pc, #52]	; (24000b7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
24000b48:	4a0d      	ldr	r2, [pc, #52]	; (24000b80 <LoopFillZerobss+0x1a>)
  movs r3, #0
24000b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
24000b4c:	e002      	b.n	24000b54 <LoopCopyDataInit>

24000b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
24000b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
24000b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
24000b52:	3304      	adds	r3, #4

24000b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
24000b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
24000b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
24000b58:	d3f9      	bcc.n	24000b4e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
24000b5a:	4a0a      	ldr	r2, [pc, #40]	; (24000b84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
24000b5c:	4c0a      	ldr	r4, [pc, #40]	; (24000b88 <LoopFillZerobss+0x22>)
  movs r3, #0
24000b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
24000b60:	e001      	b.n	24000b66 <LoopFillZerobss>

24000b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
24000b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
24000b64:	3204      	adds	r2, #4

24000b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
24000b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
24000b68:	d3fb      	bcc.n	24000b62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
24000b6a:	f003 fcc7 	bl	240044fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
24000b6e:	f7ff fd09 	bl	24000584 <main>
  bx  lr
24000b72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
24000b74:	24009000 	.word	0x24009000
  ldr r0, =_sdata
24000b78:	240002d4 	.word	0x240002d4
  ldr r1, =_edata
24000b7c:	240002e4 	.word	0x240002e4
  ldr r2, =_sidata
24000b80:	240002d4 	.word	0x240002d4
  ldr r2, =_sbss
24000b84:	240002e4 	.word	0x240002e4
  ldr r4, =_ebss
24000b88:	24000358 	.word	0x24000358

24000b8c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
24000b8c:	e7fe      	b.n	24000b8c <ADC3_IRQHandler>
	...

24000b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
24000b90:	b580      	push	{r7, lr}
24000b92:	b082      	sub	sp, #8
24000b94:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
24000b96:	2003      	movs	r0, #3
24000b98:	f000 f93e 	bl	24000e18 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24000b9c:	f002 f830 	bl	24002c00 <HAL_RCC_GetSysClockFreq>
24000ba0:	4602      	mov	r2, r0
24000ba2:	4b15      	ldr	r3, [pc, #84]	; (24000bf8 <HAL_Init+0x68>)
24000ba4:	699b      	ldr	r3, [r3, #24]
24000ba6:	0a1b      	lsrs	r3, r3, #8
24000ba8:	f003 030f 	and.w	r3, r3, #15
24000bac:	4913      	ldr	r1, [pc, #76]	; (24000bfc <HAL_Init+0x6c>)
24000bae:	5ccb      	ldrb	r3, [r1, r3]
24000bb0:	f003 031f 	and.w	r3, r3, #31
24000bb4:	fa22 f303 	lsr.w	r3, r2, r3
24000bb8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24000bba:	4b0f      	ldr	r3, [pc, #60]	; (24000bf8 <HAL_Init+0x68>)
24000bbc:	699b      	ldr	r3, [r3, #24]
24000bbe:	f003 030f 	and.w	r3, r3, #15
24000bc2:	4a0e      	ldr	r2, [pc, #56]	; (24000bfc <HAL_Init+0x6c>)
24000bc4:	5cd3      	ldrb	r3, [r2, r3]
24000bc6:	f003 031f 	and.w	r3, r3, #31
24000bca:	687a      	ldr	r2, [r7, #4]
24000bcc:	fa22 f303 	lsr.w	r3, r2, r3
24000bd0:	4a0b      	ldr	r2, [pc, #44]	; (24000c00 <HAL_Init+0x70>)
24000bd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24000bd4:	4a0b      	ldr	r2, [pc, #44]	; (24000c04 <HAL_Init+0x74>)
24000bd6:	687b      	ldr	r3, [r7, #4]
24000bd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
24000bda:	200f      	movs	r0, #15
24000bdc:	f000 f814 	bl	24000c08 <HAL_InitTick>
24000be0:	4603      	mov	r3, r0
24000be2:	2b00      	cmp	r3, #0
24000be4:	d001      	beq.n	24000bea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
24000be6:	2301      	movs	r3, #1
24000be8:	e002      	b.n	24000bf0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
24000bea:	f7ff fe7d 	bl	240008e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
24000bee:	2300      	movs	r3, #0
}
24000bf0:	4618      	mov	r0, r3
24000bf2:	3708      	adds	r7, #8
24000bf4:	46bd      	mov	sp, r7
24000bf6:	bd80      	pop	{r7, pc}
24000bf8:	58024400 	.word	0x58024400
24000bfc:	24004634 	.word	0x24004634
24000c00:	240002d8 	.word	0x240002d8
24000c04:	240002d4 	.word	0x240002d4

24000c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
24000c08:	b580      	push	{r7, lr}
24000c0a:	b082      	sub	sp, #8
24000c0c:	af00      	add	r7, sp, #0
24000c0e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
24000c10:	4b15      	ldr	r3, [pc, #84]	; (24000c68 <HAL_InitTick+0x60>)
24000c12:	781b      	ldrb	r3, [r3, #0]
24000c14:	2b00      	cmp	r3, #0
24000c16:	d101      	bne.n	24000c1c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
24000c18:	2301      	movs	r3, #1
24000c1a:	e021      	b.n	24000c60 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
24000c1c:	4b13      	ldr	r3, [pc, #76]	; (24000c6c <HAL_InitTick+0x64>)
24000c1e:	681a      	ldr	r2, [r3, #0]
24000c20:	4b11      	ldr	r3, [pc, #68]	; (24000c68 <HAL_InitTick+0x60>)
24000c22:	781b      	ldrb	r3, [r3, #0]
24000c24:	4619      	mov	r1, r3
24000c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
24000c2a:	fbb3 f3f1 	udiv	r3, r3, r1
24000c2e:	fbb2 f3f3 	udiv	r3, r2, r3
24000c32:	4618      	mov	r0, r3
24000c34:	f000 f915 	bl	24000e62 <HAL_SYSTICK_Config>
24000c38:	4603      	mov	r3, r0
24000c3a:	2b00      	cmp	r3, #0
24000c3c:	d001      	beq.n	24000c42 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
24000c3e:	2301      	movs	r3, #1
24000c40:	e00e      	b.n	24000c60 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
24000c42:	687b      	ldr	r3, [r7, #4]
24000c44:	2b0f      	cmp	r3, #15
24000c46:	d80a      	bhi.n	24000c5e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
24000c48:	2200      	movs	r2, #0
24000c4a:	6879      	ldr	r1, [r7, #4]
24000c4c:	f04f 30ff 	mov.w	r0, #4294967295
24000c50:	f000 f8ed 	bl	24000e2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
24000c54:	4a06      	ldr	r2, [pc, #24]	; (24000c70 <HAL_InitTick+0x68>)
24000c56:	687b      	ldr	r3, [r7, #4]
24000c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
24000c5a:	2300      	movs	r3, #0
24000c5c:	e000      	b.n	24000c60 <HAL_InitTick+0x58>
    return HAL_ERROR;
24000c5e:	2301      	movs	r3, #1
}
24000c60:	4618      	mov	r0, r3
24000c62:	3708      	adds	r7, #8
24000c64:	46bd      	mov	sp, r7
24000c66:	bd80      	pop	{r7, pc}
24000c68:	240002e0 	.word	0x240002e0
24000c6c:	240002d4 	.word	0x240002d4
24000c70:	240002dc 	.word	0x240002dc

24000c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
24000c74:	b480      	push	{r7}
24000c76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
24000c78:	4b06      	ldr	r3, [pc, #24]	; (24000c94 <HAL_IncTick+0x20>)
24000c7a:	781b      	ldrb	r3, [r3, #0]
24000c7c:	461a      	mov	r2, r3
24000c7e:	4b06      	ldr	r3, [pc, #24]	; (24000c98 <HAL_IncTick+0x24>)
24000c80:	681b      	ldr	r3, [r3, #0]
24000c82:	4413      	add	r3, r2
24000c84:	4a04      	ldr	r2, [pc, #16]	; (24000c98 <HAL_IncTick+0x24>)
24000c86:	6013      	str	r3, [r2, #0]
}
24000c88:	bf00      	nop
24000c8a:	46bd      	mov	sp, r7
24000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
24000c90:	4770      	bx	lr
24000c92:	bf00      	nop
24000c94:	240002e0 	.word	0x240002e0
24000c98:	24000354 	.word	0x24000354

24000c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
24000c9c:	b480      	push	{r7}
24000c9e:	af00      	add	r7, sp, #0
  return uwTick;
24000ca0:	4b03      	ldr	r3, [pc, #12]	; (24000cb0 <HAL_GetTick+0x14>)
24000ca2:	681b      	ldr	r3, [r3, #0]
}
24000ca4:	4618      	mov	r0, r3
24000ca6:	46bd      	mov	sp, r7
24000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
24000cac:	4770      	bx	lr
24000cae:	bf00      	nop
24000cb0:	24000354 	.word	0x24000354

24000cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
24000cb4:	b480      	push	{r7}
24000cb6:	b085      	sub	sp, #20
24000cb8:	af00      	add	r7, sp, #0
24000cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
24000cbc:	687b      	ldr	r3, [r7, #4]
24000cbe:	f003 0307 	and.w	r3, r3, #7
24000cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
24000cc4:	4b0b      	ldr	r3, [pc, #44]	; (24000cf4 <__NVIC_SetPriorityGrouping+0x40>)
24000cc6:	68db      	ldr	r3, [r3, #12]
24000cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
24000cca:	68ba      	ldr	r2, [r7, #8]
24000ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
24000cd0:	4013      	ands	r3, r2
24000cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
24000cd4:	68fb      	ldr	r3, [r7, #12]
24000cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
24000cd8:	68bb      	ldr	r3, [r7, #8]
24000cda:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
24000cdc:	4b06      	ldr	r3, [pc, #24]	; (24000cf8 <__NVIC_SetPriorityGrouping+0x44>)
24000cde:	4313      	orrs	r3, r2
24000ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
24000ce2:	4a04      	ldr	r2, [pc, #16]	; (24000cf4 <__NVIC_SetPriorityGrouping+0x40>)
24000ce4:	68bb      	ldr	r3, [r7, #8]
24000ce6:	60d3      	str	r3, [r2, #12]
}
24000ce8:	bf00      	nop
24000cea:	3714      	adds	r7, #20
24000cec:	46bd      	mov	sp, r7
24000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
24000cf2:	4770      	bx	lr
24000cf4:	e000ed00 	.word	0xe000ed00
24000cf8:	05fa0000 	.word	0x05fa0000

24000cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
24000cfc:	b480      	push	{r7}
24000cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
24000d00:	4b04      	ldr	r3, [pc, #16]	; (24000d14 <__NVIC_GetPriorityGrouping+0x18>)
24000d02:	68db      	ldr	r3, [r3, #12]
24000d04:	0a1b      	lsrs	r3, r3, #8
24000d06:	f003 0307 	and.w	r3, r3, #7
}
24000d0a:	4618      	mov	r0, r3
24000d0c:	46bd      	mov	sp, r7
24000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
24000d12:	4770      	bx	lr
24000d14:	e000ed00 	.word	0xe000ed00

24000d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
24000d18:	b480      	push	{r7}
24000d1a:	b083      	sub	sp, #12
24000d1c:	af00      	add	r7, sp, #0
24000d1e:	4603      	mov	r3, r0
24000d20:	6039      	str	r1, [r7, #0]
24000d22:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24000d24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24000d28:	2b00      	cmp	r3, #0
24000d2a:	db0a      	blt.n	24000d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24000d2c:	683b      	ldr	r3, [r7, #0]
24000d2e:	b2da      	uxtb	r2, r3
24000d30:	490c      	ldr	r1, [pc, #48]	; (24000d64 <__NVIC_SetPriority+0x4c>)
24000d32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24000d36:	0112      	lsls	r2, r2, #4
24000d38:	b2d2      	uxtb	r2, r2
24000d3a:	440b      	add	r3, r1
24000d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
24000d40:	e00a      	b.n	24000d58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24000d42:	683b      	ldr	r3, [r7, #0]
24000d44:	b2da      	uxtb	r2, r3
24000d46:	4908      	ldr	r1, [pc, #32]	; (24000d68 <__NVIC_SetPriority+0x50>)
24000d48:	88fb      	ldrh	r3, [r7, #6]
24000d4a:	f003 030f 	and.w	r3, r3, #15
24000d4e:	3b04      	subs	r3, #4
24000d50:	0112      	lsls	r2, r2, #4
24000d52:	b2d2      	uxtb	r2, r2
24000d54:	440b      	add	r3, r1
24000d56:	761a      	strb	r2, [r3, #24]
}
24000d58:	bf00      	nop
24000d5a:	370c      	adds	r7, #12
24000d5c:	46bd      	mov	sp, r7
24000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
24000d62:	4770      	bx	lr
24000d64:	e000e100 	.word	0xe000e100
24000d68:	e000ed00 	.word	0xe000ed00

24000d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
24000d6c:	b480      	push	{r7}
24000d6e:	b089      	sub	sp, #36	; 0x24
24000d70:	af00      	add	r7, sp, #0
24000d72:	60f8      	str	r0, [r7, #12]
24000d74:	60b9      	str	r1, [r7, #8]
24000d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
24000d78:	68fb      	ldr	r3, [r7, #12]
24000d7a:	f003 0307 	and.w	r3, r3, #7
24000d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
24000d80:	69fb      	ldr	r3, [r7, #28]
24000d82:	f1c3 0307 	rsb	r3, r3, #7
24000d86:	2b04      	cmp	r3, #4
24000d88:	bf28      	it	cs
24000d8a:	2304      	movcs	r3, #4
24000d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24000d8e:	69fb      	ldr	r3, [r7, #28]
24000d90:	3304      	adds	r3, #4
24000d92:	2b06      	cmp	r3, #6
24000d94:	d902      	bls.n	24000d9c <NVIC_EncodePriority+0x30>
24000d96:	69fb      	ldr	r3, [r7, #28]
24000d98:	3b03      	subs	r3, #3
24000d9a:	e000      	b.n	24000d9e <NVIC_EncodePriority+0x32>
24000d9c:	2300      	movs	r3, #0
24000d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24000da0:	f04f 32ff 	mov.w	r2, #4294967295
24000da4:	69bb      	ldr	r3, [r7, #24]
24000da6:	fa02 f303 	lsl.w	r3, r2, r3
24000daa:	43da      	mvns	r2, r3
24000dac:	68bb      	ldr	r3, [r7, #8]
24000dae:	401a      	ands	r2, r3
24000db0:	697b      	ldr	r3, [r7, #20]
24000db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
24000db4:	f04f 31ff 	mov.w	r1, #4294967295
24000db8:	697b      	ldr	r3, [r7, #20]
24000dba:	fa01 f303 	lsl.w	r3, r1, r3
24000dbe:	43d9      	mvns	r1, r3
24000dc0:	687b      	ldr	r3, [r7, #4]
24000dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24000dc4:	4313      	orrs	r3, r2
         );
}
24000dc6:	4618      	mov	r0, r3
24000dc8:	3724      	adds	r7, #36	; 0x24
24000dca:	46bd      	mov	sp, r7
24000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
24000dd0:	4770      	bx	lr
	...

24000dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
24000dd4:	b580      	push	{r7, lr}
24000dd6:	b082      	sub	sp, #8
24000dd8:	af00      	add	r7, sp, #0
24000dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
24000ddc:	687b      	ldr	r3, [r7, #4]
24000dde:	3b01      	subs	r3, #1
24000de0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
24000de4:	d301      	bcc.n	24000dea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
24000de6:	2301      	movs	r3, #1
24000de8:	e00f      	b.n	24000e0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
24000dea:	4a0a      	ldr	r2, [pc, #40]	; (24000e14 <SysTick_Config+0x40>)
24000dec:	687b      	ldr	r3, [r7, #4]
24000dee:	3b01      	subs	r3, #1
24000df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
24000df2:	210f      	movs	r1, #15
24000df4:	f04f 30ff 	mov.w	r0, #4294967295
24000df8:	f7ff ff8e 	bl	24000d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
24000dfc:	4b05      	ldr	r3, [pc, #20]	; (24000e14 <SysTick_Config+0x40>)
24000dfe:	2200      	movs	r2, #0
24000e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
24000e02:	4b04      	ldr	r3, [pc, #16]	; (24000e14 <SysTick_Config+0x40>)
24000e04:	2207      	movs	r2, #7
24000e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
24000e08:	2300      	movs	r3, #0
}
24000e0a:	4618      	mov	r0, r3
24000e0c:	3708      	adds	r7, #8
24000e0e:	46bd      	mov	sp, r7
24000e10:	bd80      	pop	{r7, pc}
24000e12:	bf00      	nop
24000e14:	e000e010 	.word	0xe000e010

24000e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
24000e18:	b580      	push	{r7, lr}
24000e1a:	b082      	sub	sp, #8
24000e1c:	af00      	add	r7, sp, #0
24000e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
24000e20:	6878      	ldr	r0, [r7, #4]
24000e22:	f7ff ff47 	bl	24000cb4 <__NVIC_SetPriorityGrouping>
}
24000e26:	bf00      	nop
24000e28:	3708      	adds	r7, #8
24000e2a:	46bd      	mov	sp, r7
24000e2c:	bd80      	pop	{r7, pc}

24000e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
24000e2e:	b580      	push	{r7, lr}
24000e30:	b086      	sub	sp, #24
24000e32:	af00      	add	r7, sp, #0
24000e34:	4603      	mov	r3, r0
24000e36:	60b9      	str	r1, [r7, #8]
24000e38:	607a      	str	r2, [r7, #4]
24000e3a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
24000e3c:	f7ff ff5e 	bl	24000cfc <__NVIC_GetPriorityGrouping>
24000e40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
24000e42:	687a      	ldr	r2, [r7, #4]
24000e44:	68b9      	ldr	r1, [r7, #8]
24000e46:	6978      	ldr	r0, [r7, #20]
24000e48:	f7ff ff90 	bl	24000d6c <NVIC_EncodePriority>
24000e4c:	4602      	mov	r2, r0
24000e4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
24000e52:	4611      	mov	r1, r2
24000e54:	4618      	mov	r0, r3
24000e56:	f7ff ff5f 	bl	24000d18 <__NVIC_SetPriority>
}
24000e5a:	bf00      	nop
24000e5c:	3718      	adds	r7, #24
24000e5e:	46bd      	mov	sp, r7
24000e60:	bd80      	pop	{r7, pc}

24000e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
24000e62:	b580      	push	{r7, lr}
24000e64:	b082      	sub	sp, #8
24000e66:	af00      	add	r7, sp, #0
24000e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
24000e6a:	6878      	ldr	r0, [r7, #4]
24000e6c:	f7ff ffb2 	bl	24000dd4 <SysTick_Config>
24000e70:	4603      	mov	r3, r0
}
24000e72:	4618      	mov	r0, r3
24000e74:	3708      	adds	r7, #8
24000e76:	46bd      	mov	sp, r7
24000e78:	bd80      	pop	{r7, pc}
	...

24000e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
24000e7c:	b480      	push	{r7}
24000e7e:	b089      	sub	sp, #36	; 0x24
24000e80:	af00      	add	r7, sp, #0
24000e82:	6078      	str	r0, [r7, #4]
24000e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
24000e86:	2300      	movs	r3, #0
24000e88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
24000e8a:	4b86      	ldr	r3, [pc, #536]	; (240010a4 <HAL_GPIO_Init+0x228>)
24000e8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
24000e8e:	e18c      	b.n	240011aa <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
24000e90:	683b      	ldr	r3, [r7, #0]
24000e92:	681a      	ldr	r2, [r3, #0]
24000e94:	2101      	movs	r1, #1
24000e96:	69fb      	ldr	r3, [r7, #28]
24000e98:	fa01 f303 	lsl.w	r3, r1, r3
24000e9c:	4013      	ands	r3, r2
24000e9e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
24000ea0:	693b      	ldr	r3, [r7, #16]
24000ea2:	2b00      	cmp	r3, #0
24000ea4:	f000 817e 	beq.w	240011a4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
24000ea8:	683b      	ldr	r3, [r7, #0]
24000eaa:	685b      	ldr	r3, [r3, #4]
24000eac:	f003 0303 	and.w	r3, r3, #3
24000eb0:	2b01      	cmp	r3, #1
24000eb2:	d005      	beq.n	24000ec0 <HAL_GPIO_Init+0x44>
24000eb4:	683b      	ldr	r3, [r7, #0]
24000eb6:	685b      	ldr	r3, [r3, #4]
24000eb8:	f003 0303 	and.w	r3, r3, #3
24000ebc:	2b02      	cmp	r3, #2
24000ebe:	d130      	bne.n	24000f22 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
24000ec0:	687b      	ldr	r3, [r7, #4]
24000ec2:	689b      	ldr	r3, [r3, #8]
24000ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24000ec6:	69fb      	ldr	r3, [r7, #28]
24000ec8:	005b      	lsls	r3, r3, #1
24000eca:	2203      	movs	r2, #3
24000ecc:	fa02 f303 	lsl.w	r3, r2, r3
24000ed0:	43db      	mvns	r3, r3
24000ed2:	69ba      	ldr	r2, [r7, #24]
24000ed4:	4013      	ands	r3, r2
24000ed6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
24000ed8:	683b      	ldr	r3, [r7, #0]
24000eda:	68da      	ldr	r2, [r3, #12]
24000edc:	69fb      	ldr	r3, [r7, #28]
24000ede:	005b      	lsls	r3, r3, #1
24000ee0:	fa02 f303 	lsl.w	r3, r2, r3
24000ee4:	69ba      	ldr	r2, [r7, #24]
24000ee6:	4313      	orrs	r3, r2
24000ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
24000eea:	687b      	ldr	r3, [r7, #4]
24000eec:	69ba      	ldr	r2, [r7, #24]
24000eee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
24000ef0:	687b      	ldr	r3, [r7, #4]
24000ef2:	685b      	ldr	r3, [r3, #4]
24000ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
24000ef6:	2201      	movs	r2, #1
24000ef8:	69fb      	ldr	r3, [r7, #28]
24000efa:	fa02 f303 	lsl.w	r3, r2, r3
24000efe:	43db      	mvns	r3, r3
24000f00:	69ba      	ldr	r2, [r7, #24]
24000f02:	4013      	ands	r3, r2
24000f04:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
24000f06:	683b      	ldr	r3, [r7, #0]
24000f08:	685b      	ldr	r3, [r3, #4]
24000f0a:	091b      	lsrs	r3, r3, #4
24000f0c:	f003 0201 	and.w	r2, r3, #1
24000f10:	69fb      	ldr	r3, [r7, #28]
24000f12:	fa02 f303 	lsl.w	r3, r2, r3
24000f16:	69ba      	ldr	r2, [r7, #24]
24000f18:	4313      	orrs	r3, r2
24000f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
24000f1c:	687b      	ldr	r3, [r7, #4]
24000f1e:	69ba      	ldr	r2, [r7, #24]
24000f20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
24000f22:	683b      	ldr	r3, [r7, #0]
24000f24:	685b      	ldr	r3, [r3, #4]
24000f26:	f003 0303 	and.w	r3, r3, #3
24000f2a:	2b03      	cmp	r3, #3
24000f2c:	d017      	beq.n	24000f5e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
24000f2e:	687b      	ldr	r3, [r7, #4]
24000f30:	68db      	ldr	r3, [r3, #12]
24000f32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
24000f34:	69fb      	ldr	r3, [r7, #28]
24000f36:	005b      	lsls	r3, r3, #1
24000f38:	2203      	movs	r2, #3
24000f3a:	fa02 f303 	lsl.w	r3, r2, r3
24000f3e:	43db      	mvns	r3, r3
24000f40:	69ba      	ldr	r2, [r7, #24]
24000f42:	4013      	ands	r3, r2
24000f44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
24000f46:	683b      	ldr	r3, [r7, #0]
24000f48:	689a      	ldr	r2, [r3, #8]
24000f4a:	69fb      	ldr	r3, [r7, #28]
24000f4c:	005b      	lsls	r3, r3, #1
24000f4e:	fa02 f303 	lsl.w	r3, r2, r3
24000f52:	69ba      	ldr	r2, [r7, #24]
24000f54:	4313      	orrs	r3, r2
24000f56:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
24000f58:	687b      	ldr	r3, [r7, #4]
24000f5a:	69ba      	ldr	r2, [r7, #24]
24000f5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
24000f5e:	683b      	ldr	r3, [r7, #0]
24000f60:	685b      	ldr	r3, [r3, #4]
24000f62:	f003 0303 	and.w	r3, r3, #3
24000f66:	2b02      	cmp	r3, #2
24000f68:	d123      	bne.n	24000fb2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
24000f6a:	69fb      	ldr	r3, [r7, #28]
24000f6c:	08da      	lsrs	r2, r3, #3
24000f6e:	687b      	ldr	r3, [r7, #4]
24000f70:	3208      	adds	r2, #8
24000f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
24000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
24000f78:	69fb      	ldr	r3, [r7, #28]
24000f7a:	f003 0307 	and.w	r3, r3, #7
24000f7e:	009b      	lsls	r3, r3, #2
24000f80:	220f      	movs	r2, #15
24000f82:	fa02 f303 	lsl.w	r3, r2, r3
24000f86:	43db      	mvns	r3, r3
24000f88:	69ba      	ldr	r2, [r7, #24]
24000f8a:	4013      	ands	r3, r2
24000f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
24000f8e:	683b      	ldr	r3, [r7, #0]
24000f90:	691a      	ldr	r2, [r3, #16]
24000f92:	69fb      	ldr	r3, [r7, #28]
24000f94:	f003 0307 	and.w	r3, r3, #7
24000f98:	009b      	lsls	r3, r3, #2
24000f9a:	fa02 f303 	lsl.w	r3, r2, r3
24000f9e:	69ba      	ldr	r2, [r7, #24]
24000fa0:	4313      	orrs	r3, r2
24000fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
24000fa4:	69fb      	ldr	r3, [r7, #28]
24000fa6:	08da      	lsrs	r2, r3, #3
24000fa8:	687b      	ldr	r3, [r7, #4]
24000faa:	3208      	adds	r2, #8
24000fac:	69b9      	ldr	r1, [r7, #24]
24000fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
24000fb2:	687b      	ldr	r3, [r7, #4]
24000fb4:	681b      	ldr	r3, [r3, #0]
24000fb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
24000fb8:	69fb      	ldr	r3, [r7, #28]
24000fba:	005b      	lsls	r3, r3, #1
24000fbc:	2203      	movs	r2, #3
24000fbe:	fa02 f303 	lsl.w	r3, r2, r3
24000fc2:	43db      	mvns	r3, r3
24000fc4:	69ba      	ldr	r2, [r7, #24]
24000fc6:	4013      	ands	r3, r2
24000fc8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
24000fca:	683b      	ldr	r3, [r7, #0]
24000fcc:	685b      	ldr	r3, [r3, #4]
24000fce:	f003 0203 	and.w	r2, r3, #3
24000fd2:	69fb      	ldr	r3, [r7, #28]
24000fd4:	005b      	lsls	r3, r3, #1
24000fd6:	fa02 f303 	lsl.w	r3, r2, r3
24000fda:	69ba      	ldr	r2, [r7, #24]
24000fdc:	4313      	orrs	r3, r2
24000fde:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
24000fe0:	687b      	ldr	r3, [r7, #4]
24000fe2:	69ba      	ldr	r2, [r7, #24]
24000fe4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
24000fe6:	683b      	ldr	r3, [r7, #0]
24000fe8:	685b      	ldr	r3, [r3, #4]
24000fea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
24000fee:	2b00      	cmp	r3, #0
24000ff0:	f000 80d8 	beq.w	240011a4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24000ff4:	4b2c      	ldr	r3, [pc, #176]	; (240010a8 <HAL_GPIO_Init+0x22c>)
24000ff6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24000ffa:	4a2b      	ldr	r2, [pc, #172]	; (240010a8 <HAL_GPIO_Init+0x22c>)
24000ffc:	f043 0302 	orr.w	r3, r3, #2
24001000:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
24001004:	4b28      	ldr	r3, [pc, #160]	; (240010a8 <HAL_GPIO_Init+0x22c>)
24001006:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
2400100a:	f003 0302 	and.w	r3, r3, #2
2400100e:	60fb      	str	r3, [r7, #12]
24001010:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
24001012:	4a26      	ldr	r2, [pc, #152]	; (240010ac <HAL_GPIO_Init+0x230>)
24001014:	69fb      	ldr	r3, [r7, #28]
24001016:	089b      	lsrs	r3, r3, #2
24001018:	3302      	adds	r3, #2
2400101a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
2400101e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24001020:	69fb      	ldr	r3, [r7, #28]
24001022:	f003 0303 	and.w	r3, r3, #3
24001026:	009b      	lsls	r3, r3, #2
24001028:	220f      	movs	r2, #15
2400102a:	fa02 f303 	lsl.w	r3, r2, r3
2400102e:	43db      	mvns	r3, r3
24001030:	69ba      	ldr	r2, [r7, #24]
24001032:	4013      	ands	r3, r2
24001034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
24001036:	687b      	ldr	r3, [r7, #4]
24001038:	4a1d      	ldr	r2, [pc, #116]	; (240010b0 <HAL_GPIO_Init+0x234>)
2400103a:	4293      	cmp	r3, r2
2400103c:	d04a      	beq.n	240010d4 <HAL_GPIO_Init+0x258>
2400103e:	687b      	ldr	r3, [r7, #4]
24001040:	4a1c      	ldr	r2, [pc, #112]	; (240010b4 <HAL_GPIO_Init+0x238>)
24001042:	4293      	cmp	r3, r2
24001044:	d02b      	beq.n	2400109e <HAL_GPIO_Init+0x222>
24001046:	687b      	ldr	r3, [r7, #4]
24001048:	4a1b      	ldr	r2, [pc, #108]	; (240010b8 <HAL_GPIO_Init+0x23c>)
2400104a:	4293      	cmp	r3, r2
2400104c:	d025      	beq.n	2400109a <HAL_GPIO_Init+0x21e>
2400104e:	687b      	ldr	r3, [r7, #4]
24001050:	4a1a      	ldr	r2, [pc, #104]	; (240010bc <HAL_GPIO_Init+0x240>)
24001052:	4293      	cmp	r3, r2
24001054:	d01f      	beq.n	24001096 <HAL_GPIO_Init+0x21a>
24001056:	687b      	ldr	r3, [r7, #4]
24001058:	4a19      	ldr	r2, [pc, #100]	; (240010c0 <HAL_GPIO_Init+0x244>)
2400105a:	4293      	cmp	r3, r2
2400105c:	d019      	beq.n	24001092 <HAL_GPIO_Init+0x216>
2400105e:	687b      	ldr	r3, [r7, #4]
24001060:	4a18      	ldr	r2, [pc, #96]	; (240010c4 <HAL_GPIO_Init+0x248>)
24001062:	4293      	cmp	r3, r2
24001064:	d013      	beq.n	2400108e <HAL_GPIO_Init+0x212>
24001066:	687b      	ldr	r3, [r7, #4]
24001068:	4a17      	ldr	r2, [pc, #92]	; (240010c8 <HAL_GPIO_Init+0x24c>)
2400106a:	4293      	cmp	r3, r2
2400106c:	d00d      	beq.n	2400108a <HAL_GPIO_Init+0x20e>
2400106e:	687b      	ldr	r3, [r7, #4]
24001070:	4a16      	ldr	r2, [pc, #88]	; (240010cc <HAL_GPIO_Init+0x250>)
24001072:	4293      	cmp	r3, r2
24001074:	d007      	beq.n	24001086 <HAL_GPIO_Init+0x20a>
24001076:	687b      	ldr	r3, [r7, #4]
24001078:	4a15      	ldr	r2, [pc, #84]	; (240010d0 <HAL_GPIO_Init+0x254>)
2400107a:	4293      	cmp	r3, r2
2400107c:	d101      	bne.n	24001082 <HAL_GPIO_Init+0x206>
2400107e:	2309      	movs	r3, #9
24001080:	e029      	b.n	240010d6 <HAL_GPIO_Init+0x25a>
24001082:	230a      	movs	r3, #10
24001084:	e027      	b.n	240010d6 <HAL_GPIO_Init+0x25a>
24001086:	2307      	movs	r3, #7
24001088:	e025      	b.n	240010d6 <HAL_GPIO_Init+0x25a>
2400108a:	2306      	movs	r3, #6
2400108c:	e023      	b.n	240010d6 <HAL_GPIO_Init+0x25a>
2400108e:	2305      	movs	r3, #5
24001090:	e021      	b.n	240010d6 <HAL_GPIO_Init+0x25a>
24001092:	2304      	movs	r3, #4
24001094:	e01f      	b.n	240010d6 <HAL_GPIO_Init+0x25a>
24001096:	2303      	movs	r3, #3
24001098:	e01d      	b.n	240010d6 <HAL_GPIO_Init+0x25a>
2400109a:	2302      	movs	r3, #2
2400109c:	e01b      	b.n	240010d6 <HAL_GPIO_Init+0x25a>
2400109e:	2301      	movs	r3, #1
240010a0:	e019      	b.n	240010d6 <HAL_GPIO_Init+0x25a>
240010a2:	bf00      	nop
240010a4:	58000080 	.word	0x58000080
240010a8:	58024400 	.word	0x58024400
240010ac:	58000400 	.word	0x58000400
240010b0:	58020000 	.word	0x58020000
240010b4:	58020400 	.word	0x58020400
240010b8:	58020800 	.word	0x58020800
240010bc:	58020c00 	.word	0x58020c00
240010c0:	58021000 	.word	0x58021000
240010c4:	58021400 	.word	0x58021400
240010c8:	58021800 	.word	0x58021800
240010cc:	58021c00 	.word	0x58021c00
240010d0:	58022400 	.word	0x58022400
240010d4:	2300      	movs	r3, #0
240010d6:	69fa      	ldr	r2, [r7, #28]
240010d8:	f002 0203 	and.w	r2, r2, #3
240010dc:	0092      	lsls	r2, r2, #2
240010de:	4093      	lsls	r3, r2
240010e0:	69ba      	ldr	r2, [r7, #24]
240010e2:	4313      	orrs	r3, r2
240010e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
240010e6:	4938      	ldr	r1, [pc, #224]	; (240011c8 <HAL_GPIO_Init+0x34c>)
240010e8:	69fb      	ldr	r3, [r7, #28]
240010ea:	089b      	lsrs	r3, r3, #2
240010ec:	3302      	adds	r3, #2
240010ee:	69ba      	ldr	r2, [r7, #24]
240010f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
240010f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240010f8:	681b      	ldr	r3, [r3, #0]
240010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
240010fc:	693b      	ldr	r3, [r7, #16]
240010fe:	43db      	mvns	r3, r3
24001100:	69ba      	ldr	r2, [r7, #24]
24001102:	4013      	ands	r3, r2
24001104:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
24001106:	683b      	ldr	r3, [r7, #0]
24001108:	685b      	ldr	r3, [r3, #4]
2400110a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
2400110e:	2b00      	cmp	r3, #0
24001110:	d003      	beq.n	2400111a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
24001112:	69ba      	ldr	r2, [r7, #24]
24001114:	693b      	ldr	r3, [r7, #16]
24001116:	4313      	orrs	r3, r2
24001118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
2400111a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
2400111e:	69bb      	ldr	r3, [r7, #24]
24001120:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
24001122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24001126:	685b      	ldr	r3, [r3, #4]
24001128:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
2400112a:	693b      	ldr	r3, [r7, #16]
2400112c:	43db      	mvns	r3, r3
2400112e:	69ba      	ldr	r2, [r7, #24]
24001130:	4013      	ands	r3, r2
24001132:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
24001134:	683b      	ldr	r3, [r7, #0]
24001136:	685b      	ldr	r3, [r3, #4]
24001138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
2400113c:	2b00      	cmp	r3, #0
2400113e:	d003      	beq.n	24001148 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
24001140:	69ba      	ldr	r2, [r7, #24]
24001142:	693b      	ldr	r3, [r7, #16]
24001144:	4313      	orrs	r3, r2
24001146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
24001148:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
2400114c:	69bb      	ldr	r3, [r7, #24]
2400114e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
24001150:	697b      	ldr	r3, [r7, #20]
24001152:	685b      	ldr	r3, [r3, #4]
24001154:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
24001156:	693b      	ldr	r3, [r7, #16]
24001158:	43db      	mvns	r3, r3
2400115a:	69ba      	ldr	r2, [r7, #24]
2400115c:	4013      	ands	r3, r2
2400115e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
24001160:	683b      	ldr	r3, [r7, #0]
24001162:	685b      	ldr	r3, [r3, #4]
24001164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24001168:	2b00      	cmp	r3, #0
2400116a:	d003      	beq.n	24001174 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
2400116c:	69ba      	ldr	r2, [r7, #24]
2400116e:	693b      	ldr	r3, [r7, #16]
24001170:	4313      	orrs	r3, r2
24001172:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
24001174:	697b      	ldr	r3, [r7, #20]
24001176:	69ba      	ldr	r2, [r7, #24]
24001178:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
2400117a:	697b      	ldr	r3, [r7, #20]
2400117c:	681b      	ldr	r3, [r3, #0]
2400117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
24001180:	693b      	ldr	r3, [r7, #16]
24001182:	43db      	mvns	r3, r3
24001184:	69ba      	ldr	r2, [r7, #24]
24001186:	4013      	ands	r3, r2
24001188:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
2400118a:	683b      	ldr	r3, [r7, #0]
2400118c:	685b      	ldr	r3, [r3, #4]
2400118e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24001192:	2b00      	cmp	r3, #0
24001194:	d003      	beq.n	2400119e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
24001196:	69ba      	ldr	r2, [r7, #24]
24001198:	693b      	ldr	r3, [r7, #16]
2400119a:	4313      	orrs	r3, r2
2400119c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
2400119e:	697b      	ldr	r3, [r7, #20]
240011a0:	69ba      	ldr	r2, [r7, #24]
240011a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
240011a4:	69fb      	ldr	r3, [r7, #28]
240011a6:	3301      	adds	r3, #1
240011a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
240011aa:	683b      	ldr	r3, [r7, #0]
240011ac:	681a      	ldr	r2, [r3, #0]
240011ae:	69fb      	ldr	r3, [r7, #28]
240011b0:	fa22 f303 	lsr.w	r3, r2, r3
240011b4:	2b00      	cmp	r3, #0
240011b6:	f47f ae6b 	bne.w	24000e90 <HAL_GPIO_Init+0x14>
  }
}
240011ba:	bf00      	nop
240011bc:	bf00      	nop
240011be:	3724      	adds	r7, #36	; 0x24
240011c0:	46bd      	mov	sp, r7
240011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
240011c6:	4770      	bx	lr
240011c8:	58000400 	.word	0x58000400

240011cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
240011cc:	b480      	push	{r7}
240011ce:	b083      	sub	sp, #12
240011d0:	af00      	add	r7, sp, #0
240011d2:	6078      	str	r0, [r7, #4]
240011d4:	460b      	mov	r3, r1
240011d6:	807b      	strh	r3, [r7, #2]
240011d8:	4613      	mov	r3, r2
240011da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
240011dc:	787b      	ldrb	r3, [r7, #1]
240011de:	2b00      	cmp	r3, #0
240011e0:	d003      	beq.n	240011ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
240011e2:	887a      	ldrh	r2, [r7, #2]
240011e4:	687b      	ldr	r3, [r7, #4]
240011e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
240011e8:	e003      	b.n	240011f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
240011ea:	887b      	ldrh	r3, [r7, #2]
240011ec:	041a      	lsls	r2, r3, #16
240011ee:	687b      	ldr	r3, [r7, #4]
240011f0:	619a      	str	r2, [r3, #24]
}
240011f2:	bf00      	nop
240011f4:	370c      	adds	r7, #12
240011f6:	46bd      	mov	sp, r7
240011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
240011fc:	4770      	bx	lr
	...

24001200 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
24001200:	b580      	push	{r7, lr}
24001202:	b082      	sub	sp, #8
24001204:	af00      	add	r7, sp, #0
24001206:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
24001208:	687b      	ldr	r3, [r7, #4]
2400120a:	2b00      	cmp	r3, #0
2400120c:	d101      	bne.n	24001212 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
2400120e:	2301      	movs	r3, #1
24001210:	e07f      	b.n	24001312 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
24001212:	687b      	ldr	r3, [r7, #4]
24001214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24001218:	b2db      	uxtb	r3, r3
2400121a:	2b00      	cmp	r3, #0
2400121c:	d106      	bne.n	2400122c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
2400121e:	687b      	ldr	r3, [r7, #4]
24001220:	2200      	movs	r2, #0
24001222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
24001226:	6878      	ldr	r0, [r7, #4]
24001228:	f7ff fb78 	bl	2400091c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
2400122c:	687b      	ldr	r3, [r7, #4]
2400122e:	2224      	movs	r2, #36	; 0x24
24001230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
24001234:	687b      	ldr	r3, [r7, #4]
24001236:	681b      	ldr	r3, [r3, #0]
24001238:	681a      	ldr	r2, [r3, #0]
2400123a:	687b      	ldr	r3, [r7, #4]
2400123c:	681b      	ldr	r3, [r3, #0]
2400123e:	f022 0201 	bic.w	r2, r2, #1
24001242:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
24001244:	687b      	ldr	r3, [r7, #4]
24001246:	685a      	ldr	r2, [r3, #4]
24001248:	687b      	ldr	r3, [r7, #4]
2400124a:	681b      	ldr	r3, [r3, #0]
2400124c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
24001250:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
24001252:	687b      	ldr	r3, [r7, #4]
24001254:	681b      	ldr	r3, [r3, #0]
24001256:	689a      	ldr	r2, [r3, #8]
24001258:	687b      	ldr	r3, [r7, #4]
2400125a:	681b      	ldr	r3, [r3, #0]
2400125c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
24001260:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
24001262:	687b      	ldr	r3, [r7, #4]
24001264:	68db      	ldr	r3, [r3, #12]
24001266:	2b01      	cmp	r3, #1
24001268:	d107      	bne.n	2400127a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
2400126a:	687b      	ldr	r3, [r7, #4]
2400126c:	689a      	ldr	r2, [r3, #8]
2400126e:	687b      	ldr	r3, [r7, #4]
24001270:	681b      	ldr	r3, [r3, #0]
24001272:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
24001276:	609a      	str	r2, [r3, #8]
24001278:	e006      	b.n	24001288 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
2400127a:	687b      	ldr	r3, [r7, #4]
2400127c:	689a      	ldr	r2, [r3, #8]
2400127e:	687b      	ldr	r3, [r7, #4]
24001280:	681b      	ldr	r3, [r3, #0]
24001282:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
24001286:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24001288:	687b      	ldr	r3, [r7, #4]
2400128a:	68db      	ldr	r3, [r3, #12]
2400128c:	2b02      	cmp	r3, #2
2400128e:	d104      	bne.n	2400129a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
24001290:	687b      	ldr	r3, [r7, #4]
24001292:	681b      	ldr	r3, [r3, #0]
24001294:	f44f 6200 	mov.w	r2, #2048	; 0x800
24001298:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
2400129a:	687b      	ldr	r3, [r7, #4]
2400129c:	681b      	ldr	r3, [r3, #0]
2400129e:	6859      	ldr	r1, [r3, #4]
240012a0:	687b      	ldr	r3, [r7, #4]
240012a2:	681a      	ldr	r2, [r3, #0]
240012a4:	4b1d      	ldr	r3, [pc, #116]	; (2400131c <HAL_I2C_Init+0x11c>)
240012a6:	430b      	orrs	r3, r1
240012a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
240012aa:	687b      	ldr	r3, [r7, #4]
240012ac:	681b      	ldr	r3, [r3, #0]
240012ae:	68da      	ldr	r2, [r3, #12]
240012b0:	687b      	ldr	r3, [r7, #4]
240012b2:	681b      	ldr	r3, [r3, #0]
240012b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
240012b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
240012ba:	687b      	ldr	r3, [r7, #4]
240012bc:	691a      	ldr	r2, [r3, #16]
240012be:	687b      	ldr	r3, [r7, #4]
240012c0:	695b      	ldr	r3, [r3, #20]
240012c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
240012c6:	687b      	ldr	r3, [r7, #4]
240012c8:	699b      	ldr	r3, [r3, #24]
240012ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
240012cc:	687b      	ldr	r3, [r7, #4]
240012ce:	681b      	ldr	r3, [r3, #0]
240012d0:	430a      	orrs	r2, r1
240012d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
240012d4:	687b      	ldr	r3, [r7, #4]
240012d6:	69d9      	ldr	r1, [r3, #28]
240012d8:	687b      	ldr	r3, [r7, #4]
240012da:	6a1a      	ldr	r2, [r3, #32]
240012dc:	687b      	ldr	r3, [r7, #4]
240012de:	681b      	ldr	r3, [r3, #0]
240012e0:	430a      	orrs	r2, r1
240012e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
240012e4:	687b      	ldr	r3, [r7, #4]
240012e6:	681b      	ldr	r3, [r3, #0]
240012e8:	681a      	ldr	r2, [r3, #0]
240012ea:	687b      	ldr	r3, [r7, #4]
240012ec:	681b      	ldr	r3, [r3, #0]
240012ee:	f042 0201 	orr.w	r2, r2, #1
240012f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
240012f4:	687b      	ldr	r3, [r7, #4]
240012f6:	2200      	movs	r2, #0
240012f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
240012fa:	687b      	ldr	r3, [r7, #4]
240012fc:	2220      	movs	r2, #32
240012fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
24001302:	687b      	ldr	r3, [r7, #4]
24001304:	2200      	movs	r2, #0
24001306:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
24001308:	687b      	ldr	r3, [r7, #4]
2400130a:	2200      	movs	r2, #0
2400130c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
24001310:	2300      	movs	r3, #0
}
24001312:	4618      	mov	r0, r3
24001314:	3708      	adds	r7, #8
24001316:	46bd      	mov	sp, r7
24001318:	bd80      	pop	{r7, pc}
2400131a:	bf00      	nop
2400131c:	02008000 	.word	0x02008000

24001320 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
24001320:	b580      	push	{r7, lr}
24001322:	b088      	sub	sp, #32
24001324:	af02      	add	r7, sp, #8
24001326:	60f8      	str	r0, [r7, #12]
24001328:	4608      	mov	r0, r1
2400132a:	4611      	mov	r1, r2
2400132c:	461a      	mov	r2, r3
2400132e:	4603      	mov	r3, r0
24001330:	817b      	strh	r3, [r7, #10]
24001332:	460b      	mov	r3, r1
24001334:	813b      	strh	r3, [r7, #8]
24001336:	4613      	mov	r3, r2
24001338:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400133a:	68fb      	ldr	r3, [r7, #12]
2400133c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24001340:	b2db      	uxtb	r3, r3
24001342:	2b20      	cmp	r3, #32
24001344:	f040 80f9 	bne.w	2400153a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
24001348:	6a3b      	ldr	r3, [r7, #32]
2400134a:	2b00      	cmp	r3, #0
2400134c:	d002      	beq.n	24001354 <HAL_I2C_Mem_Write+0x34>
2400134e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
24001350:	2b00      	cmp	r3, #0
24001352:	d105      	bne.n	24001360 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
24001354:	68fb      	ldr	r3, [r7, #12]
24001356:	f44f 7200 	mov.w	r2, #512	; 0x200
2400135a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400135c:	2301      	movs	r3, #1
2400135e:	e0ed      	b.n	2400153c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
24001360:	68fb      	ldr	r3, [r7, #12]
24001362:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24001366:	2b01      	cmp	r3, #1
24001368:	d101      	bne.n	2400136e <HAL_I2C_Mem_Write+0x4e>
2400136a:	2302      	movs	r3, #2
2400136c:	e0e6      	b.n	2400153c <HAL_I2C_Mem_Write+0x21c>
2400136e:	68fb      	ldr	r3, [r7, #12]
24001370:	2201      	movs	r2, #1
24001372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
24001376:	f7ff fc91 	bl	24000c9c <HAL_GetTick>
2400137a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
2400137c:	697b      	ldr	r3, [r7, #20]
2400137e:	9300      	str	r3, [sp, #0]
24001380:	2319      	movs	r3, #25
24001382:	2201      	movs	r2, #1
24001384:	f44f 4100 	mov.w	r1, #32768	; 0x8000
24001388:	68f8      	ldr	r0, [r7, #12]
2400138a:	f000 fbcb 	bl	24001b24 <I2C_WaitOnFlagUntilTimeout>
2400138e:	4603      	mov	r3, r0
24001390:	2b00      	cmp	r3, #0
24001392:	d001      	beq.n	24001398 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
24001394:	2301      	movs	r3, #1
24001396:	e0d1      	b.n	2400153c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
24001398:	68fb      	ldr	r3, [r7, #12]
2400139a:	2221      	movs	r2, #33	; 0x21
2400139c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
240013a0:	68fb      	ldr	r3, [r7, #12]
240013a2:	2240      	movs	r2, #64	; 0x40
240013a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
240013a8:	68fb      	ldr	r3, [r7, #12]
240013aa:	2200      	movs	r2, #0
240013ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
240013ae:	68fb      	ldr	r3, [r7, #12]
240013b0:	6a3a      	ldr	r2, [r7, #32]
240013b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
240013b4:	68fb      	ldr	r3, [r7, #12]
240013b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
240013b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
240013ba:	68fb      	ldr	r3, [r7, #12]
240013bc:	2200      	movs	r2, #0
240013be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
240013c0:	88f8      	ldrh	r0, [r7, #6]
240013c2:	893a      	ldrh	r2, [r7, #8]
240013c4:	8979      	ldrh	r1, [r7, #10]
240013c6:	697b      	ldr	r3, [r7, #20]
240013c8:	9301      	str	r3, [sp, #4]
240013ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
240013cc:	9300      	str	r3, [sp, #0]
240013ce:	4603      	mov	r3, r0
240013d0:	68f8      	ldr	r0, [r7, #12]
240013d2:	f000 fadb 	bl	2400198c <I2C_RequestMemoryWrite>
240013d6:	4603      	mov	r3, r0
240013d8:	2b00      	cmp	r3, #0
240013da:	d005      	beq.n	240013e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
240013dc:	68fb      	ldr	r3, [r7, #12]
240013de:	2200      	movs	r2, #0
240013e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
240013e4:	2301      	movs	r3, #1
240013e6:	e0a9      	b.n	2400153c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
240013e8:	68fb      	ldr	r3, [r7, #12]
240013ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
240013ec:	b29b      	uxth	r3, r3
240013ee:	2bff      	cmp	r3, #255	; 0xff
240013f0:	d90e      	bls.n	24001410 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
240013f2:	68fb      	ldr	r3, [r7, #12]
240013f4:	22ff      	movs	r2, #255	; 0xff
240013f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
240013f8:	68fb      	ldr	r3, [r7, #12]
240013fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
240013fc:	b2da      	uxtb	r2, r3
240013fe:	8979      	ldrh	r1, [r7, #10]
24001400:	2300      	movs	r3, #0
24001402:	9300      	str	r3, [sp, #0]
24001404:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
24001408:	68f8      	ldr	r0, [r7, #12]
2400140a:	f000 fd45 	bl	24001e98 <I2C_TransferConfig>
2400140e:	e00f      	b.n	24001430 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
24001410:	68fb      	ldr	r3, [r7, #12]
24001412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
24001414:	b29a      	uxth	r2, r3
24001416:	68fb      	ldr	r3, [r7, #12]
24001418:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
2400141a:	68fb      	ldr	r3, [r7, #12]
2400141c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400141e:	b2da      	uxtb	r2, r3
24001420:	8979      	ldrh	r1, [r7, #10]
24001422:	2300      	movs	r3, #0
24001424:	9300      	str	r3, [sp, #0]
24001426:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400142a:	68f8      	ldr	r0, [r7, #12]
2400142c:	f000 fd34 	bl	24001e98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
24001430:	697a      	ldr	r2, [r7, #20]
24001432:	6ab9      	ldr	r1, [r7, #40]	; 0x28
24001434:	68f8      	ldr	r0, [r7, #12]
24001436:	f000 fbc4 	bl	24001bc2 <I2C_WaitOnTXISFlagUntilTimeout>
2400143a:	4603      	mov	r3, r0
2400143c:	2b00      	cmp	r3, #0
2400143e:	d001      	beq.n	24001444 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
24001440:	2301      	movs	r3, #1
24001442:	e07b      	b.n	2400153c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
24001444:	68fb      	ldr	r3, [r7, #12]
24001446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24001448:	781a      	ldrb	r2, [r3, #0]
2400144a:	68fb      	ldr	r3, [r7, #12]
2400144c:	681b      	ldr	r3, [r3, #0]
2400144e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
24001450:	68fb      	ldr	r3, [r7, #12]
24001452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24001454:	1c5a      	adds	r2, r3, #1
24001456:	68fb      	ldr	r3, [r7, #12]
24001458:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
2400145a:	68fb      	ldr	r3, [r7, #12]
2400145c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400145e:	b29b      	uxth	r3, r3
24001460:	3b01      	subs	r3, #1
24001462:	b29a      	uxth	r2, r3
24001464:	68fb      	ldr	r3, [r7, #12]
24001466:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
24001468:	68fb      	ldr	r3, [r7, #12]
2400146a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400146c:	3b01      	subs	r3, #1
2400146e:	b29a      	uxth	r2, r3
24001470:	68fb      	ldr	r3, [r7, #12]
24001472:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
24001474:	68fb      	ldr	r3, [r7, #12]
24001476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
24001478:	b29b      	uxth	r3, r3
2400147a:	2b00      	cmp	r3, #0
2400147c:	d034      	beq.n	240014e8 <HAL_I2C_Mem_Write+0x1c8>
2400147e:	68fb      	ldr	r3, [r7, #12]
24001480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
24001482:	2b00      	cmp	r3, #0
24001484:	d130      	bne.n	240014e8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
24001486:	697b      	ldr	r3, [r7, #20]
24001488:	9300      	str	r3, [sp, #0]
2400148a:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400148c:	2200      	movs	r2, #0
2400148e:	2180      	movs	r1, #128	; 0x80
24001490:	68f8      	ldr	r0, [r7, #12]
24001492:	f000 fb47 	bl	24001b24 <I2C_WaitOnFlagUntilTimeout>
24001496:	4603      	mov	r3, r0
24001498:	2b00      	cmp	r3, #0
2400149a:	d001      	beq.n	240014a0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
2400149c:	2301      	movs	r3, #1
2400149e:	e04d      	b.n	2400153c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
240014a0:	68fb      	ldr	r3, [r7, #12]
240014a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
240014a4:	b29b      	uxth	r3, r3
240014a6:	2bff      	cmp	r3, #255	; 0xff
240014a8:	d90e      	bls.n	240014c8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
240014aa:	68fb      	ldr	r3, [r7, #12]
240014ac:	22ff      	movs	r2, #255	; 0xff
240014ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
240014b0:	68fb      	ldr	r3, [r7, #12]
240014b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
240014b4:	b2da      	uxtb	r2, r3
240014b6:	8979      	ldrh	r1, [r7, #10]
240014b8:	2300      	movs	r3, #0
240014ba:	9300      	str	r3, [sp, #0]
240014bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
240014c0:	68f8      	ldr	r0, [r7, #12]
240014c2:	f000 fce9 	bl	24001e98 <I2C_TransferConfig>
240014c6:	e00f      	b.n	240014e8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
240014c8:	68fb      	ldr	r3, [r7, #12]
240014ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
240014cc:	b29a      	uxth	r2, r3
240014ce:	68fb      	ldr	r3, [r7, #12]
240014d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
240014d2:	68fb      	ldr	r3, [r7, #12]
240014d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
240014d6:	b2da      	uxtb	r2, r3
240014d8:	8979      	ldrh	r1, [r7, #10]
240014da:	2300      	movs	r3, #0
240014dc:	9300      	str	r3, [sp, #0]
240014de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
240014e2:	68f8      	ldr	r0, [r7, #12]
240014e4:	f000 fcd8 	bl	24001e98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
240014e8:	68fb      	ldr	r3, [r7, #12]
240014ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
240014ec:	b29b      	uxth	r3, r3
240014ee:	2b00      	cmp	r3, #0
240014f0:	d19e      	bne.n	24001430 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
240014f2:	697a      	ldr	r2, [r7, #20]
240014f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
240014f6:	68f8      	ldr	r0, [r7, #12]
240014f8:	f000 fbaa 	bl	24001c50 <I2C_WaitOnSTOPFlagUntilTimeout>
240014fc:	4603      	mov	r3, r0
240014fe:	2b00      	cmp	r3, #0
24001500:	d001      	beq.n	24001506 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
24001502:	2301      	movs	r3, #1
24001504:	e01a      	b.n	2400153c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24001506:	68fb      	ldr	r3, [r7, #12]
24001508:	681b      	ldr	r3, [r3, #0]
2400150a:	2220      	movs	r2, #32
2400150c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2400150e:	68fb      	ldr	r3, [r7, #12]
24001510:	681b      	ldr	r3, [r3, #0]
24001512:	6859      	ldr	r1, [r3, #4]
24001514:	68fb      	ldr	r3, [r7, #12]
24001516:	681a      	ldr	r2, [r3, #0]
24001518:	4b0a      	ldr	r3, [pc, #40]	; (24001544 <HAL_I2C_Mem_Write+0x224>)
2400151a:	400b      	ands	r3, r1
2400151c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2400151e:	68fb      	ldr	r3, [r7, #12]
24001520:	2220      	movs	r2, #32
24001522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
24001526:	68fb      	ldr	r3, [r7, #12]
24001528:	2200      	movs	r2, #0
2400152a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400152e:	68fb      	ldr	r3, [r7, #12]
24001530:	2200      	movs	r2, #0
24001532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
24001536:	2300      	movs	r3, #0
24001538:	e000      	b.n	2400153c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
2400153a:	2302      	movs	r3, #2
  }
}
2400153c:	4618      	mov	r0, r3
2400153e:	3718      	adds	r7, #24
24001540:	46bd      	mov	sp, r7
24001542:	bd80      	pop	{r7, pc}
24001544:	fe00e800 	.word	0xfe00e800

24001548 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
24001548:	b580      	push	{r7, lr}
2400154a:	b088      	sub	sp, #32
2400154c:	af02      	add	r7, sp, #8
2400154e:	60f8      	str	r0, [r7, #12]
24001550:	4608      	mov	r0, r1
24001552:	4611      	mov	r1, r2
24001554:	461a      	mov	r2, r3
24001556:	4603      	mov	r3, r0
24001558:	817b      	strh	r3, [r7, #10]
2400155a:	460b      	mov	r3, r1
2400155c:	813b      	strh	r3, [r7, #8]
2400155e:	4613      	mov	r3, r2
24001560:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
24001562:	68fb      	ldr	r3, [r7, #12]
24001564:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24001568:	b2db      	uxtb	r3, r3
2400156a:	2b20      	cmp	r3, #32
2400156c:	f040 80fd 	bne.w	2400176a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
24001570:	6a3b      	ldr	r3, [r7, #32]
24001572:	2b00      	cmp	r3, #0
24001574:	d002      	beq.n	2400157c <HAL_I2C_Mem_Read+0x34>
24001576:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
24001578:	2b00      	cmp	r3, #0
2400157a:	d105      	bne.n	24001588 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400157c:	68fb      	ldr	r3, [r7, #12]
2400157e:	f44f 7200 	mov.w	r2, #512	; 0x200
24001582:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
24001584:	2301      	movs	r3, #1
24001586:	e0f1      	b.n	2400176c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
24001588:	68fb      	ldr	r3, [r7, #12]
2400158a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400158e:	2b01      	cmp	r3, #1
24001590:	d101      	bne.n	24001596 <HAL_I2C_Mem_Read+0x4e>
24001592:	2302      	movs	r3, #2
24001594:	e0ea      	b.n	2400176c <HAL_I2C_Mem_Read+0x224>
24001596:	68fb      	ldr	r3, [r7, #12]
24001598:	2201      	movs	r2, #1
2400159a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400159e:	f7ff fb7d 	bl	24000c9c <HAL_GetTick>
240015a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
240015a4:	697b      	ldr	r3, [r7, #20]
240015a6:	9300      	str	r3, [sp, #0]
240015a8:	2319      	movs	r3, #25
240015aa:	2201      	movs	r2, #1
240015ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
240015b0:	68f8      	ldr	r0, [r7, #12]
240015b2:	f000 fab7 	bl	24001b24 <I2C_WaitOnFlagUntilTimeout>
240015b6:	4603      	mov	r3, r0
240015b8:	2b00      	cmp	r3, #0
240015ba:	d001      	beq.n	240015c0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
240015bc:	2301      	movs	r3, #1
240015be:	e0d5      	b.n	2400176c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
240015c0:	68fb      	ldr	r3, [r7, #12]
240015c2:	2222      	movs	r2, #34	; 0x22
240015c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
240015c8:	68fb      	ldr	r3, [r7, #12]
240015ca:	2240      	movs	r2, #64	; 0x40
240015cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
240015d0:	68fb      	ldr	r3, [r7, #12]
240015d2:	2200      	movs	r2, #0
240015d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
240015d6:	68fb      	ldr	r3, [r7, #12]
240015d8:	6a3a      	ldr	r2, [r7, #32]
240015da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
240015dc:	68fb      	ldr	r3, [r7, #12]
240015de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
240015e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
240015e2:	68fb      	ldr	r3, [r7, #12]
240015e4:	2200      	movs	r2, #0
240015e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
240015e8:	88f8      	ldrh	r0, [r7, #6]
240015ea:	893a      	ldrh	r2, [r7, #8]
240015ec:	8979      	ldrh	r1, [r7, #10]
240015ee:	697b      	ldr	r3, [r7, #20]
240015f0:	9301      	str	r3, [sp, #4]
240015f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
240015f4:	9300      	str	r3, [sp, #0]
240015f6:	4603      	mov	r3, r0
240015f8:	68f8      	ldr	r0, [r7, #12]
240015fa:	f000 fa1b 	bl	24001a34 <I2C_RequestMemoryRead>
240015fe:	4603      	mov	r3, r0
24001600:	2b00      	cmp	r3, #0
24001602:	d005      	beq.n	24001610 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
24001604:	68fb      	ldr	r3, [r7, #12]
24001606:	2200      	movs	r2, #0
24001608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400160c:	2301      	movs	r3, #1
2400160e:	e0ad      	b.n	2400176c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
24001610:	68fb      	ldr	r3, [r7, #12]
24001612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
24001614:	b29b      	uxth	r3, r3
24001616:	2bff      	cmp	r3, #255	; 0xff
24001618:	d90e      	bls.n	24001638 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400161a:	68fb      	ldr	r3, [r7, #12]
2400161c:	22ff      	movs	r2, #255	; 0xff
2400161e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
24001620:	68fb      	ldr	r3, [r7, #12]
24001622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
24001624:	b2da      	uxtb	r2, r3
24001626:	8979      	ldrh	r1, [r7, #10]
24001628:	4b52      	ldr	r3, [pc, #328]	; (24001774 <HAL_I2C_Mem_Read+0x22c>)
2400162a:	9300      	str	r3, [sp, #0]
2400162c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
24001630:	68f8      	ldr	r0, [r7, #12]
24001632:	f000 fc31 	bl	24001e98 <I2C_TransferConfig>
24001636:	e00f      	b.n	24001658 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
24001638:	68fb      	ldr	r3, [r7, #12]
2400163a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400163c:	b29a      	uxth	r2, r3
2400163e:	68fb      	ldr	r3, [r7, #12]
24001640:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
24001642:	68fb      	ldr	r3, [r7, #12]
24001644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
24001646:	b2da      	uxtb	r2, r3
24001648:	8979      	ldrh	r1, [r7, #10]
2400164a:	4b4a      	ldr	r3, [pc, #296]	; (24001774 <HAL_I2C_Mem_Read+0x22c>)
2400164c:	9300      	str	r3, [sp, #0]
2400164e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
24001652:	68f8      	ldr	r0, [r7, #12]
24001654:	f000 fc20 	bl	24001e98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
24001658:	697b      	ldr	r3, [r7, #20]
2400165a:	9300      	str	r3, [sp, #0]
2400165c:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400165e:	2200      	movs	r2, #0
24001660:	2104      	movs	r1, #4
24001662:	68f8      	ldr	r0, [r7, #12]
24001664:	f000 fa5e 	bl	24001b24 <I2C_WaitOnFlagUntilTimeout>
24001668:	4603      	mov	r3, r0
2400166a:	2b00      	cmp	r3, #0
2400166c:	d001      	beq.n	24001672 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
2400166e:	2301      	movs	r3, #1
24001670:	e07c      	b.n	2400176c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24001672:	68fb      	ldr	r3, [r7, #12]
24001674:	681b      	ldr	r3, [r3, #0]
24001676:	6a5a      	ldr	r2, [r3, #36]	; 0x24
24001678:	68fb      	ldr	r3, [r7, #12]
2400167a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400167c:	b2d2      	uxtb	r2, r2
2400167e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
24001680:	68fb      	ldr	r3, [r7, #12]
24001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24001684:	1c5a      	adds	r2, r3, #1
24001686:	68fb      	ldr	r3, [r7, #12]
24001688:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
2400168a:	68fb      	ldr	r3, [r7, #12]
2400168c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400168e:	3b01      	subs	r3, #1
24001690:	b29a      	uxth	r2, r3
24001692:	68fb      	ldr	r3, [r7, #12]
24001694:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
24001696:	68fb      	ldr	r3, [r7, #12]
24001698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400169a:	b29b      	uxth	r3, r3
2400169c:	3b01      	subs	r3, #1
2400169e:	b29a      	uxth	r2, r3
240016a0:	68fb      	ldr	r3, [r7, #12]
240016a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
240016a4:	68fb      	ldr	r3, [r7, #12]
240016a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
240016a8:	b29b      	uxth	r3, r3
240016aa:	2b00      	cmp	r3, #0
240016ac:	d034      	beq.n	24001718 <HAL_I2C_Mem_Read+0x1d0>
240016ae:	68fb      	ldr	r3, [r7, #12]
240016b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
240016b2:	2b00      	cmp	r3, #0
240016b4:	d130      	bne.n	24001718 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
240016b6:	697b      	ldr	r3, [r7, #20]
240016b8:	9300      	str	r3, [sp, #0]
240016ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
240016bc:	2200      	movs	r2, #0
240016be:	2180      	movs	r1, #128	; 0x80
240016c0:	68f8      	ldr	r0, [r7, #12]
240016c2:	f000 fa2f 	bl	24001b24 <I2C_WaitOnFlagUntilTimeout>
240016c6:	4603      	mov	r3, r0
240016c8:	2b00      	cmp	r3, #0
240016ca:	d001      	beq.n	240016d0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
240016cc:	2301      	movs	r3, #1
240016ce:	e04d      	b.n	2400176c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
240016d0:	68fb      	ldr	r3, [r7, #12]
240016d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
240016d4:	b29b      	uxth	r3, r3
240016d6:	2bff      	cmp	r3, #255	; 0xff
240016d8:	d90e      	bls.n	240016f8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
240016da:	68fb      	ldr	r3, [r7, #12]
240016dc:	22ff      	movs	r2, #255	; 0xff
240016de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
240016e0:	68fb      	ldr	r3, [r7, #12]
240016e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
240016e4:	b2da      	uxtb	r2, r3
240016e6:	8979      	ldrh	r1, [r7, #10]
240016e8:	2300      	movs	r3, #0
240016ea:	9300      	str	r3, [sp, #0]
240016ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
240016f0:	68f8      	ldr	r0, [r7, #12]
240016f2:	f000 fbd1 	bl	24001e98 <I2C_TransferConfig>
240016f6:	e00f      	b.n	24001718 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
240016f8:	68fb      	ldr	r3, [r7, #12]
240016fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
240016fc:	b29a      	uxth	r2, r3
240016fe:	68fb      	ldr	r3, [r7, #12]
24001700:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
24001702:	68fb      	ldr	r3, [r7, #12]
24001704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
24001706:	b2da      	uxtb	r2, r3
24001708:	8979      	ldrh	r1, [r7, #10]
2400170a:	2300      	movs	r3, #0
2400170c:	9300      	str	r3, [sp, #0]
2400170e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
24001712:	68f8      	ldr	r0, [r7, #12]
24001714:	f000 fbc0 	bl	24001e98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
24001718:	68fb      	ldr	r3, [r7, #12]
2400171a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400171c:	b29b      	uxth	r3, r3
2400171e:	2b00      	cmp	r3, #0
24001720:	d19a      	bne.n	24001658 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
24001722:	697a      	ldr	r2, [r7, #20]
24001724:	6ab9      	ldr	r1, [r7, #40]	; 0x28
24001726:	68f8      	ldr	r0, [r7, #12]
24001728:	f000 fa92 	bl	24001c50 <I2C_WaitOnSTOPFlagUntilTimeout>
2400172c:	4603      	mov	r3, r0
2400172e:	2b00      	cmp	r3, #0
24001730:	d001      	beq.n	24001736 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
24001732:	2301      	movs	r3, #1
24001734:	e01a      	b.n	2400176c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24001736:	68fb      	ldr	r3, [r7, #12]
24001738:	681b      	ldr	r3, [r3, #0]
2400173a:	2220      	movs	r2, #32
2400173c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2400173e:	68fb      	ldr	r3, [r7, #12]
24001740:	681b      	ldr	r3, [r3, #0]
24001742:	6859      	ldr	r1, [r3, #4]
24001744:	68fb      	ldr	r3, [r7, #12]
24001746:	681a      	ldr	r2, [r3, #0]
24001748:	4b0b      	ldr	r3, [pc, #44]	; (24001778 <HAL_I2C_Mem_Read+0x230>)
2400174a:	400b      	ands	r3, r1
2400174c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2400174e:	68fb      	ldr	r3, [r7, #12]
24001750:	2220      	movs	r2, #32
24001752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
24001756:	68fb      	ldr	r3, [r7, #12]
24001758:	2200      	movs	r2, #0
2400175a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400175e:	68fb      	ldr	r3, [r7, #12]
24001760:	2200      	movs	r2, #0
24001762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
24001766:	2300      	movs	r3, #0
24001768:	e000      	b.n	2400176c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
2400176a:	2302      	movs	r3, #2
  }
}
2400176c:	4618      	mov	r0, r3
2400176e:	3718      	adds	r7, #24
24001770:	46bd      	mov	sp, r7
24001772:	bd80      	pop	{r7, pc}
24001774:	80002400 	.word	0x80002400
24001778:	fe00e800 	.word	0xfe00e800

2400177c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
2400177c:	b580      	push	{r7, lr}
2400177e:	b08a      	sub	sp, #40	; 0x28
24001780:	af02      	add	r7, sp, #8
24001782:	60f8      	str	r0, [r7, #12]
24001784:	607a      	str	r2, [r7, #4]
24001786:	603b      	str	r3, [r7, #0]
24001788:	460b      	mov	r3, r1
2400178a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
2400178c:	2300      	movs	r3, #0
2400178e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
24001790:	68fb      	ldr	r3, [r7, #12]
24001792:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24001796:	b2db      	uxtb	r3, r3
24001798:	2b20      	cmp	r3, #32
2400179a:	f040 80ef 	bne.w	2400197c <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400179e:	68fb      	ldr	r3, [r7, #12]
240017a0:	681b      	ldr	r3, [r3, #0]
240017a2:	699b      	ldr	r3, [r3, #24]
240017a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
240017a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
240017ac:	d101      	bne.n	240017b2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
240017ae:	2302      	movs	r3, #2
240017b0:	e0e5      	b.n	2400197e <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
240017b2:	68fb      	ldr	r3, [r7, #12]
240017b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
240017b8:	2b01      	cmp	r3, #1
240017ba:	d101      	bne.n	240017c0 <HAL_I2C_IsDeviceReady+0x44>
240017bc:	2302      	movs	r3, #2
240017be:	e0de      	b.n	2400197e <HAL_I2C_IsDeviceReady+0x202>
240017c0:	68fb      	ldr	r3, [r7, #12]
240017c2:	2201      	movs	r2, #1
240017c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
240017c8:	68fb      	ldr	r3, [r7, #12]
240017ca:	2224      	movs	r2, #36	; 0x24
240017cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
240017d0:	68fb      	ldr	r3, [r7, #12]
240017d2:	2200      	movs	r2, #0
240017d4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
240017d6:	68fb      	ldr	r3, [r7, #12]
240017d8:	68db      	ldr	r3, [r3, #12]
240017da:	2b01      	cmp	r3, #1
240017dc:	d105      	bne.n	240017ea <HAL_I2C_IsDeviceReady+0x6e>
240017de:	897b      	ldrh	r3, [r7, #10]
240017e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
240017e4:	4b68      	ldr	r3, [pc, #416]	; (24001988 <HAL_I2C_IsDeviceReady+0x20c>)
240017e6:	4313      	orrs	r3, r2
240017e8:	e004      	b.n	240017f4 <HAL_I2C_IsDeviceReady+0x78>
240017ea:	897b      	ldrh	r3, [r7, #10]
240017ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
240017f0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
240017f4:	68fa      	ldr	r2, [r7, #12]
240017f6:	6812      	ldr	r2, [r2, #0]
240017f8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
240017fa:	f7ff fa4f 	bl	24000c9c <HAL_GetTick>
240017fe:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
24001800:	68fb      	ldr	r3, [r7, #12]
24001802:	681b      	ldr	r3, [r3, #0]
24001804:	699b      	ldr	r3, [r3, #24]
24001806:	f003 0320 	and.w	r3, r3, #32
2400180a:	2b20      	cmp	r3, #32
2400180c:	bf0c      	ite	eq
2400180e:	2301      	moveq	r3, #1
24001810:	2300      	movne	r3, #0
24001812:	b2db      	uxtb	r3, r3
24001814:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
24001816:	68fb      	ldr	r3, [r7, #12]
24001818:	681b      	ldr	r3, [r3, #0]
2400181a:	699b      	ldr	r3, [r3, #24]
2400181c:	f003 0310 	and.w	r3, r3, #16
24001820:	2b10      	cmp	r3, #16
24001822:	bf0c      	ite	eq
24001824:	2301      	moveq	r3, #1
24001826:	2300      	movne	r3, #0
24001828:	b2db      	uxtb	r3, r3
2400182a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
2400182c:	e034      	b.n	24001898 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
2400182e:	683b      	ldr	r3, [r7, #0]
24001830:	f1b3 3fff 	cmp.w	r3, #4294967295
24001834:	d01a      	beq.n	2400186c <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24001836:	f7ff fa31 	bl	24000c9c <HAL_GetTick>
2400183a:	4602      	mov	r2, r0
2400183c:	69bb      	ldr	r3, [r7, #24]
2400183e:	1ad3      	subs	r3, r2, r3
24001840:	683a      	ldr	r2, [r7, #0]
24001842:	429a      	cmp	r2, r3
24001844:	d302      	bcc.n	2400184c <HAL_I2C_IsDeviceReady+0xd0>
24001846:	683b      	ldr	r3, [r7, #0]
24001848:	2b00      	cmp	r3, #0
2400184a:	d10f      	bne.n	2400186c <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
2400184c:	68fb      	ldr	r3, [r7, #12]
2400184e:	2220      	movs	r2, #32
24001850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24001854:	68fb      	ldr	r3, [r7, #12]
24001856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24001858:	f043 0220 	orr.w	r2, r3, #32
2400185c:	68fb      	ldr	r3, [r7, #12]
2400185e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
24001860:	68fb      	ldr	r3, [r7, #12]
24001862:	2200      	movs	r2, #0
24001864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
24001868:	2301      	movs	r3, #1
2400186a:	e088      	b.n	2400197e <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
2400186c:	68fb      	ldr	r3, [r7, #12]
2400186e:	681b      	ldr	r3, [r3, #0]
24001870:	699b      	ldr	r3, [r3, #24]
24001872:	f003 0320 	and.w	r3, r3, #32
24001876:	2b20      	cmp	r3, #32
24001878:	bf0c      	ite	eq
2400187a:	2301      	moveq	r3, #1
2400187c:	2300      	movne	r3, #0
2400187e:	b2db      	uxtb	r3, r3
24001880:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
24001882:	68fb      	ldr	r3, [r7, #12]
24001884:	681b      	ldr	r3, [r3, #0]
24001886:	699b      	ldr	r3, [r3, #24]
24001888:	f003 0310 	and.w	r3, r3, #16
2400188c:	2b10      	cmp	r3, #16
2400188e:	bf0c      	ite	eq
24001890:	2301      	moveq	r3, #1
24001892:	2300      	movne	r3, #0
24001894:	b2db      	uxtb	r3, r3
24001896:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
24001898:	7ffb      	ldrb	r3, [r7, #31]
2400189a:	2b00      	cmp	r3, #0
2400189c:	d102      	bne.n	240018a4 <HAL_I2C_IsDeviceReady+0x128>
2400189e:	7fbb      	ldrb	r3, [r7, #30]
240018a0:	2b00      	cmp	r3, #0
240018a2:	d0c4      	beq.n	2400182e <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
240018a4:	68fb      	ldr	r3, [r7, #12]
240018a6:	681b      	ldr	r3, [r3, #0]
240018a8:	699b      	ldr	r3, [r3, #24]
240018aa:	f003 0310 	and.w	r3, r3, #16
240018ae:	2b10      	cmp	r3, #16
240018b0:	d01a      	beq.n	240018e8 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
240018b2:	69bb      	ldr	r3, [r7, #24]
240018b4:	9300      	str	r3, [sp, #0]
240018b6:	683b      	ldr	r3, [r7, #0]
240018b8:	2200      	movs	r2, #0
240018ba:	2120      	movs	r1, #32
240018bc:	68f8      	ldr	r0, [r7, #12]
240018be:	f000 f931 	bl	24001b24 <I2C_WaitOnFlagUntilTimeout>
240018c2:	4603      	mov	r3, r0
240018c4:	2b00      	cmp	r3, #0
240018c6:	d001      	beq.n	240018cc <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
240018c8:	2301      	movs	r3, #1
240018ca:	e058      	b.n	2400197e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
240018cc:	68fb      	ldr	r3, [r7, #12]
240018ce:	681b      	ldr	r3, [r3, #0]
240018d0:	2220      	movs	r2, #32
240018d2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
240018d4:	68fb      	ldr	r3, [r7, #12]
240018d6:	2220      	movs	r2, #32
240018d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
240018dc:	68fb      	ldr	r3, [r7, #12]
240018de:	2200      	movs	r2, #0
240018e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
240018e4:	2300      	movs	r3, #0
240018e6:	e04a      	b.n	2400197e <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
240018e8:	69bb      	ldr	r3, [r7, #24]
240018ea:	9300      	str	r3, [sp, #0]
240018ec:	683b      	ldr	r3, [r7, #0]
240018ee:	2200      	movs	r2, #0
240018f0:	2120      	movs	r1, #32
240018f2:	68f8      	ldr	r0, [r7, #12]
240018f4:	f000 f916 	bl	24001b24 <I2C_WaitOnFlagUntilTimeout>
240018f8:	4603      	mov	r3, r0
240018fa:	2b00      	cmp	r3, #0
240018fc:	d001      	beq.n	24001902 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
240018fe:	2301      	movs	r3, #1
24001900:	e03d      	b.n	2400197e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24001902:	68fb      	ldr	r3, [r7, #12]
24001904:	681b      	ldr	r3, [r3, #0]
24001906:	2210      	movs	r2, #16
24001908:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400190a:	68fb      	ldr	r3, [r7, #12]
2400190c:	681b      	ldr	r3, [r3, #0]
2400190e:	2220      	movs	r2, #32
24001910:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
24001912:	697b      	ldr	r3, [r7, #20]
24001914:	687a      	ldr	r2, [r7, #4]
24001916:	429a      	cmp	r2, r3
24001918:	d118      	bne.n	2400194c <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
2400191a:	68fb      	ldr	r3, [r7, #12]
2400191c:	681b      	ldr	r3, [r3, #0]
2400191e:	685a      	ldr	r2, [r3, #4]
24001920:	68fb      	ldr	r3, [r7, #12]
24001922:	681b      	ldr	r3, [r3, #0]
24001924:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
24001928:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
2400192a:	69bb      	ldr	r3, [r7, #24]
2400192c:	9300      	str	r3, [sp, #0]
2400192e:	683b      	ldr	r3, [r7, #0]
24001930:	2200      	movs	r2, #0
24001932:	2120      	movs	r1, #32
24001934:	68f8      	ldr	r0, [r7, #12]
24001936:	f000 f8f5 	bl	24001b24 <I2C_WaitOnFlagUntilTimeout>
2400193a:	4603      	mov	r3, r0
2400193c:	2b00      	cmp	r3, #0
2400193e:	d001      	beq.n	24001944 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
24001940:	2301      	movs	r3, #1
24001942:	e01c      	b.n	2400197e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24001944:	68fb      	ldr	r3, [r7, #12]
24001946:	681b      	ldr	r3, [r3, #0]
24001948:	2220      	movs	r2, #32
2400194a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
2400194c:	697b      	ldr	r3, [r7, #20]
2400194e:	3301      	adds	r3, #1
24001950:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
24001952:	697b      	ldr	r3, [r7, #20]
24001954:	687a      	ldr	r2, [r7, #4]
24001956:	429a      	cmp	r2, r3
24001958:	f63f af3d 	bhi.w	240017d6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
2400195c:	68fb      	ldr	r3, [r7, #12]
2400195e:	2220      	movs	r2, #32
24001960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24001964:	68fb      	ldr	r3, [r7, #12]
24001966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24001968:	f043 0220 	orr.w	r2, r3, #32
2400196c:	68fb      	ldr	r3, [r7, #12]
2400196e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
24001970:	68fb      	ldr	r3, [r7, #12]
24001972:	2200      	movs	r2, #0
24001974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
24001978:	2301      	movs	r3, #1
2400197a:	e000      	b.n	2400197e <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
2400197c:	2302      	movs	r3, #2
  }
}
2400197e:	4618      	mov	r0, r3
24001980:	3720      	adds	r7, #32
24001982:	46bd      	mov	sp, r7
24001984:	bd80      	pop	{r7, pc}
24001986:	bf00      	nop
24001988:	02002000 	.word	0x02002000

2400198c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
2400198c:	b580      	push	{r7, lr}
2400198e:	b086      	sub	sp, #24
24001990:	af02      	add	r7, sp, #8
24001992:	60f8      	str	r0, [r7, #12]
24001994:	4608      	mov	r0, r1
24001996:	4611      	mov	r1, r2
24001998:	461a      	mov	r2, r3
2400199a:	4603      	mov	r3, r0
2400199c:	817b      	strh	r3, [r7, #10]
2400199e:	460b      	mov	r3, r1
240019a0:	813b      	strh	r3, [r7, #8]
240019a2:	4613      	mov	r3, r2
240019a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
240019a6:	88fb      	ldrh	r3, [r7, #6]
240019a8:	b2da      	uxtb	r2, r3
240019aa:	8979      	ldrh	r1, [r7, #10]
240019ac:	4b20      	ldr	r3, [pc, #128]	; (24001a30 <I2C_RequestMemoryWrite+0xa4>)
240019ae:	9300      	str	r3, [sp, #0]
240019b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
240019b4:	68f8      	ldr	r0, [r7, #12]
240019b6:	f000 fa6f 	bl	24001e98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
240019ba:	69fa      	ldr	r2, [r7, #28]
240019bc:	69b9      	ldr	r1, [r7, #24]
240019be:	68f8      	ldr	r0, [r7, #12]
240019c0:	f000 f8ff 	bl	24001bc2 <I2C_WaitOnTXISFlagUntilTimeout>
240019c4:	4603      	mov	r3, r0
240019c6:	2b00      	cmp	r3, #0
240019c8:	d001      	beq.n	240019ce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
240019ca:	2301      	movs	r3, #1
240019cc:	e02c      	b.n	24001a28 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
240019ce:	88fb      	ldrh	r3, [r7, #6]
240019d0:	2b01      	cmp	r3, #1
240019d2:	d105      	bne.n	240019e0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
240019d4:	893b      	ldrh	r3, [r7, #8]
240019d6:	b2da      	uxtb	r2, r3
240019d8:	68fb      	ldr	r3, [r7, #12]
240019da:	681b      	ldr	r3, [r3, #0]
240019dc:	629a      	str	r2, [r3, #40]	; 0x28
240019de:	e015      	b.n	24001a0c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
240019e0:	893b      	ldrh	r3, [r7, #8]
240019e2:	0a1b      	lsrs	r3, r3, #8
240019e4:	b29b      	uxth	r3, r3
240019e6:	b2da      	uxtb	r2, r3
240019e8:	68fb      	ldr	r3, [r7, #12]
240019ea:	681b      	ldr	r3, [r3, #0]
240019ec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
240019ee:	69fa      	ldr	r2, [r7, #28]
240019f0:	69b9      	ldr	r1, [r7, #24]
240019f2:	68f8      	ldr	r0, [r7, #12]
240019f4:	f000 f8e5 	bl	24001bc2 <I2C_WaitOnTXISFlagUntilTimeout>
240019f8:	4603      	mov	r3, r0
240019fa:	2b00      	cmp	r3, #0
240019fc:	d001      	beq.n	24001a02 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
240019fe:	2301      	movs	r3, #1
24001a00:	e012      	b.n	24001a28 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
24001a02:	893b      	ldrh	r3, [r7, #8]
24001a04:	b2da      	uxtb	r2, r3
24001a06:	68fb      	ldr	r3, [r7, #12]
24001a08:	681b      	ldr	r3, [r3, #0]
24001a0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
24001a0c:	69fb      	ldr	r3, [r7, #28]
24001a0e:	9300      	str	r3, [sp, #0]
24001a10:	69bb      	ldr	r3, [r7, #24]
24001a12:	2200      	movs	r2, #0
24001a14:	2180      	movs	r1, #128	; 0x80
24001a16:	68f8      	ldr	r0, [r7, #12]
24001a18:	f000 f884 	bl	24001b24 <I2C_WaitOnFlagUntilTimeout>
24001a1c:	4603      	mov	r3, r0
24001a1e:	2b00      	cmp	r3, #0
24001a20:	d001      	beq.n	24001a26 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
24001a22:	2301      	movs	r3, #1
24001a24:	e000      	b.n	24001a28 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
24001a26:	2300      	movs	r3, #0
}
24001a28:	4618      	mov	r0, r3
24001a2a:	3710      	adds	r7, #16
24001a2c:	46bd      	mov	sp, r7
24001a2e:	bd80      	pop	{r7, pc}
24001a30:	80002000 	.word	0x80002000

24001a34 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
24001a34:	b580      	push	{r7, lr}
24001a36:	b086      	sub	sp, #24
24001a38:	af02      	add	r7, sp, #8
24001a3a:	60f8      	str	r0, [r7, #12]
24001a3c:	4608      	mov	r0, r1
24001a3e:	4611      	mov	r1, r2
24001a40:	461a      	mov	r2, r3
24001a42:	4603      	mov	r3, r0
24001a44:	817b      	strh	r3, [r7, #10]
24001a46:	460b      	mov	r3, r1
24001a48:	813b      	strh	r3, [r7, #8]
24001a4a:	4613      	mov	r3, r2
24001a4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
24001a4e:	88fb      	ldrh	r3, [r7, #6]
24001a50:	b2da      	uxtb	r2, r3
24001a52:	8979      	ldrh	r1, [r7, #10]
24001a54:	4b20      	ldr	r3, [pc, #128]	; (24001ad8 <I2C_RequestMemoryRead+0xa4>)
24001a56:	9300      	str	r3, [sp, #0]
24001a58:	2300      	movs	r3, #0
24001a5a:	68f8      	ldr	r0, [r7, #12]
24001a5c:	f000 fa1c 	bl	24001e98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
24001a60:	69fa      	ldr	r2, [r7, #28]
24001a62:	69b9      	ldr	r1, [r7, #24]
24001a64:	68f8      	ldr	r0, [r7, #12]
24001a66:	f000 f8ac 	bl	24001bc2 <I2C_WaitOnTXISFlagUntilTimeout>
24001a6a:	4603      	mov	r3, r0
24001a6c:	2b00      	cmp	r3, #0
24001a6e:	d001      	beq.n	24001a74 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
24001a70:	2301      	movs	r3, #1
24001a72:	e02c      	b.n	24001ace <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
24001a74:	88fb      	ldrh	r3, [r7, #6]
24001a76:	2b01      	cmp	r3, #1
24001a78:	d105      	bne.n	24001a86 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
24001a7a:	893b      	ldrh	r3, [r7, #8]
24001a7c:	b2da      	uxtb	r2, r3
24001a7e:	68fb      	ldr	r3, [r7, #12]
24001a80:	681b      	ldr	r3, [r3, #0]
24001a82:	629a      	str	r2, [r3, #40]	; 0x28
24001a84:	e015      	b.n	24001ab2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
24001a86:	893b      	ldrh	r3, [r7, #8]
24001a88:	0a1b      	lsrs	r3, r3, #8
24001a8a:	b29b      	uxth	r3, r3
24001a8c:	b2da      	uxtb	r2, r3
24001a8e:	68fb      	ldr	r3, [r7, #12]
24001a90:	681b      	ldr	r3, [r3, #0]
24001a92:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
24001a94:	69fa      	ldr	r2, [r7, #28]
24001a96:	69b9      	ldr	r1, [r7, #24]
24001a98:	68f8      	ldr	r0, [r7, #12]
24001a9a:	f000 f892 	bl	24001bc2 <I2C_WaitOnTXISFlagUntilTimeout>
24001a9e:	4603      	mov	r3, r0
24001aa0:	2b00      	cmp	r3, #0
24001aa2:	d001      	beq.n	24001aa8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
24001aa4:	2301      	movs	r3, #1
24001aa6:	e012      	b.n	24001ace <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
24001aa8:	893b      	ldrh	r3, [r7, #8]
24001aaa:	b2da      	uxtb	r2, r3
24001aac:	68fb      	ldr	r3, [r7, #12]
24001aae:	681b      	ldr	r3, [r3, #0]
24001ab0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
24001ab2:	69fb      	ldr	r3, [r7, #28]
24001ab4:	9300      	str	r3, [sp, #0]
24001ab6:	69bb      	ldr	r3, [r7, #24]
24001ab8:	2200      	movs	r2, #0
24001aba:	2140      	movs	r1, #64	; 0x40
24001abc:	68f8      	ldr	r0, [r7, #12]
24001abe:	f000 f831 	bl	24001b24 <I2C_WaitOnFlagUntilTimeout>
24001ac2:	4603      	mov	r3, r0
24001ac4:	2b00      	cmp	r3, #0
24001ac6:	d001      	beq.n	24001acc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
24001ac8:	2301      	movs	r3, #1
24001aca:	e000      	b.n	24001ace <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
24001acc:	2300      	movs	r3, #0
}
24001ace:	4618      	mov	r0, r3
24001ad0:	3710      	adds	r7, #16
24001ad2:	46bd      	mov	sp, r7
24001ad4:	bd80      	pop	{r7, pc}
24001ad6:	bf00      	nop
24001ad8:	80002000 	.word	0x80002000

24001adc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
24001adc:	b480      	push	{r7}
24001ade:	b083      	sub	sp, #12
24001ae0:	af00      	add	r7, sp, #0
24001ae2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24001ae4:	687b      	ldr	r3, [r7, #4]
24001ae6:	681b      	ldr	r3, [r3, #0]
24001ae8:	699b      	ldr	r3, [r3, #24]
24001aea:	f003 0302 	and.w	r3, r3, #2
24001aee:	2b02      	cmp	r3, #2
24001af0:	d103      	bne.n	24001afa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
24001af2:	687b      	ldr	r3, [r7, #4]
24001af4:	681b      	ldr	r3, [r3, #0]
24001af6:	2200      	movs	r2, #0
24001af8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24001afa:	687b      	ldr	r3, [r7, #4]
24001afc:	681b      	ldr	r3, [r3, #0]
24001afe:	699b      	ldr	r3, [r3, #24]
24001b00:	f003 0301 	and.w	r3, r3, #1
24001b04:	2b01      	cmp	r3, #1
24001b06:	d007      	beq.n	24001b18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
24001b08:	687b      	ldr	r3, [r7, #4]
24001b0a:	681b      	ldr	r3, [r3, #0]
24001b0c:	699a      	ldr	r2, [r3, #24]
24001b0e:	687b      	ldr	r3, [r7, #4]
24001b10:	681b      	ldr	r3, [r3, #0]
24001b12:	f042 0201 	orr.w	r2, r2, #1
24001b16:	619a      	str	r2, [r3, #24]
  }
}
24001b18:	bf00      	nop
24001b1a:	370c      	adds	r7, #12
24001b1c:	46bd      	mov	sp, r7
24001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
24001b22:	4770      	bx	lr

24001b24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
24001b24:	b580      	push	{r7, lr}
24001b26:	b084      	sub	sp, #16
24001b28:	af00      	add	r7, sp, #0
24001b2a:	60f8      	str	r0, [r7, #12]
24001b2c:	60b9      	str	r1, [r7, #8]
24001b2e:	603b      	str	r3, [r7, #0]
24001b30:	4613      	mov	r3, r2
24001b32:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
24001b34:	e031      	b.n	24001b9a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
24001b36:	683b      	ldr	r3, [r7, #0]
24001b38:	f1b3 3fff 	cmp.w	r3, #4294967295
24001b3c:	d02d      	beq.n	24001b9a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24001b3e:	f7ff f8ad 	bl	24000c9c <HAL_GetTick>
24001b42:	4602      	mov	r2, r0
24001b44:	69bb      	ldr	r3, [r7, #24]
24001b46:	1ad3      	subs	r3, r2, r3
24001b48:	683a      	ldr	r2, [r7, #0]
24001b4a:	429a      	cmp	r2, r3
24001b4c:	d302      	bcc.n	24001b54 <I2C_WaitOnFlagUntilTimeout+0x30>
24001b4e:	683b      	ldr	r3, [r7, #0]
24001b50:	2b00      	cmp	r3, #0
24001b52:	d122      	bne.n	24001b9a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
24001b54:	68fb      	ldr	r3, [r7, #12]
24001b56:	681b      	ldr	r3, [r3, #0]
24001b58:	699a      	ldr	r2, [r3, #24]
24001b5a:	68bb      	ldr	r3, [r7, #8]
24001b5c:	4013      	ands	r3, r2
24001b5e:	68ba      	ldr	r2, [r7, #8]
24001b60:	429a      	cmp	r2, r3
24001b62:	bf0c      	ite	eq
24001b64:	2301      	moveq	r3, #1
24001b66:	2300      	movne	r3, #0
24001b68:	b2db      	uxtb	r3, r3
24001b6a:	461a      	mov	r2, r3
24001b6c:	79fb      	ldrb	r3, [r7, #7]
24001b6e:	429a      	cmp	r2, r3
24001b70:	d113      	bne.n	24001b9a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24001b72:	68fb      	ldr	r3, [r7, #12]
24001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24001b76:	f043 0220 	orr.w	r2, r3, #32
24001b7a:	68fb      	ldr	r3, [r7, #12]
24001b7c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24001b7e:	68fb      	ldr	r3, [r7, #12]
24001b80:	2220      	movs	r2, #32
24001b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
24001b86:	68fb      	ldr	r3, [r7, #12]
24001b88:	2200      	movs	r2, #0
24001b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
24001b8e:	68fb      	ldr	r3, [r7, #12]
24001b90:	2200      	movs	r2, #0
24001b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
24001b96:	2301      	movs	r3, #1
24001b98:	e00f      	b.n	24001bba <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
24001b9a:	68fb      	ldr	r3, [r7, #12]
24001b9c:	681b      	ldr	r3, [r3, #0]
24001b9e:	699a      	ldr	r2, [r3, #24]
24001ba0:	68bb      	ldr	r3, [r7, #8]
24001ba2:	4013      	ands	r3, r2
24001ba4:	68ba      	ldr	r2, [r7, #8]
24001ba6:	429a      	cmp	r2, r3
24001ba8:	bf0c      	ite	eq
24001baa:	2301      	moveq	r3, #1
24001bac:	2300      	movne	r3, #0
24001bae:	b2db      	uxtb	r3, r3
24001bb0:	461a      	mov	r2, r3
24001bb2:	79fb      	ldrb	r3, [r7, #7]
24001bb4:	429a      	cmp	r2, r3
24001bb6:	d0be      	beq.n	24001b36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
24001bb8:	2300      	movs	r3, #0
}
24001bba:	4618      	mov	r0, r3
24001bbc:	3710      	adds	r7, #16
24001bbe:	46bd      	mov	sp, r7
24001bc0:	bd80      	pop	{r7, pc}

24001bc2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
24001bc2:	b580      	push	{r7, lr}
24001bc4:	b084      	sub	sp, #16
24001bc6:	af00      	add	r7, sp, #0
24001bc8:	60f8      	str	r0, [r7, #12]
24001bca:	60b9      	str	r1, [r7, #8]
24001bcc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
24001bce:	e033      	b.n	24001c38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
24001bd0:	687a      	ldr	r2, [r7, #4]
24001bd2:	68b9      	ldr	r1, [r7, #8]
24001bd4:	68f8      	ldr	r0, [r7, #12]
24001bd6:	f000 f87f 	bl	24001cd8 <I2C_IsErrorOccurred>
24001bda:	4603      	mov	r3, r0
24001bdc:	2b00      	cmp	r3, #0
24001bde:	d001      	beq.n	24001be4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
24001be0:	2301      	movs	r3, #1
24001be2:	e031      	b.n	24001c48 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
24001be4:	68bb      	ldr	r3, [r7, #8]
24001be6:	f1b3 3fff 	cmp.w	r3, #4294967295
24001bea:	d025      	beq.n	24001c38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24001bec:	f7ff f856 	bl	24000c9c <HAL_GetTick>
24001bf0:	4602      	mov	r2, r0
24001bf2:	687b      	ldr	r3, [r7, #4]
24001bf4:	1ad3      	subs	r3, r2, r3
24001bf6:	68ba      	ldr	r2, [r7, #8]
24001bf8:	429a      	cmp	r2, r3
24001bfa:	d302      	bcc.n	24001c02 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
24001bfc:	68bb      	ldr	r3, [r7, #8]
24001bfe:	2b00      	cmp	r3, #0
24001c00:	d11a      	bne.n	24001c38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
24001c02:	68fb      	ldr	r3, [r7, #12]
24001c04:	681b      	ldr	r3, [r3, #0]
24001c06:	699b      	ldr	r3, [r3, #24]
24001c08:	f003 0302 	and.w	r3, r3, #2
24001c0c:	2b02      	cmp	r3, #2
24001c0e:	d013      	beq.n	24001c38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24001c10:	68fb      	ldr	r3, [r7, #12]
24001c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24001c14:	f043 0220 	orr.w	r2, r3, #32
24001c18:	68fb      	ldr	r3, [r7, #12]
24001c1a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24001c1c:	68fb      	ldr	r3, [r7, #12]
24001c1e:	2220      	movs	r2, #32
24001c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
24001c24:	68fb      	ldr	r3, [r7, #12]
24001c26:	2200      	movs	r2, #0
24001c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
24001c2c:	68fb      	ldr	r3, [r7, #12]
24001c2e:	2200      	movs	r2, #0
24001c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
24001c34:	2301      	movs	r3, #1
24001c36:	e007      	b.n	24001c48 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
24001c38:	68fb      	ldr	r3, [r7, #12]
24001c3a:	681b      	ldr	r3, [r3, #0]
24001c3c:	699b      	ldr	r3, [r3, #24]
24001c3e:	f003 0302 	and.w	r3, r3, #2
24001c42:	2b02      	cmp	r3, #2
24001c44:	d1c4      	bne.n	24001bd0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
24001c46:	2300      	movs	r3, #0
}
24001c48:	4618      	mov	r0, r3
24001c4a:	3710      	adds	r7, #16
24001c4c:	46bd      	mov	sp, r7
24001c4e:	bd80      	pop	{r7, pc}

24001c50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
24001c50:	b580      	push	{r7, lr}
24001c52:	b084      	sub	sp, #16
24001c54:	af00      	add	r7, sp, #0
24001c56:	60f8      	str	r0, [r7, #12]
24001c58:	60b9      	str	r1, [r7, #8]
24001c5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24001c5c:	e02f      	b.n	24001cbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
24001c5e:	687a      	ldr	r2, [r7, #4]
24001c60:	68b9      	ldr	r1, [r7, #8]
24001c62:	68f8      	ldr	r0, [r7, #12]
24001c64:	f000 f838 	bl	24001cd8 <I2C_IsErrorOccurred>
24001c68:	4603      	mov	r3, r0
24001c6a:	2b00      	cmp	r3, #0
24001c6c:	d001      	beq.n	24001c72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
24001c6e:	2301      	movs	r3, #1
24001c70:	e02d      	b.n	24001cce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24001c72:	f7ff f813 	bl	24000c9c <HAL_GetTick>
24001c76:	4602      	mov	r2, r0
24001c78:	687b      	ldr	r3, [r7, #4]
24001c7a:	1ad3      	subs	r3, r2, r3
24001c7c:	68ba      	ldr	r2, [r7, #8]
24001c7e:	429a      	cmp	r2, r3
24001c80:	d302      	bcc.n	24001c88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
24001c82:	68bb      	ldr	r3, [r7, #8]
24001c84:	2b00      	cmp	r3, #0
24001c86:	d11a      	bne.n	24001cbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
24001c88:	68fb      	ldr	r3, [r7, #12]
24001c8a:	681b      	ldr	r3, [r3, #0]
24001c8c:	699b      	ldr	r3, [r3, #24]
24001c8e:	f003 0320 	and.w	r3, r3, #32
24001c92:	2b20      	cmp	r3, #32
24001c94:	d013      	beq.n	24001cbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24001c96:	68fb      	ldr	r3, [r7, #12]
24001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24001c9a:	f043 0220 	orr.w	r2, r3, #32
24001c9e:	68fb      	ldr	r3, [r7, #12]
24001ca0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
24001ca2:	68fb      	ldr	r3, [r7, #12]
24001ca4:	2220      	movs	r2, #32
24001ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
24001caa:	68fb      	ldr	r3, [r7, #12]
24001cac:	2200      	movs	r2, #0
24001cae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
24001cb2:	68fb      	ldr	r3, [r7, #12]
24001cb4:	2200      	movs	r2, #0
24001cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
24001cba:	2301      	movs	r3, #1
24001cbc:	e007      	b.n	24001cce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24001cbe:	68fb      	ldr	r3, [r7, #12]
24001cc0:	681b      	ldr	r3, [r3, #0]
24001cc2:	699b      	ldr	r3, [r3, #24]
24001cc4:	f003 0320 	and.w	r3, r3, #32
24001cc8:	2b20      	cmp	r3, #32
24001cca:	d1c8      	bne.n	24001c5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
24001ccc:	2300      	movs	r3, #0
}
24001cce:	4618      	mov	r0, r3
24001cd0:	3710      	adds	r7, #16
24001cd2:	46bd      	mov	sp, r7
24001cd4:	bd80      	pop	{r7, pc}
	...

24001cd8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
24001cd8:	b580      	push	{r7, lr}
24001cda:	b08a      	sub	sp, #40	; 0x28
24001cdc:	af00      	add	r7, sp, #0
24001cde:	60f8      	str	r0, [r7, #12]
24001ce0:	60b9      	str	r1, [r7, #8]
24001ce2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
24001ce4:	2300      	movs	r3, #0
24001ce6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
24001cea:	68fb      	ldr	r3, [r7, #12]
24001cec:	681b      	ldr	r3, [r3, #0]
24001cee:	699b      	ldr	r3, [r3, #24]
24001cf0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
24001cf2:	2300      	movs	r3, #0
24001cf4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
24001cf6:	687b      	ldr	r3, [r7, #4]
24001cf8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
24001cfa:	69bb      	ldr	r3, [r7, #24]
24001cfc:	f003 0310 	and.w	r3, r3, #16
24001d00:	2b00      	cmp	r3, #0
24001d02:	d068      	beq.n	24001dd6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24001d04:	68fb      	ldr	r3, [r7, #12]
24001d06:	681b      	ldr	r3, [r3, #0]
24001d08:	2210      	movs	r2, #16
24001d0a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24001d0c:	e049      	b.n	24001da2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
24001d0e:	68bb      	ldr	r3, [r7, #8]
24001d10:	f1b3 3fff 	cmp.w	r3, #4294967295
24001d14:	d045      	beq.n	24001da2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24001d16:	f7fe ffc1 	bl	24000c9c <HAL_GetTick>
24001d1a:	4602      	mov	r2, r0
24001d1c:	69fb      	ldr	r3, [r7, #28]
24001d1e:	1ad3      	subs	r3, r2, r3
24001d20:	68ba      	ldr	r2, [r7, #8]
24001d22:	429a      	cmp	r2, r3
24001d24:	d302      	bcc.n	24001d2c <I2C_IsErrorOccurred+0x54>
24001d26:	68bb      	ldr	r3, [r7, #8]
24001d28:	2b00      	cmp	r3, #0
24001d2a:	d13a      	bne.n	24001da2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
24001d2c:	68fb      	ldr	r3, [r7, #12]
24001d2e:	681b      	ldr	r3, [r3, #0]
24001d30:	685b      	ldr	r3, [r3, #4]
24001d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
24001d36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
24001d38:	68fb      	ldr	r3, [r7, #12]
24001d3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
24001d3e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
24001d40:	68fb      	ldr	r3, [r7, #12]
24001d42:	681b      	ldr	r3, [r3, #0]
24001d44:	699b      	ldr	r3, [r3, #24]
24001d46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
24001d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
24001d4e:	d121      	bne.n	24001d94 <I2C_IsErrorOccurred+0xbc>
24001d50:	697b      	ldr	r3, [r7, #20]
24001d52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24001d56:	d01d      	beq.n	24001d94 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
24001d58:	7cfb      	ldrb	r3, [r7, #19]
24001d5a:	2b20      	cmp	r3, #32
24001d5c:	d01a      	beq.n	24001d94 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
24001d5e:	68fb      	ldr	r3, [r7, #12]
24001d60:	681b      	ldr	r3, [r3, #0]
24001d62:	685a      	ldr	r2, [r3, #4]
24001d64:	68fb      	ldr	r3, [r7, #12]
24001d66:	681b      	ldr	r3, [r3, #0]
24001d68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
24001d6c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
24001d6e:	f7fe ff95 	bl	24000c9c <HAL_GetTick>
24001d72:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24001d74:	e00e      	b.n	24001d94 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
24001d76:	f7fe ff91 	bl	24000c9c <HAL_GetTick>
24001d7a:	4602      	mov	r2, r0
24001d7c:	69fb      	ldr	r3, [r7, #28]
24001d7e:	1ad3      	subs	r3, r2, r3
24001d80:	2b19      	cmp	r3, #25
24001d82:	d907      	bls.n	24001d94 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
24001d84:	6a3b      	ldr	r3, [r7, #32]
24001d86:	f043 0320 	orr.w	r3, r3, #32
24001d8a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
24001d8c:	2301      	movs	r3, #1
24001d8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
24001d92:	e006      	b.n	24001da2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24001d94:	68fb      	ldr	r3, [r7, #12]
24001d96:	681b      	ldr	r3, [r3, #0]
24001d98:	699b      	ldr	r3, [r3, #24]
24001d9a:	f003 0320 	and.w	r3, r3, #32
24001d9e:	2b20      	cmp	r3, #32
24001da0:	d1e9      	bne.n	24001d76 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24001da2:	68fb      	ldr	r3, [r7, #12]
24001da4:	681b      	ldr	r3, [r3, #0]
24001da6:	699b      	ldr	r3, [r3, #24]
24001da8:	f003 0320 	and.w	r3, r3, #32
24001dac:	2b20      	cmp	r3, #32
24001dae:	d003      	beq.n	24001db8 <I2C_IsErrorOccurred+0xe0>
24001db0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
24001db4:	2b00      	cmp	r3, #0
24001db6:	d0aa      	beq.n	24001d0e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
24001db8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
24001dbc:	2b00      	cmp	r3, #0
24001dbe:	d103      	bne.n	24001dc8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24001dc0:	68fb      	ldr	r3, [r7, #12]
24001dc2:	681b      	ldr	r3, [r3, #0]
24001dc4:	2220      	movs	r2, #32
24001dc6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
24001dc8:	6a3b      	ldr	r3, [r7, #32]
24001dca:	f043 0304 	orr.w	r3, r3, #4
24001dce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
24001dd0:	2301      	movs	r3, #1
24001dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
24001dd6:	68fb      	ldr	r3, [r7, #12]
24001dd8:	681b      	ldr	r3, [r3, #0]
24001dda:	699b      	ldr	r3, [r3, #24]
24001ddc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
24001dde:	69bb      	ldr	r3, [r7, #24]
24001de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
24001de4:	2b00      	cmp	r3, #0
24001de6:	d00b      	beq.n	24001e00 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
24001de8:	6a3b      	ldr	r3, [r7, #32]
24001dea:	f043 0301 	orr.w	r3, r3, #1
24001dee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24001df0:	68fb      	ldr	r3, [r7, #12]
24001df2:	681b      	ldr	r3, [r3, #0]
24001df4:	f44f 7280 	mov.w	r2, #256	; 0x100
24001df8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
24001dfa:	2301      	movs	r3, #1
24001dfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24001e00:	69bb      	ldr	r3, [r7, #24]
24001e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
24001e06:	2b00      	cmp	r3, #0
24001e08:	d00b      	beq.n	24001e22 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
24001e0a:	6a3b      	ldr	r3, [r7, #32]
24001e0c:	f043 0308 	orr.w	r3, r3, #8
24001e10:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24001e12:	68fb      	ldr	r3, [r7, #12]
24001e14:	681b      	ldr	r3, [r3, #0]
24001e16:	f44f 6280 	mov.w	r2, #1024	; 0x400
24001e1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
24001e1c:	2301      	movs	r3, #1
24001e1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
24001e22:	69bb      	ldr	r3, [r7, #24]
24001e24:	f403 7300 	and.w	r3, r3, #512	; 0x200
24001e28:	2b00      	cmp	r3, #0
24001e2a:	d00b      	beq.n	24001e44 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
24001e2c:	6a3b      	ldr	r3, [r7, #32]
24001e2e:	f043 0302 	orr.w	r3, r3, #2
24001e32:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24001e34:	68fb      	ldr	r3, [r7, #12]
24001e36:	681b      	ldr	r3, [r3, #0]
24001e38:	f44f 7200 	mov.w	r2, #512	; 0x200
24001e3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
24001e3e:	2301      	movs	r3, #1
24001e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
24001e44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
24001e48:	2b00      	cmp	r3, #0
24001e4a:	d01c      	beq.n	24001e86 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
24001e4c:	68f8      	ldr	r0, [r7, #12]
24001e4e:	f7ff fe45 	bl	24001adc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
24001e52:	68fb      	ldr	r3, [r7, #12]
24001e54:	681b      	ldr	r3, [r3, #0]
24001e56:	6859      	ldr	r1, [r3, #4]
24001e58:	68fb      	ldr	r3, [r7, #12]
24001e5a:	681a      	ldr	r2, [r3, #0]
24001e5c:	4b0d      	ldr	r3, [pc, #52]	; (24001e94 <I2C_IsErrorOccurred+0x1bc>)
24001e5e:	400b      	ands	r3, r1
24001e60:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
24001e62:	68fb      	ldr	r3, [r7, #12]
24001e64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
24001e66:	6a3b      	ldr	r3, [r7, #32]
24001e68:	431a      	orrs	r2, r3
24001e6a:	68fb      	ldr	r3, [r7, #12]
24001e6c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
24001e6e:	68fb      	ldr	r3, [r7, #12]
24001e70:	2220      	movs	r2, #32
24001e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
24001e76:	68fb      	ldr	r3, [r7, #12]
24001e78:	2200      	movs	r2, #0
24001e7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
24001e7e:	68fb      	ldr	r3, [r7, #12]
24001e80:	2200      	movs	r2, #0
24001e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
24001e86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
24001e8a:	4618      	mov	r0, r3
24001e8c:	3728      	adds	r7, #40	; 0x28
24001e8e:	46bd      	mov	sp, r7
24001e90:	bd80      	pop	{r7, pc}
24001e92:	bf00      	nop
24001e94:	fe00e800 	.word	0xfe00e800

24001e98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
24001e98:	b480      	push	{r7}
24001e9a:	b087      	sub	sp, #28
24001e9c:	af00      	add	r7, sp, #0
24001e9e:	60f8      	str	r0, [r7, #12]
24001ea0:	607b      	str	r3, [r7, #4]
24001ea2:	460b      	mov	r3, r1
24001ea4:	817b      	strh	r3, [r7, #10]
24001ea6:	4613      	mov	r3, r2
24001ea8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
24001eaa:	897b      	ldrh	r3, [r7, #10]
24001eac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
24001eb0:	7a7b      	ldrb	r3, [r7, #9]
24001eb2:	041b      	lsls	r3, r3, #16
24001eb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
24001eb8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
24001eba:	687b      	ldr	r3, [r7, #4]
24001ebc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
24001ebe:	6a3b      	ldr	r3, [r7, #32]
24001ec0:	4313      	orrs	r3, r2
24001ec2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24001ec6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
24001ec8:	68fb      	ldr	r3, [r7, #12]
24001eca:	681b      	ldr	r3, [r3, #0]
24001ecc:	685a      	ldr	r2, [r3, #4]
24001ece:	6a3b      	ldr	r3, [r7, #32]
24001ed0:	0d5b      	lsrs	r3, r3, #21
24001ed2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
24001ed6:	4b08      	ldr	r3, [pc, #32]	; (24001ef8 <I2C_TransferConfig+0x60>)
24001ed8:	430b      	orrs	r3, r1
24001eda:	43db      	mvns	r3, r3
24001edc:	ea02 0103 	and.w	r1, r2, r3
24001ee0:	68fb      	ldr	r3, [r7, #12]
24001ee2:	681b      	ldr	r3, [r3, #0]
24001ee4:	697a      	ldr	r2, [r7, #20]
24001ee6:	430a      	orrs	r2, r1
24001ee8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
24001eea:	bf00      	nop
24001eec:	371c      	adds	r7, #28
24001eee:	46bd      	mov	sp, r7
24001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
24001ef4:	4770      	bx	lr
24001ef6:	bf00      	nop
24001ef8:	03ff63ff 	.word	0x03ff63ff

24001efc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
24001efc:	b480      	push	{r7}
24001efe:	b083      	sub	sp, #12
24001f00:	af00      	add	r7, sp, #0
24001f02:	6078      	str	r0, [r7, #4]
24001f04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
24001f06:	687b      	ldr	r3, [r7, #4]
24001f08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24001f0c:	b2db      	uxtb	r3, r3
24001f0e:	2b20      	cmp	r3, #32
24001f10:	d138      	bne.n	24001f84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
24001f12:	687b      	ldr	r3, [r7, #4]
24001f14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24001f18:	2b01      	cmp	r3, #1
24001f1a:	d101      	bne.n	24001f20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
24001f1c:	2302      	movs	r3, #2
24001f1e:	e032      	b.n	24001f86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
24001f20:	687b      	ldr	r3, [r7, #4]
24001f22:	2201      	movs	r2, #1
24001f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
24001f28:	687b      	ldr	r3, [r7, #4]
24001f2a:	2224      	movs	r2, #36	; 0x24
24001f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
24001f30:	687b      	ldr	r3, [r7, #4]
24001f32:	681b      	ldr	r3, [r3, #0]
24001f34:	681a      	ldr	r2, [r3, #0]
24001f36:	687b      	ldr	r3, [r7, #4]
24001f38:	681b      	ldr	r3, [r3, #0]
24001f3a:	f022 0201 	bic.w	r2, r2, #1
24001f3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
24001f40:	687b      	ldr	r3, [r7, #4]
24001f42:	681b      	ldr	r3, [r3, #0]
24001f44:	681a      	ldr	r2, [r3, #0]
24001f46:	687b      	ldr	r3, [r7, #4]
24001f48:	681b      	ldr	r3, [r3, #0]
24001f4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
24001f4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
24001f50:	687b      	ldr	r3, [r7, #4]
24001f52:	681b      	ldr	r3, [r3, #0]
24001f54:	6819      	ldr	r1, [r3, #0]
24001f56:	687b      	ldr	r3, [r7, #4]
24001f58:	681b      	ldr	r3, [r3, #0]
24001f5a:	683a      	ldr	r2, [r7, #0]
24001f5c:	430a      	orrs	r2, r1
24001f5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
24001f60:	687b      	ldr	r3, [r7, #4]
24001f62:	681b      	ldr	r3, [r3, #0]
24001f64:	681a      	ldr	r2, [r3, #0]
24001f66:	687b      	ldr	r3, [r7, #4]
24001f68:	681b      	ldr	r3, [r3, #0]
24001f6a:	f042 0201 	orr.w	r2, r2, #1
24001f6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
24001f70:	687b      	ldr	r3, [r7, #4]
24001f72:	2220      	movs	r2, #32
24001f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
24001f78:	687b      	ldr	r3, [r7, #4]
24001f7a:	2200      	movs	r2, #0
24001f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
24001f80:	2300      	movs	r3, #0
24001f82:	e000      	b.n	24001f86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
24001f84:	2302      	movs	r3, #2
  }
}
24001f86:	4618      	mov	r0, r3
24001f88:	370c      	adds	r7, #12
24001f8a:	46bd      	mov	sp, r7
24001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
24001f90:	4770      	bx	lr

24001f92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
24001f92:	b480      	push	{r7}
24001f94:	b085      	sub	sp, #20
24001f96:	af00      	add	r7, sp, #0
24001f98:	6078      	str	r0, [r7, #4]
24001f9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
24001f9c:	687b      	ldr	r3, [r7, #4]
24001f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24001fa2:	b2db      	uxtb	r3, r3
24001fa4:	2b20      	cmp	r3, #32
24001fa6:	d139      	bne.n	2400201c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
24001fa8:	687b      	ldr	r3, [r7, #4]
24001faa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24001fae:	2b01      	cmp	r3, #1
24001fb0:	d101      	bne.n	24001fb6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
24001fb2:	2302      	movs	r3, #2
24001fb4:	e033      	b.n	2400201e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
24001fb6:	687b      	ldr	r3, [r7, #4]
24001fb8:	2201      	movs	r2, #1
24001fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
24001fbe:	687b      	ldr	r3, [r7, #4]
24001fc0:	2224      	movs	r2, #36	; 0x24
24001fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
24001fc6:	687b      	ldr	r3, [r7, #4]
24001fc8:	681b      	ldr	r3, [r3, #0]
24001fca:	681a      	ldr	r2, [r3, #0]
24001fcc:	687b      	ldr	r3, [r7, #4]
24001fce:	681b      	ldr	r3, [r3, #0]
24001fd0:	f022 0201 	bic.w	r2, r2, #1
24001fd4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
24001fd6:	687b      	ldr	r3, [r7, #4]
24001fd8:	681b      	ldr	r3, [r3, #0]
24001fda:	681b      	ldr	r3, [r3, #0]
24001fdc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
24001fde:	68fb      	ldr	r3, [r7, #12]
24001fe0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
24001fe4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
24001fe6:	683b      	ldr	r3, [r7, #0]
24001fe8:	021b      	lsls	r3, r3, #8
24001fea:	68fa      	ldr	r2, [r7, #12]
24001fec:	4313      	orrs	r3, r2
24001fee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
24001ff0:	687b      	ldr	r3, [r7, #4]
24001ff2:	681b      	ldr	r3, [r3, #0]
24001ff4:	68fa      	ldr	r2, [r7, #12]
24001ff6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
24001ff8:	687b      	ldr	r3, [r7, #4]
24001ffa:	681b      	ldr	r3, [r3, #0]
24001ffc:	681a      	ldr	r2, [r3, #0]
24001ffe:	687b      	ldr	r3, [r7, #4]
24002000:	681b      	ldr	r3, [r3, #0]
24002002:	f042 0201 	orr.w	r2, r2, #1
24002006:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
24002008:	687b      	ldr	r3, [r7, #4]
2400200a:	2220      	movs	r2, #32
2400200c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
24002010:	687b      	ldr	r3, [r7, #4]
24002012:	2200      	movs	r2, #0
24002014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
24002018:	2300      	movs	r3, #0
2400201a:	e000      	b.n	2400201e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
2400201c:	2302      	movs	r3, #2
  }
}
2400201e:	4618      	mov	r0, r3
24002020:	3714      	adds	r7, #20
24002022:	46bd      	mov	sp, r7
24002024:	f85d 7b04 	ldr.w	r7, [sp], #4
24002028:	4770      	bx	lr
	...

2400202c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
2400202c:	b580      	push	{r7, lr}
2400202e:	b084      	sub	sp, #16
24002030:	af00      	add	r7, sp, #0
24002032:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
24002034:	4b29      	ldr	r3, [pc, #164]	; (240020dc <HAL_PWREx_ConfigSupply+0xb0>)
24002036:	68db      	ldr	r3, [r3, #12]
24002038:	f003 0307 	and.w	r3, r3, #7
2400203c:	2b06      	cmp	r3, #6
2400203e:	d00a      	beq.n	24002056 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
24002040:	4b26      	ldr	r3, [pc, #152]	; (240020dc <HAL_PWREx_ConfigSupply+0xb0>)
24002042:	68db      	ldr	r3, [r3, #12]
24002044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24002048:	687a      	ldr	r2, [r7, #4]
2400204a:	429a      	cmp	r2, r3
2400204c:	d001      	beq.n	24002052 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
2400204e:	2301      	movs	r3, #1
24002050:	e03f      	b.n	240020d2 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
24002052:	2300      	movs	r3, #0
24002054:	e03d      	b.n	240020d2 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
24002056:	4b21      	ldr	r3, [pc, #132]	; (240020dc <HAL_PWREx_ConfigSupply+0xb0>)
24002058:	68db      	ldr	r3, [r3, #12]
2400205a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
2400205e:	491f      	ldr	r1, [pc, #124]	; (240020dc <HAL_PWREx_ConfigSupply+0xb0>)
24002060:	687b      	ldr	r3, [r7, #4]
24002062:	4313      	orrs	r3, r2
24002064:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
24002066:	f7fe fe19 	bl	24000c9c <HAL_GetTick>
2400206a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
2400206c:	e009      	b.n	24002082 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
2400206e:	f7fe fe15 	bl	24000c9c <HAL_GetTick>
24002072:	4602      	mov	r2, r0
24002074:	68fb      	ldr	r3, [r7, #12]
24002076:	1ad3      	subs	r3, r2, r3
24002078:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2400207c:	d901      	bls.n	24002082 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
2400207e:	2301      	movs	r3, #1
24002080:	e027      	b.n	240020d2 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24002082:	4b16      	ldr	r3, [pc, #88]	; (240020dc <HAL_PWREx_ConfigSupply+0xb0>)
24002084:	685b      	ldr	r3, [r3, #4]
24002086:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
2400208a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2400208e:	d1ee      	bne.n	2400206e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
24002090:	687b      	ldr	r3, [r7, #4]
24002092:	2b1e      	cmp	r3, #30
24002094:	d008      	beq.n	240020a8 <HAL_PWREx_ConfigSupply+0x7c>
24002096:	687b      	ldr	r3, [r7, #4]
24002098:	2b2e      	cmp	r3, #46	; 0x2e
2400209a:	d005      	beq.n	240020a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
2400209c:	687b      	ldr	r3, [r7, #4]
2400209e:	2b1d      	cmp	r3, #29
240020a0:	d002      	beq.n	240020a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
240020a2:	687b      	ldr	r3, [r7, #4]
240020a4:	2b2d      	cmp	r3, #45	; 0x2d
240020a6:	d113      	bne.n	240020d0 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
240020a8:	f7fe fdf8 	bl	24000c9c <HAL_GetTick>
240020ac:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
240020ae:	e009      	b.n	240020c4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
240020b0:	f7fe fdf4 	bl	24000c9c <HAL_GetTick>
240020b4:	4602      	mov	r2, r0
240020b6:	68fb      	ldr	r3, [r7, #12]
240020b8:	1ad3      	subs	r3, r2, r3
240020ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
240020be:	d901      	bls.n	240020c4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
240020c0:	2301      	movs	r3, #1
240020c2:	e006      	b.n	240020d2 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
240020c4:	4b05      	ldr	r3, [pc, #20]	; (240020dc <HAL_PWREx_ConfigSupply+0xb0>)
240020c6:	68db      	ldr	r3, [r3, #12]
240020c8:	f003 0311 	and.w	r3, r3, #17
240020cc:	2b11      	cmp	r3, #17
240020ce:	d1ef      	bne.n	240020b0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
240020d0:	2300      	movs	r3, #0
}
240020d2:	4618      	mov	r0, r3
240020d4:	3710      	adds	r7, #16
240020d6:	46bd      	mov	sp, r7
240020d8:	bd80      	pop	{r7, pc}
240020da:	bf00      	nop
240020dc:	58024800 	.word	0x58024800

240020e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
240020e0:	b580      	push	{r7, lr}
240020e2:	b08c      	sub	sp, #48	; 0x30
240020e4:	af00      	add	r7, sp, #0
240020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
240020e8:	687b      	ldr	r3, [r7, #4]
240020ea:	2b00      	cmp	r3, #0
240020ec:	d101      	bne.n	240020f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
240020ee:	2301      	movs	r3, #1
240020f0:	e3c8      	b.n	24002884 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
240020f2:	687b      	ldr	r3, [r7, #4]
240020f4:	681b      	ldr	r3, [r3, #0]
240020f6:	f003 0301 	and.w	r3, r3, #1
240020fa:	2b00      	cmp	r3, #0
240020fc:	f000 8087 	beq.w	2400220e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24002100:	4b88      	ldr	r3, [pc, #544]	; (24002324 <HAL_RCC_OscConfig+0x244>)
24002102:	691b      	ldr	r3, [r3, #16]
24002104:	f003 0338 	and.w	r3, r3, #56	; 0x38
24002108:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
2400210a:	4b86      	ldr	r3, [pc, #536]	; (24002324 <HAL_RCC_OscConfig+0x244>)
2400210c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2400210e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
24002110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
24002112:	2b10      	cmp	r3, #16
24002114:	d007      	beq.n	24002126 <HAL_RCC_OscConfig+0x46>
24002116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
24002118:	2b18      	cmp	r3, #24
2400211a:	d110      	bne.n	2400213e <HAL_RCC_OscConfig+0x5e>
2400211c:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400211e:	f003 0303 	and.w	r3, r3, #3
24002122:	2b02      	cmp	r3, #2
24002124:	d10b      	bne.n	2400213e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
24002126:	4b7f      	ldr	r3, [pc, #508]	; (24002324 <HAL_RCC_OscConfig+0x244>)
24002128:	681b      	ldr	r3, [r3, #0]
2400212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2400212e:	2b00      	cmp	r3, #0
24002130:	d06c      	beq.n	2400220c <HAL_RCC_OscConfig+0x12c>
24002132:	687b      	ldr	r3, [r7, #4]
24002134:	685b      	ldr	r3, [r3, #4]
24002136:	2b00      	cmp	r3, #0
24002138:	d168      	bne.n	2400220c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
2400213a:	2301      	movs	r3, #1
2400213c:	e3a2      	b.n	24002884 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
2400213e:	687b      	ldr	r3, [r7, #4]
24002140:	685b      	ldr	r3, [r3, #4]
24002142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24002146:	d106      	bne.n	24002156 <HAL_RCC_OscConfig+0x76>
24002148:	4b76      	ldr	r3, [pc, #472]	; (24002324 <HAL_RCC_OscConfig+0x244>)
2400214a:	681b      	ldr	r3, [r3, #0]
2400214c:	4a75      	ldr	r2, [pc, #468]	; (24002324 <HAL_RCC_OscConfig+0x244>)
2400214e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24002152:	6013      	str	r3, [r2, #0]
24002154:	e02e      	b.n	240021b4 <HAL_RCC_OscConfig+0xd4>
24002156:	687b      	ldr	r3, [r7, #4]
24002158:	685b      	ldr	r3, [r3, #4]
2400215a:	2b00      	cmp	r3, #0
2400215c:	d10c      	bne.n	24002178 <HAL_RCC_OscConfig+0x98>
2400215e:	4b71      	ldr	r3, [pc, #452]	; (24002324 <HAL_RCC_OscConfig+0x244>)
24002160:	681b      	ldr	r3, [r3, #0]
24002162:	4a70      	ldr	r2, [pc, #448]	; (24002324 <HAL_RCC_OscConfig+0x244>)
24002164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24002168:	6013      	str	r3, [r2, #0]
2400216a:	4b6e      	ldr	r3, [pc, #440]	; (24002324 <HAL_RCC_OscConfig+0x244>)
2400216c:	681b      	ldr	r3, [r3, #0]
2400216e:	4a6d      	ldr	r2, [pc, #436]	; (24002324 <HAL_RCC_OscConfig+0x244>)
24002170:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
24002174:	6013      	str	r3, [r2, #0]
24002176:	e01d      	b.n	240021b4 <HAL_RCC_OscConfig+0xd4>
24002178:	687b      	ldr	r3, [r7, #4]
2400217a:	685b      	ldr	r3, [r3, #4]
2400217c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
24002180:	d10c      	bne.n	2400219c <HAL_RCC_OscConfig+0xbc>
24002182:	4b68      	ldr	r3, [pc, #416]	; (24002324 <HAL_RCC_OscConfig+0x244>)
24002184:	681b      	ldr	r3, [r3, #0]
24002186:	4a67      	ldr	r2, [pc, #412]	; (24002324 <HAL_RCC_OscConfig+0x244>)
24002188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2400218c:	6013      	str	r3, [r2, #0]
2400218e:	4b65      	ldr	r3, [pc, #404]	; (24002324 <HAL_RCC_OscConfig+0x244>)
24002190:	681b      	ldr	r3, [r3, #0]
24002192:	4a64      	ldr	r2, [pc, #400]	; (24002324 <HAL_RCC_OscConfig+0x244>)
24002194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24002198:	6013      	str	r3, [r2, #0]
2400219a:	e00b      	b.n	240021b4 <HAL_RCC_OscConfig+0xd4>
2400219c:	4b61      	ldr	r3, [pc, #388]	; (24002324 <HAL_RCC_OscConfig+0x244>)
2400219e:	681b      	ldr	r3, [r3, #0]
240021a0:	4a60      	ldr	r2, [pc, #384]	; (24002324 <HAL_RCC_OscConfig+0x244>)
240021a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
240021a6:	6013      	str	r3, [r2, #0]
240021a8:	4b5e      	ldr	r3, [pc, #376]	; (24002324 <HAL_RCC_OscConfig+0x244>)
240021aa:	681b      	ldr	r3, [r3, #0]
240021ac:	4a5d      	ldr	r2, [pc, #372]	; (24002324 <HAL_RCC_OscConfig+0x244>)
240021ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
240021b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
240021b4:	687b      	ldr	r3, [r7, #4]
240021b6:	685b      	ldr	r3, [r3, #4]
240021b8:	2b00      	cmp	r3, #0
240021ba:	d013      	beq.n	240021e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
240021bc:	f7fe fd6e 	bl	24000c9c <HAL_GetTick>
240021c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
240021c2:	e008      	b.n	240021d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
240021c4:	f7fe fd6a 	bl	24000c9c <HAL_GetTick>
240021c8:	4602      	mov	r2, r0
240021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240021cc:	1ad3      	subs	r3, r2, r3
240021ce:	2b64      	cmp	r3, #100	; 0x64
240021d0:	d901      	bls.n	240021d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
240021d2:	2303      	movs	r3, #3
240021d4:	e356      	b.n	24002884 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
240021d6:	4b53      	ldr	r3, [pc, #332]	; (24002324 <HAL_RCC_OscConfig+0x244>)
240021d8:	681b      	ldr	r3, [r3, #0]
240021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
240021de:	2b00      	cmp	r3, #0
240021e0:	d0f0      	beq.n	240021c4 <HAL_RCC_OscConfig+0xe4>
240021e2:	e014      	b.n	2400220e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
240021e4:	f7fe fd5a 	bl	24000c9c <HAL_GetTick>
240021e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
240021ea:	e008      	b.n	240021fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
240021ec:	f7fe fd56 	bl	24000c9c <HAL_GetTick>
240021f0:	4602      	mov	r2, r0
240021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240021f4:	1ad3      	subs	r3, r2, r3
240021f6:	2b64      	cmp	r3, #100	; 0x64
240021f8:	d901      	bls.n	240021fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
240021fa:	2303      	movs	r3, #3
240021fc:	e342      	b.n	24002884 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
240021fe:	4b49      	ldr	r3, [pc, #292]	; (24002324 <HAL_RCC_OscConfig+0x244>)
24002200:	681b      	ldr	r3, [r3, #0]
24002202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24002206:	2b00      	cmp	r3, #0
24002208:	d1f0      	bne.n	240021ec <HAL_RCC_OscConfig+0x10c>
2400220a:	e000      	b.n	2400220e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
2400220c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
2400220e:	687b      	ldr	r3, [r7, #4]
24002210:	681b      	ldr	r3, [r3, #0]
24002212:	f003 0302 	and.w	r3, r3, #2
24002216:	2b00      	cmp	r3, #0
24002218:	f000 808c 	beq.w	24002334 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
2400221c:	4b41      	ldr	r3, [pc, #260]	; (24002324 <HAL_RCC_OscConfig+0x244>)
2400221e:	691b      	ldr	r3, [r3, #16]
24002220:	f003 0338 	and.w	r3, r3, #56	; 0x38
24002224:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24002226:	4b3f      	ldr	r3, [pc, #252]	; (24002324 <HAL_RCC_OscConfig+0x244>)
24002228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2400222a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
2400222c:	6a3b      	ldr	r3, [r7, #32]
2400222e:	2b00      	cmp	r3, #0
24002230:	d007      	beq.n	24002242 <HAL_RCC_OscConfig+0x162>
24002232:	6a3b      	ldr	r3, [r7, #32]
24002234:	2b18      	cmp	r3, #24
24002236:	d137      	bne.n	240022a8 <HAL_RCC_OscConfig+0x1c8>
24002238:	69fb      	ldr	r3, [r7, #28]
2400223a:	f003 0303 	and.w	r3, r3, #3
2400223e:	2b00      	cmp	r3, #0
24002240:	d132      	bne.n	240022a8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
24002242:	4b38      	ldr	r3, [pc, #224]	; (24002324 <HAL_RCC_OscConfig+0x244>)
24002244:	681b      	ldr	r3, [r3, #0]
24002246:	f003 0304 	and.w	r3, r3, #4
2400224a:	2b00      	cmp	r3, #0
2400224c:	d005      	beq.n	2400225a <HAL_RCC_OscConfig+0x17a>
2400224e:	687b      	ldr	r3, [r7, #4]
24002250:	68db      	ldr	r3, [r3, #12]
24002252:	2b00      	cmp	r3, #0
24002254:	d101      	bne.n	2400225a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
24002256:	2301      	movs	r3, #1
24002258:	e314      	b.n	24002884 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
2400225a:	4b32      	ldr	r3, [pc, #200]	; (24002324 <HAL_RCC_OscConfig+0x244>)
2400225c:	681b      	ldr	r3, [r3, #0]
2400225e:	f023 0219 	bic.w	r2, r3, #25
24002262:	687b      	ldr	r3, [r7, #4]
24002264:	68db      	ldr	r3, [r3, #12]
24002266:	492f      	ldr	r1, [pc, #188]	; (24002324 <HAL_RCC_OscConfig+0x244>)
24002268:	4313      	orrs	r3, r2
2400226a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2400226c:	f7fe fd16 	bl	24000c9c <HAL_GetTick>
24002270:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24002272:	e008      	b.n	24002286 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24002274:	f7fe fd12 	bl	24000c9c <HAL_GetTick>
24002278:	4602      	mov	r2, r0
2400227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2400227c:	1ad3      	subs	r3, r2, r3
2400227e:	2b02      	cmp	r3, #2
24002280:	d901      	bls.n	24002286 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
24002282:	2303      	movs	r3, #3
24002284:	e2fe      	b.n	24002884 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24002286:	4b27      	ldr	r3, [pc, #156]	; (24002324 <HAL_RCC_OscConfig+0x244>)
24002288:	681b      	ldr	r3, [r3, #0]
2400228a:	f003 0304 	and.w	r3, r3, #4
2400228e:	2b00      	cmp	r3, #0
24002290:	d0f0      	beq.n	24002274 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
24002292:	4b24      	ldr	r3, [pc, #144]	; (24002324 <HAL_RCC_OscConfig+0x244>)
24002294:	685b      	ldr	r3, [r3, #4]
24002296:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
2400229a:	687b      	ldr	r3, [r7, #4]
2400229c:	691b      	ldr	r3, [r3, #16]
2400229e:	061b      	lsls	r3, r3, #24
240022a0:	4920      	ldr	r1, [pc, #128]	; (24002324 <HAL_RCC_OscConfig+0x244>)
240022a2:	4313      	orrs	r3, r2
240022a4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
240022a6:	e045      	b.n	24002334 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
240022a8:	687b      	ldr	r3, [r7, #4]
240022aa:	68db      	ldr	r3, [r3, #12]
240022ac:	2b00      	cmp	r3, #0
240022ae:	d026      	beq.n	240022fe <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
240022b0:	4b1c      	ldr	r3, [pc, #112]	; (24002324 <HAL_RCC_OscConfig+0x244>)
240022b2:	681b      	ldr	r3, [r3, #0]
240022b4:	f023 0219 	bic.w	r2, r3, #25
240022b8:	687b      	ldr	r3, [r7, #4]
240022ba:	68db      	ldr	r3, [r3, #12]
240022bc:	4919      	ldr	r1, [pc, #100]	; (24002324 <HAL_RCC_OscConfig+0x244>)
240022be:	4313      	orrs	r3, r2
240022c0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
240022c2:	f7fe fceb 	bl	24000c9c <HAL_GetTick>
240022c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
240022c8:	e008      	b.n	240022dc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
240022ca:	f7fe fce7 	bl	24000c9c <HAL_GetTick>
240022ce:	4602      	mov	r2, r0
240022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240022d2:	1ad3      	subs	r3, r2, r3
240022d4:	2b02      	cmp	r3, #2
240022d6:	d901      	bls.n	240022dc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
240022d8:	2303      	movs	r3, #3
240022da:	e2d3      	b.n	24002884 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
240022dc:	4b11      	ldr	r3, [pc, #68]	; (24002324 <HAL_RCC_OscConfig+0x244>)
240022de:	681b      	ldr	r3, [r3, #0]
240022e0:	f003 0304 	and.w	r3, r3, #4
240022e4:	2b00      	cmp	r3, #0
240022e6:	d0f0      	beq.n	240022ca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
240022e8:	4b0e      	ldr	r3, [pc, #56]	; (24002324 <HAL_RCC_OscConfig+0x244>)
240022ea:	685b      	ldr	r3, [r3, #4]
240022ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
240022f0:	687b      	ldr	r3, [r7, #4]
240022f2:	691b      	ldr	r3, [r3, #16]
240022f4:	061b      	lsls	r3, r3, #24
240022f6:	490b      	ldr	r1, [pc, #44]	; (24002324 <HAL_RCC_OscConfig+0x244>)
240022f8:	4313      	orrs	r3, r2
240022fa:	604b      	str	r3, [r1, #4]
240022fc:	e01a      	b.n	24002334 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
240022fe:	4b09      	ldr	r3, [pc, #36]	; (24002324 <HAL_RCC_OscConfig+0x244>)
24002300:	681b      	ldr	r3, [r3, #0]
24002302:	4a08      	ldr	r2, [pc, #32]	; (24002324 <HAL_RCC_OscConfig+0x244>)
24002304:	f023 0301 	bic.w	r3, r3, #1
24002308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2400230a:	f7fe fcc7 	bl	24000c9c <HAL_GetTick>
2400230e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
24002310:	e00a      	b.n	24002328 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24002312:	f7fe fcc3 	bl	24000c9c <HAL_GetTick>
24002316:	4602      	mov	r2, r0
24002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2400231a:	1ad3      	subs	r3, r2, r3
2400231c:	2b02      	cmp	r3, #2
2400231e:	d903      	bls.n	24002328 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
24002320:	2303      	movs	r3, #3
24002322:	e2af      	b.n	24002884 <HAL_RCC_OscConfig+0x7a4>
24002324:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
24002328:	4b96      	ldr	r3, [pc, #600]	; (24002584 <HAL_RCC_OscConfig+0x4a4>)
2400232a:	681b      	ldr	r3, [r3, #0]
2400232c:	f003 0304 	and.w	r3, r3, #4
24002330:	2b00      	cmp	r3, #0
24002332:	d1ee      	bne.n	24002312 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24002334:	687b      	ldr	r3, [r7, #4]
24002336:	681b      	ldr	r3, [r3, #0]
24002338:	f003 0310 	and.w	r3, r3, #16
2400233c:	2b00      	cmp	r3, #0
2400233e:	d06a      	beq.n	24002416 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24002340:	4b90      	ldr	r3, [pc, #576]	; (24002584 <HAL_RCC_OscConfig+0x4a4>)
24002342:	691b      	ldr	r3, [r3, #16]
24002344:	f003 0338 	and.w	r3, r3, #56	; 0x38
24002348:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
2400234a:	4b8e      	ldr	r3, [pc, #568]	; (24002584 <HAL_RCC_OscConfig+0x4a4>)
2400234c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2400234e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
24002350:	69bb      	ldr	r3, [r7, #24]
24002352:	2b08      	cmp	r3, #8
24002354:	d007      	beq.n	24002366 <HAL_RCC_OscConfig+0x286>
24002356:	69bb      	ldr	r3, [r7, #24]
24002358:	2b18      	cmp	r3, #24
2400235a:	d11b      	bne.n	24002394 <HAL_RCC_OscConfig+0x2b4>
2400235c:	697b      	ldr	r3, [r7, #20]
2400235e:	f003 0303 	and.w	r3, r3, #3
24002362:	2b01      	cmp	r3, #1
24002364:	d116      	bne.n	24002394 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
24002366:	4b87      	ldr	r3, [pc, #540]	; (24002584 <HAL_RCC_OscConfig+0x4a4>)
24002368:	681b      	ldr	r3, [r3, #0]
2400236a:	f403 7380 	and.w	r3, r3, #256	; 0x100
2400236e:	2b00      	cmp	r3, #0
24002370:	d005      	beq.n	2400237e <HAL_RCC_OscConfig+0x29e>
24002372:	687b      	ldr	r3, [r7, #4]
24002374:	69db      	ldr	r3, [r3, #28]
24002376:	2b80      	cmp	r3, #128	; 0x80
24002378:	d001      	beq.n	2400237e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
2400237a:	2301      	movs	r3, #1
2400237c:	e282      	b.n	24002884 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
2400237e:	4b81      	ldr	r3, [pc, #516]	; (24002584 <HAL_RCC_OscConfig+0x4a4>)
24002380:	68db      	ldr	r3, [r3, #12]
24002382:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
24002386:	687b      	ldr	r3, [r7, #4]
24002388:	6a1b      	ldr	r3, [r3, #32]
2400238a:	061b      	lsls	r3, r3, #24
2400238c:	497d      	ldr	r1, [pc, #500]	; (24002584 <HAL_RCC_OscConfig+0x4a4>)
2400238e:	4313      	orrs	r3, r2
24002390:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
24002392:	e040      	b.n	24002416 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
24002394:	687b      	ldr	r3, [r7, #4]
24002396:	69db      	ldr	r3, [r3, #28]
24002398:	2b00      	cmp	r3, #0
2400239a:	d023      	beq.n	240023e4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
2400239c:	4b79      	ldr	r3, [pc, #484]	; (24002584 <HAL_RCC_OscConfig+0x4a4>)
2400239e:	681b      	ldr	r3, [r3, #0]
240023a0:	4a78      	ldr	r2, [pc, #480]	; (24002584 <HAL_RCC_OscConfig+0x4a4>)
240023a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
240023a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
240023a8:	f7fe fc78 	bl	24000c9c <HAL_GetTick>
240023ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
240023ae:	e008      	b.n	240023c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
240023b0:	f7fe fc74 	bl	24000c9c <HAL_GetTick>
240023b4:	4602      	mov	r2, r0
240023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240023b8:	1ad3      	subs	r3, r2, r3
240023ba:	2b02      	cmp	r3, #2
240023bc:	d901      	bls.n	240023c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
240023be:	2303      	movs	r3, #3
240023c0:	e260      	b.n	24002884 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
240023c2:	4b70      	ldr	r3, [pc, #448]	; (24002584 <HAL_RCC_OscConfig+0x4a4>)
240023c4:	681b      	ldr	r3, [r3, #0]
240023c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
240023ca:	2b00      	cmp	r3, #0
240023cc:	d0f0      	beq.n	240023b0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
240023ce:	4b6d      	ldr	r3, [pc, #436]	; (24002584 <HAL_RCC_OscConfig+0x4a4>)
240023d0:	68db      	ldr	r3, [r3, #12]
240023d2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
240023d6:	687b      	ldr	r3, [r7, #4]
240023d8:	6a1b      	ldr	r3, [r3, #32]
240023da:	061b      	lsls	r3, r3, #24
240023dc:	4969      	ldr	r1, [pc, #420]	; (24002584 <HAL_RCC_OscConfig+0x4a4>)
240023de:	4313      	orrs	r3, r2
240023e0:	60cb      	str	r3, [r1, #12]
240023e2:	e018      	b.n	24002416 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
240023e4:	4b67      	ldr	r3, [pc, #412]	; (24002584 <HAL_RCC_OscConfig+0x4a4>)
240023e6:	681b      	ldr	r3, [r3, #0]
240023e8:	4a66      	ldr	r2, [pc, #408]	; (24002584 <HAL_RCC_OscConfig+0x4a4>)
240023ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
240023ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
240023f0:	f7fe fc54 	bl	24000c9c <HAL_GetTick>
240023f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
240023f6:	e008      	b.n	2400240a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
240023f8:	f7fe fc50 	bl	24000c9c <HAL_GetTick>
240023fc:	4602      	mov	r2, r0
240023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24002400:	1ad3      	subs	r3, r2, r3
24002402:	2b02      	cmp	r3, #2
24002404:	d901      	bls.n	2400240a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
24002406:	2303      	movs	r3, #3
24002408:	e23c      	b.n	24002884 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
2400240a:	4b5e      	ldr	r3, [pc, #376]	; (24002584 <HAL_RCC_OscConfig+0x4a4>)
2400240c:	681b      	ldr	r3, [r3, #0]
2400240e:	f403 7380 	and.w	r3, r3, #256	; 0x100
24002412:	2b00      	cmp	r3, #0
24002414:	d1f0      	bne.n	240023f8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24002416:	687b      	ldr	r3, [r7, #4]
24002418:	681b      	ldr	r3, [r3, #0]
2400241a:	f003 0308 	and.w	r3, r3, #8
2400241e:	2b00      	cmp	r3, #0
24002420:	d036      	beq.n	24002490 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
24002422:	687b      	ldr	r3, [r7, #4]
24002424:	695b      	ldr	r3, [r3, #20]
24002426:	2b00      	cmp	r3, #0
24002428:	d019      	beq.n	2400245e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
2400242a:	4b56      	ldr	r3, [pc, #344]	; (24002584 <HAL_RCC_OscConfig+0x4a4>)
2400242c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2400242e:	4a55      	ldr	r2, [pc, #340]	; (24002584 <HAL_RCC_OscConfig+0x4a4>)
24002430:	f043 0301 	orr.w	r3, r3, #1
24002434:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
24002436:	f7fe fc31 	bl	24000c9c <HAL_GetTick>
2400243a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
2400243c:	e008      	b.n	24002450 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
2400243e:	f7fe fc2d 	bl	24000c9c <HAL_GetTick>
24002442:	4602      	mov	r2, r0
24002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24002446:	1ad3      	subs	r3, r2, r3
24002448:	2b02      	cmp	r3, #2
2400244a:	d901      	bls.n	24002450 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
2400244c:	2303      	movs	r3, #3
2400244e:	e219      	b.n	24002884 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
24002450:	4b4c      	ldr	r3, [pc, #304]	; (24002584 <HAL_RCC_OscConfig+0x4a4>)
24002452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
24002454:	f003 0302 	and.w	r3, r3, #2
24002458:	2b00      	cmp	r3, #0
2400245a:	d0f0      	beq.n	2400243e <HAL_RCC_OscConfig+0x35e>
2400245c:	e018      	b.n	24002490 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
2400245e:	4b49      	ldr	r3, [pc, #292]	; (24002584 <HAL_RCC_OscConfig+0x4a4>)
24002460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
24002462:	4a48      	ldr	r2, [pc, #288]	; (24002584 <HAL_RCC_OscConfig+0x4a4>)
24002464:	f023 0301 	bic.w	r3, r3, #1
24002468:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2400246a:	f7fe fc17 	bl	24000c9c <HAL_GetTick>
2400246e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
24002470:	e008      	b.n	24002484 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
24002472:	f7fe fc13 	bl	24000c9c <HAL_GetTick>
24002476:	4602      	mov	r2, r0
24002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2400247a:	1ad3      	subs	r3, r2, r3
2400247c:	2b02      	cmp	r3, #2
2400247e:	d901      	bls.n	24002484 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
24002480:	2303      	movs	r3, #3
24002482:	e1ff      	b.n	24002884 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
24002484:	4b3f      	ldr	r3, [pc, #252]	; (24002584 <HAL_RCC_OscConfig+0x4a4>)
24002486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
24002488:	f003 0302 	and.w	r3, r3, #2
2400248c:	2b00      	cmp	r3, #0
2400248e:	d1f0      	bne.n	24002472 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
24002490:	687b      	ldr	r3, [r7, #4]
24002492:	681b      	ldr	r3, [r3, #0]
24002494:	f003 0320 	and.w	r3, r3, #32
24002498:	2b00      	cmp	r3, #0
2400249a:	d036      	beq.n	2400250a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
2400249c:	687b      	ldr	r3, [r7, #4]
2400249e:	699b      	ldr	r3, [r3, #24]
240024a0:	2b00      	cmp	r3, #0
240024a2:	d019      	beq.n	240024d8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
240024a4:	4b37      	ldr	r3, [pc, #220]	; (24002584 <HAL_RCC_OscConfig+0x4a4>)
240024a6:	681b      	ldr	r3, [r3, #0]
240024a8:	4a36      	ldr	r2, [pc, #216]	; (24002584 <HAL_RCC_OscConfig+0x4a4>)
240024aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
240024ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
240024b0:	f7fe fbf4 	bl	24000c9c <HAL_GetTick>
240024b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
240024b6:	e008      	b.n	240024ca <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
240024b8:	f7fe fbf0 	bl	24000c9c <HAL_GetTick>
240024bc:	4602      	mov	r2, r0
240024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240024c0:	1ad3      	subs	r3, r2, r3
240024c2:	2b02      	cmp	r3, #2
240024c4:	d901      	bls.n	240024ca <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
240024c6:	2303      	movs	r3, #3
240024c8:	e1dc      	b.n	24002884 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
240024ca:	4b2e      	ldr	r3, [pc, #184]	; (24002584 <HAL_RCC_OscConfig+0x4a4>)
240024cc:	681b      	ldr	r3, [r3, #0]
240024ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
240024d2:	2b00      	cmp	r3, #0
240024d4:	d0f0      	beq.n	240024b8 <HAL_RCC_OscConfig+0x3d8>
240024d6:	e018      	b.n	2400250a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
240024d8:	4b2a      	ldr	r3, [pc, #168]	; (24002584 <HAL_RCC_OscConfig+0x4a4>)
240024da:	681b      	ldr	r3, [r3, #0]
240024dc:	4a29      	ldr	r2, [pc, #164]	; (24002584 <HAL_RCC_OscConfig+0x4a4>)
240024de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
240024e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
240024e4:	f7fe fbda 	bl	24000c9c <HAL_GetTick>
240024e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
240024ea:	e008      	b.n	240024fe <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
240024ec:	f7fe fbd6 	bl	24000c9c <HAL_GetTick>
240024f0:	4602      	mov	r2, r0
240024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240024f4:	1ad3      	subs	r3, r2, r3
240024f6:	2b02      	cmp	r3, #2
240024f8:	d901      	bls.n	240024fe <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
240024fa:	2303      	movs	r3, #3
240024fc:	e1c2      	b.n	24002884 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
240024fe:	4b21      	ldr	r3, [pc, #132]	; (24002584 <HAL_RCC_OscConfig+0x4a4>)
24002500:	681b      	ldr	r3, [r3, #0]
24002502:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24002506:	2b00      	cmp	r3, #0
24002508:	d1f0      	bne.n	240024ec <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
2400250a:	687b      	ldr	r3, [r7, #4]
2400250c:	681b      	ldr	r3, [r3, #0]
2400250e:	f003 0304 	and.w	r3, r3, #4
24002512:	2b00      	cmp	r3, #0
24002514:	f000 8086 	beq.w	24002624 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
24002518:	4b1b      	ldr	r3, [pc, #108]	; (24002588 <HAL_RCC_OscConfig+0x4a8>)
2400251a:	681b      	ldr	r3, [r3, #0]
2400251c:	4a1a      	ldr	r2, [pc, #104]	; (24002588 <HAL_RCC_OscConfig+0x4a8>)
2400251e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24002522:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
24002524:	f7fe fbba 	bl	24000c9c <HAL_GetTick>
24002528:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2400252a:	e008      	b.n	2400253e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
2400252c:	f7fe fbb6 	bl	24000c9c <HAL_GetTick>
24002530:	4602      	mov	r2, r0
24002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24002534:	1ad3      	subs	r3, r2, r3
24002536:	2b64      	cmp	r3, #100	; 0x64
24002538:	d901      	bls.n	2400253e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
2400253a:	2303      	movs	r3, #3
2400253c:	e1a2      	b.n	24002884 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2400253e:	4b12      	ldr	r3, [pc, #72]	; (24002588 <HAL_RCC_OscConfig+0x4a8>)
24002540:	681b      	ldr	r3, [r3, #0]
24002542:	f403 7380 	and.w	r3, r3, #256	; 0x100
24002546:	2b00      	cmp	r3, #0
24002548:	d0f0      	beq.n	2400252c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
2400254a:	687b      	ldr	r3, [r7, #4]
2400254c:	689b      	ldr	r3, [r3, #8]
2400254e:	2b01      	cmp	r3, #1
24002550:	d106      	bne.n	24002560 <HAL_RCC_OscConfig+0x480>
24002552:	4b0c      	ldr	r3, [pc, #48]	; (24002584 <HAL_RCC_OscConfig+0x4a4>)
24002554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24002556:	4a0b      	ldr	r2, [pc, #44]	; (24002584 <HAL_RCC_OscConfig+0x4a4>)
24002558:	f043 0301 	orr.w	r3, r3, #1
2400255c:	6713      	str	r3, [r2, #112]	; 0x70
2400255e:	e032      	b.n	240025c6 <HAL_RCC_OscConfig+0x4e6>
24002560:	687b      	ldr	r3, [r7, #4]
24002562:	689b      	ldr	r3, [r3, #8]
24002564:	2b00      	cmp	r3, #0
24002566:	d111      	bne.n	2400258c <HAL_RCC_OscConfig+0x4ac>
24002568:	4b06      	ldr	r3, [pc, #24]	; (24002584 <HAL_RCC_OscConfig+0x4a4>)
2400256a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2400256c:	4a05      	ldr	r2, [pc, #20]	; (24002584 <HAL_RCC_OscConfig+0x4a4>)
2400256e:	f023 0301 	bic.w	r3, r3, #1
24002572:	6713      	str	r3, [r2, #112]	; 0x70
24002574:	4b03      	ldr	r3, [pc, #12]	; (24002584 <HAL_RCC_OscConfig+0x4a4>)
24002576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24002578:	4a02      	ldr	r2, [pc, #8]	; (24002584 <HAL_RCC_OscConfig+0x4a4>)
2400257a:	f023 0304 	bic.w	r3, r3, #4
2400257e:	6713      	str	r3, [r2, #112]	; 0x70
24002580:	e021      	b.n	240025c6 <HAL_RCC_OscConfig+0x4e6>
24002582:	bf00      	nop
24002584:	58024400 	.word	0x58024400
24002588:	58024800 	.word	0x58024800
2400258c:	687b      	ldr	r3, [r7, #4]
2400258e:	689b      	ldr	r3, [r3, #8]
24002590:	2b05      	cmp	r3, #5
24002592:	d10c      	bne.n	240025ae <HAL_RCC_OscConfig+0x4ce>
24002594:	4b83      	ldr	r3, [pc, #524]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
24002596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24002598:	4a82      	ldr	r2, [pc, #520]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
2400259a:	f043 0304 	orr.w	r3, r3, #4
2400259e:	6713      	str	r3, [r2, #112]	; 0x70
240025a0:	4b80      	ldr	r3, [pc, #512]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
240025a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240025a4:	4a7f      	ldr	r2, [pc, #508]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
240025a6:	f043 0301 	orr.w	r3, r3, #1
240025aa:	6713      	str	r3, [r2, #112]	; 0x70
240025ac:	e00b      	b.n	240025c6 <HAL_RCC_OscConfig+0x4e6>
240025ae:	4b7d      	ldr	r3, [pc, #500]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
240025b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240025b2:	4a7c      	ldr	r2, [pc, #496]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
240025b4:	f023 0301 	bic.w	r3, r3, #1
240025b8:	6713      	str	r3, [r2, #112]	; 0x70
240025ba:	4b7a      	ldr	r3, [pc, #488]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
240025bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240025be:	4a79      	ldr	r2, [pc, #484]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
240025c0:	f023 0304 	bic.w	r3, r3, #4
240025c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
240025c6:	687b      	ldr	r3, [r7, #4]
240025c8:	689b      	ldr	r3, [r3, #8]
240025ca:	2b00      	cmp	r3, #0
240025cc:	d015      	beq.n	240025fa <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
240025ce:	f7fe fb65 	bl	24000c9c <HAL_GetTick>
240025d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
240025d4:	e00a      	b.n	240025ec <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
240025d6:	f7fe fb61 	bl	24000c9c <HAL_GetTick>
240025da:	4602      	mov	r2, r0
240025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240025de:	1ad3      	subs	r3, r2, r3
240025e0:	f241 3288 	movw	r2, #5000	; 0x1388
240025e4:	4293      	cmp	r3, r2
240025e6:	d901      	bls.n	240025ec <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
240025e8:	2303      	movs	r3, #3
240025ea:	e14b      	b.n	24002884 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
240025ec:	4b6d      	ldr	r3, [pc, #436]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
240025ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240025f0:	f003 0302 	and.w	r3, r3, #2
240025f4:	2b00      	cmp	r3, #0
240025f6:	d0ee      	beq.n	240025d6 <HAL_RCC_OscConfig+0x4f6>
240025f8:	e014      	b.n	24002624 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
240025fa:	f7fe fb4f 	bl	24000c9c <HAL_GetTick>
240025fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
24002600:	e00a      	b.n	24002618 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24002602:	f7fe fb4b 	bl	24000c9c <HAL_GetTick>
24002606:	4602      	mov	r2, r0
24002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2400260a:	1ad3      	subs	r3, r2, r3
2400260c:	f241 3288 	movw	r2, #5000	; 0x1388
24002610:	4293      	cmp	r3, r2
24002612:	d901      	bls.n	24002618 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
24002614:	2303      	movs	r3, #3
24002616:	e135      	b.n	24002884 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
24002618:	4b62      	ldr	r3, [pc, #392]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
2400261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2400261c:	f003 0302 	and.w	r3, r3, #2
24002620:	2b00      	cmp	r3, #0
24002622:	d1ee      	bne.n	24002602 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
24002624:	687b      	ldr	r3, [r7, #4]
24002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24002628:	2b00      	cmp	r3, #0
2400262a:	f000 812a 	beq.w	24002882 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
2400262e:	4b5d      	ldr	r3, [pc, #372]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
24002630:	691b      	ldr	r3, [r3, #16]
24002632:	f003 0338 	and.w	r3, r3, #56	; 0x38
24002636:	2b18      	cmp	r3, #24
24002638:	f000 80ba 	beq.w	240027b0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
2400263c:	687b      	ldr	r3, [r7, #4]
2400263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24002640:	2b02      	cmp	r3, #2
24002642:	f040 8095 	bne.w	24002770 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
24002646:	4b57      	ldr	r3, [pc, #348]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
24002648:	681b      	ldr	r3, [r3, #0]
2400264a:	4a56      	ldr	r2, [pc, #344]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
2400264c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
24002650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24002652:	f7fe fb23 	bl	24000c9c <HAL_GetTick>
24002656:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24002658:	e008      	b.n	2400266c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
2400265a:	f7fe fb1f 	bl	24000c9c <HAL_GetTick>
2400265e:	4602      	mov	r2, r0
24002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24002662:	1ad3      	subs	r3, r2, r3
24002664:	2b02      	cmp	r3, #2
24002666:	d901      	bls.n	2400266c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
24002668:	2303      	movs	r3, #3
2400266a:	e10b      	b.n	24002884 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
2400266c:	4b4d      	ldr	r3, [pc, #308]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
2400266e:	681b      	ldr	r3, [r3, #0]
24002670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24002674:	2b00      	cmp	r3, #0
24002676:	d1f0      	bne.n	2400265a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
24002678:	4b4a      	ldr	r3, [pc, #296]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
2400267a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
2400267c:	4b4a      	ldr	r3, [pc, #296]	; (240027a8 <HAL_RCC_OscConfig+0x6c8>)
2400267e:	4013      	ands	r3, r2
24002680:	687a      	ldr	r2, [r7, #4]
24002682:	6a91      	ldr	r1, [r2, #40]	; 0x28
24002684:	687a      	ldr	r2, [r7, #4]
24002686:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
24002688:	0112      	lsls	r2, r2, #4
2400268a:	430a      	orrs	r2, r1
2400268c:	4945      	ldr	r1, [pc, #276]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
2400268e:	4313      	orrs	r3, r2
24002690:	628b      	str	r3, [r1, #40]	; 0x28
24002692:	687b      	ldr	r3, [r7, #4]
24002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24002696:	3b01      	subs	r3, #1
24002698:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400269c:	687b      	ldr	r3, [r7, #4]
2400269e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240026a0:	3b01      	subs	r3, #1
240026a2:	025b      	lsls	r3, r3, #9
240026a4:	b29b      	uxth	r3, r3
240026a6:	431a      	orrs	r2, r3
240026a8:	687b      	ldr	r3, [r7, #4]
240026aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240026ac:	3b01      	subs	r3, #1
240026ae:	041b      	lsls	r3, r3, #16
240026b0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
240026b4:	431a      	orrs	r2, r3
240026b6:	687b      	ldr	r3, [r7, #4]
240026b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240026ba:	3b01      	subs	r3, #1
240026bc:	061b      	lsls	r3, r3, #24
240026be:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
240026c2:	4938      	ldr	r1, [pc, #224]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
240026c4:	4313      	orrs	r3, r2
240026c6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
240026c8:	4b36      	ldr	r3, [pc, #216]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
240026ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240026cc:	4a35      	ldr	r2, [pc, #212]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
240026ce:	f023 0301 	bic.w	r3, r3, #1
240026d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
240026d4:	4b33      	ldr	r3, [pc, #204]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
240026d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
240026d8:	4b34      	ldr	r3, [pc, #208]	; (240027ac <HAL_RCC_OscConfig+0x6cc>)
240026da:	4013      	ands	r3, r2
240026dc:	687a      	ldr	r2, [r7, #4]
240026de:	6c92      	ldr	r2, [r2, #72]	; 0x48
240026e0:	00d2      	lsls	r2, r2, #3
240026e2:	4930      	ldr	r1, [pc, #192]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
240026e4:	4313      	orrs	r3, r2
240026e6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
240026e8:	4b2e      	ldr	r3, [pc, #184]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
240026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240026ec:	f023 020c 	bic.w	r2, r3, #12
240026f0:	687b      	ldr	r3, [r7, #4]
240026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240026f4:	492b      	ldr	r1, [pc, #172]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
240026f6:	4313      	orrs	r3, r2
240026f8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
240026fa:	4b2a      	ldr	r3, [pc, #168]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
240026fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240026fe:	f023 0202 	bic.w	r2, r3, #2
24002702:	687b      	ldr	r3, [r7, #4]
24002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24002706:	4927      	ldr	r1, [pc, #156]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
24002708:	4313      	orrs	r3, r2
2400270a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
2400270c:	4b25      	ldr	r3, [pc, #148]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
2400270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24002710:	4a24      	ldr	r2, [pc, #144]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
24002712:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24002716:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24002718:	4b22      	ldr	r3, [pc, #136]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
2400271a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400271c:	4a21      	ldr	r2, [pc, #132]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
2400271e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24002722:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
24002724:	4b1f      	ldr	r3, [pc, #124]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
24002726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24002728:	4a1e      	ldr	r2, [pc, #120]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
2400272a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2400272e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
24002730:	4b1c      	ldr	r3, [pc, #112]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
24002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24002734:	4a1b      	ldr	r2, [pc, #108]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
24002736:	f043 0301 	orr.w	r3, r3, #1
2400273a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
2400273c:	4b19      	ldr	r3, [pc, #100]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
2400273e:	681b      	ldr	r3, [r3, #0]
24002740:	4a18      	ldr	r2, [pc, #96]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
24002742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
24002746:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24002748:	f7fe faa8 	bl	24000c9c <HAL_GetTick>
2400274c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
2400274e:	e008      	b.n	24002762 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24002750:	f7fe faa4 	bl	24000c9c <HAL_GetTick>
24002754:	4602      	mov	r2, r0
24002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24002758:	1ad3      	subs	r3, r2, r3
2400275a:	2b02      	cmp	r3, #2
2400275c:	d901      	bls.n	24002762 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
2400275e:	2303      	movs	r3, #3
24002760:	e090      	b.n	24002884 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24002762:	4b10      	ldr	r3, [pc, #64]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
24002764:	681b      	ldr	r3, [r3, #0]
24002766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2400276a:	2b00      	cmp	r3, #0
2400276c:	d0f0      	beq.n	24002750 <HAL_RCC_OscConfig+0x670>
2400276e:	e088      	b.n	24002882 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
24002770:	4b0c      	ldr	r3, [pc, #48]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
24002772:	681b      	ldr	r3, [r3, #0]
24002774:	4a0b      	ldr	r2, [pc, #44]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
24002776:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
2400277a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2400277c:	f7fe fa8e 	bl	24000c9c <HAL_GetTick>
24002780:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24002782:	e008      	b.n	24002796 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24002784:	f7fe fa8a 	bl	24000c9c <HAL_GetTick>
24002788:	4602      	mov	r2, r0
2400278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2400278c:	1ad3      	subs	r3, r2, r3
2400278e:	2b02      	cmp	r3, #2
24002790:	d901      	bls.n	24002796 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
24002792:	2303      	movs	r3, #3
24002794:	e076      	b.n	24002884 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24002796:	4b03      	ldr	r3, [pc, #12]	; (240027a4 <HAL_RCC_OscConfig+0x6c4>)
24002798:	681b      	ldr	r3, [r3, #0]
2400279a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2400279e:	2b00      	cmp	r3, #0
240027a0:	d1f0      	bne.n	24002784 <HAL_RCC_OscConfig+0x6a4>
240027a2:	e06e      	b.n	24002882 <HAL_RCC_OscConfig+0x7a2>
240027a4:	58024400 	.word	0x58024400
240027a8:	fffffc0c 	.word	0xfffffc0c
240027ac:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
240027b0:	4b36      	ldr	r3, [pc, #216]	; (2400288c <HAL_RCC_OscConfig+0x7ac>)
240027b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240027b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
240027b6:	4b35      	ldr	r3, [pc, #212]	; (2400288c <HAL_RCC_OscConfig+0x7ac>)
240027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240027ba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
240027bc:	687b      	ldr	r3, [r7, #4]
240027be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240027c0:	2b01      	cmp	r3, #1
240027c2:	d031      	beq.n	24002828 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
240027c4:	693b      	ldr	r3, [r7, #16]
240027c6:	f003 0203 	and.w	r2, r3, #3
240027ca:	687b      	ldr	r3, [r7, #4]
240027cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
240027ce:	429a      	cmp	r2, r3
240027d0:	d12a      	bne.n	24002828 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
240027d2:	693b      	ldr	r3, [r7, #16]
240027d4:	091b      	lsrs	r3, r3, #4
240027d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
240027da:	687b      	ldr	r3, [r7, #4]
240027dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
240027de:	429a      	cmp	r2, r3
240027e0:	d122      	bne.n	24002828 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
240027e2:	68fb      	ldr	r3, [r7, #12]
240027e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
240027e8:	687b      	ldr	r3, [r7, #4]
240027ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240027ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
240027ee:	429a      	cmp	r2, r3
240027f0:	d11a      	bne.n	24002828 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
240027f2:	68fb      	ldr	r3, [r7, #12]
240027f4:	0a5b      	lsrs	r3, r3, #9
240027f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
240027fa:	687b      	ldr	r3, [r7, #4]
240027fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240027fe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
24002800:	429a      	cmp	r2, r3
24002802:	d111      	bne.n	24002828 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
24002804:	68fb      	ldr	r3, [r7, #12]
24002806:	0c1b      	lsrs	r3, r3, #16
24002808:	f003 027f 	and.w	r2, r3, #127	; 0x7f
2400280c:	687b      	ldr	r3, [r7, #4]
2400280e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24002810:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
24002812:	429a      	cmp	r2, r3
24002814:	d108      	bne.n	24002828 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
24002816:	68fb      	ldr	r3, [r7, #12]
24002818:	0e1b      	lsrs	r3, r3, #24
2400281a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
2400281e:	687b      	ldr	r3, [r7, #4]
24002820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24002822:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
24002824:	429a      	cmp	r2, r3
24002826:	d001      	beq.n	2400282c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
24002828:	2301      	movs	r3, #1
2400282a:	e02b      	b.n	24002884 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
2400282c:	4b17      	ldr	r3, [pc, #92]	; (2400288c <HAL_RCC_OscConfig+0x7ac>)
2400282e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24002830:	08db      	lsrs	r3, r3, #3
24002832:	f3c3 030c 	ubfx	r3, r3, #0, #13
24002836:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
24002838:	687b      	ldr	r3, [r7, #4]
2400283a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2400283c:	693a      	ldr	r2, [r7, #16]
2400283e:	429a      	cmp	r2, r3
24002840:	d01f      	beq.n	24002882 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
24002842:	4b12      	ldr	r3, [pc, #72]	; (2400288c <HAL_RCC_OscConfig+0x7ac>)
24002844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24002846:	4a11      	ldr	r2, [pc, #68]	; (2400288c <HAL_RCC_OscConfig+0x7ac>)
24002848:	f023 0301 	bic.w	r3, r3, #1
2400284c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
2400284e:	f7fe fa25 	bl	24000c9c <HAL_GetTick>
24002852:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
24002854:	bf00      	nop
24002856:	f7fe fa21 	bl	24000c9c <HAL_GetTick>
2400285a:	4602      	mov	r2, r0
2400285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2400285e:	4293      	cmp	r3, r2
24002860:	d0f9      	beq.n	24002856 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24002862:	4b0a      	ldr	r3, [pc, #40]	; (2400288c <HAL_RCC_OscConfig+0x7ac>)
24002864:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24002866:	4b0a      	ldr	r3, [pc, #40]	; (24002890 <HAL_RCC_OscConfig+0x7b0>)
24002868:	4013      	ands	r3, r2
2400286a:	687a      	ldr	r2, [r7, #4]
2400286c:	6c92      	ldr	r2, [r2, #72]	; 0x48
2400286e:	00d2      	lsls	r2, r2, #3
24002870:	4906      	ldr	r1, [pc, #24]	; (2400288c <HAL_RCC_OscConfig+0x7ac>)
24002872:	4313      	orrs	r3, r2
24002874:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
24002876:	4b05      	ldr	r3, [pc, #20]	; (2400288c <HAL_RCC_OscConfig+0x7ac>)
24002878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400287a:	4a04      	ldr	r2, [pc, #16]	; (2400288c <HAL_RCC_OscConfig+0x7ac>)
2400287c:	f043 0301 	orr.w	r3, r3, #1
24002880:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
24002882:	2300      	movs	r3, #0
}
24002884:	4618      	mov	r0, r3
24002886:	3730      	adds	r7, #48	; 0x30
24002888:	46bd      	mov	sp, r7
2400288a:	bd80      	pop	{r7, pc}
2400288c:	58024400 	.word	0x58024400
24002890:	ffff0007 	.word	0xffff0007

24002894 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
24002894:	b580      	push	{r7, lr}
24002896:	b086      	sub	sp, #24
24002898:	af00      	add	r7, sp, #0
2400289a:	6078      	str	r0, [r7, #4]
2400289c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
2400289e:	687b      	ldr	r3, [r7, #4]
240028a0:	2b00      	cmp	r3, #0
240028a2:	d101      	bne.n	240028a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
240028a4:	2301      	movs	r3, #1
240028a6:	e19c      	b.n	24002be2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
240028a8:	4b8a      	ldr	r3, [pc, #552]	; (24002ad4 <HAL_RCC_ClockConfig+0x240>)
240028aa:	681b      	ldr	r3, [r3, #0]
240028ac:	f003 030f 	and.w	r3, r3, #15
240028b0:	683a      	ldr	r2, [r7, #0]
240028b2:	429a      	cmp	r2, r3
240028b4:	d910      	bls.n	240028d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
240028b6:	4b87      	ldr	r3, [pc, #540]	; (24002ad4 <HAL_RCC_ClockConfig+0x240>)
240028b8:	681b      	ldr	r3, [r3, #0]
240028ba:	f023 020f 	bic.w	r2, r3, #15
240028be:	4985      	ldr	r1, [pc, #532]	; (24002ad4 <HAL_RCC_ClockConfig+0x240>)
240028c0:	683b      	ldr	r3, [r7, #0]
240028c2:	4313      	orrs	r3, r2
240028c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
240028c6:	4b83      	ldr	r3, [pc, #524]	; (24002ad4 <HAL_RCC_ClockConfig+0x240>)
240028c8:	681b      	ldr	r3, [r3, #0]
240028ca:	f003 030f 	and.w	r3, r3, #15
240028ce:	683a      	ldr	r2, [r7, #0]
240028d0:	429a      	cmp	r2, r3
240028d2:	d001      	beq.n	240028d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
240028d4:	2301      	movs	r3, #1
240028d6:	e184      	b.n	24002be2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
240028d8:	687b      	ldr	r3, [r7, #4]
240028da:	681b      	ldr	r3, [r3, #0]
240028dc:	f003 0304 	and.w	r3, r3, #4
240028e0:	2b00      	cmp	r3, #0
240028e2:	d010      	beq.n	24002906 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
240028e4:	687b      	ldr	r3, [r7, #4]
240028e6:	691a      	ldr	r2, [r3, #16]
240028e8:	4b7b      	ldr	r3, [pc, #492]	; (24002ad8 <HAL_RCC_ClockConfig+0x244>)
240028ea:	699b      	ldr	r3, [r3, #24]
240028ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
240028f0:	429a      	cmp	r2, r3
240028f2:	d908      	bls.n	24002906 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
240028f4:	4b78      	ldr	r3, [pc, #480]	; (24002ad8 <HAL_RCC_ClockConfig+0x244>)
240028f6:	699b      	ldr	r3, [r3, #24]
240028f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
240028fc:	687b      	ldr	r3, [r7, #4]
240028fe:	691b      	ldr	r3, [r3, #16]
24002900:	4975      	ldr	r1, [pc, #468]	; (24002ad8 <HAL_RCC_ClockConfig+0x244>)
24002902:	4313      	orrs	r3, r2
24002904:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
24002906:	687b      	ldr	r3, [r7, #4]
24002908:	681b      	ldr	r3, [r3, #0]
2400290a:	f003 0308 	and.w	r3, r3, #8
2400290e:	2b00      	cmp	r3, #0
24002910:	d010      	beq.n	24002934 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
24002912:	687b      	ldr	r3, [r7, #4]
24002914:	695a      	ldr	r2, [r3, #20]
24002916:	4b70      	ldr	r3, [pc, #448]	; (24002ad8 <HAL_RCC_ClockConfig+0x244>)
24002918:	69db      	ldr	r3, [r3, #28]
2400291a:	f003 0370 	and.w	r3, r3, #112	; 0x70
2400291e:	429a      	cmp	r2, r3
24002920:	d908      	bls.n	24002934 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
24002922:	4b6d      	ldr	r3, [pc, #436]	; (24002ad8 <HAL_RCC_ClockConfig+0x244>)
24002924:	69db      	ldr	r3, [r3, #28]
24002926:	f023 0270 	bic.w	r2, r3, #112	; 0x70
2400292a:	687b      	ldr	r3, [r7, #4]
2400292c:	695b      	ldr	r3, [r3, #20]
2400292e:	496a      	ldr	r1, [pc, #424]	; (24002ad8 <HAL_RCC_ClockConfig+0x244>)
24002930:	4313      	orrs	r3, r2
24002932:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
24002934:	687b      	ldr	r3, [r7, #4]
24002936:	681b      	ldr	r3, [r3, #0]
24002938:	f003 0310 	and.w	r3, r3, #16
2400293c:	2b00      	cmp	r3, #0
2400293e:	d010      	beq.n	24002962 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
24002940:	687b      	ldr	r3, [r7, #4]
24002942:	699a      	ldr	r2, [r3, #24]
24002944:	4b64      	ldr	r3, [pc, #400]	; (24002ad8 <HAL_RCC_ClockConfig+0x244>)
24002946:	69db      	ldr	r3, [r3, #28]
24002948:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
2400294c:	429a      	cmp	r2, r3
2400294e:	d908      	bls.n	24002962 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
24002950:	4b61      	ldr	r3, [pc, #388]	; (24002ad8 <HAL_RCC_ClockConfig+0x244>)
24002952:	69db      	ldr	r3, [r3, #28]
24002954:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
24002958:	687b      	ldr	r3, [r7, #4]
2400295a:	699b      	ldr	r3, [r3, #24]
2400295c:	495e      	ldr	r1, [pc, #376]	; (24002ad8 <HAL_RCC_ClockConfig+0x244>)
2400295e:	4313      	orrs	r3, r2
24002960:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
24002962:	687b      	ldr	r3, [r7, #4]
24002964:	681b      	ldr	r3, [r3, #0]
24002966:	f003 0320 	and.w	r3, r3, #32
2400296a:	2b00      	cmp	r3, #0
2400296c:	d010      	beq.n	24002990 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
2400296e:	687b      	ldr	r3, [r7, #4]
24002970:	69da      	ldr	r2, [r3, #28]
24002972:	4b59      	ldr	r3, [pc, #356]	; (24002ad8 <HAL_RCC_ClockConfig+0x244>)
24002974:	6a1b      	ldr	r3, [r3, #32]
24002976:	f003 0370 	and.w	r3, r3, #112	; 0x70
2400297a:	429a      	cmp	r2, r3
2400297c:	d908      	bls.n	24002990 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
2400297e:	4b56      	ldr	r3, [pc, #344]	; (24002ad8 <HAL_RCC_ClockConfig+0x244>)
24002980:	6a1b      	ldr	r3, [r3, #32]
24002982:	f023 0270 	bic.w	r2, r3, #112	; 0x70
24002986:	687b      	ldr	r3, [r7, #4]
24002988:	69db      	ldr	r3, [r3, #28]
2400298a:	4953      	ldr	r1, [pc, #332]	; (24002ad8 <HAL_RCC_ClockConfig+0x244>)
2400298c:	4313      	orrs	r3, r2
2400298e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
24002990:	687b      	ldr	r3, [r7, #4]
24002992:	681b      	ldr	r3, [r3, #0]
24002994:	f003 0302 	and.w	r3, r3, #2
24002998:	2b00      	cmp	r3, #0
2400299a:	d010      	beq.n	240029be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
2400299c:	687b      	ldr	r3, [r7, #4]
2400299e:	68da      	ldr	r2, [r3, #12]
240029a0:	4b4d      	ldr	r3, [pc, #308]	; (24002ad8 <HAL_RCC_ClockConfig+0x244>)
240029a2:	699b      	ldr	r3, [r3, #24]
240029a4:	f003 030f 	and.w	r3, r3, #15
240029a8:	429a      	cmp	r2, r3
240029aa:	d908      	bls.n	240029be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
240029ac:	4b4a      	ldr	r3, [pc, #296]	; (24002ad8 <HAL_RCC_ClockConfig+0x244>)
240029ae:	699b      	ldr	r3, [r3, #24]
240029b0:	f023 020f 	bic.w	r2, r3, #15
240029b4:	687b      	ldr	r3, [r7, #4]
240029b6:	68db      	ldr	r3, [r3, #12]
240029b8:	4947      	ldr	r1, [pc, #284]	; (24002ad8 <HAL_RCC_ClockConfig+0x244>)
240029ba:	4313      	orrs	r3, r2
240029bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
240029be:	687b      	ldr	r3, [r7, #4]
240029c0:	681b      	ldr	r3, [r3, #0]
240029c2:	f003 0301 	and.w	r3, r3, #1
240029c6:	2b00      	cmp	r3, #0
240029c8:	d055      	beq.n	24002a76 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
240029ca:	4b43      	ldr	r3, [pc, #268]	; (24002ad8 <HAL_RCC_ClockConfig+0x244>)
240029cc:	699b      	ldr	r3, [r3, #24]
240029ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
240029d2:	687b      	ldr	r3, [r7, #4]
240029d4:	689b      	ldr	r3, [r3, #8]
240029d6:	4940      	ldr	r1, [pc, #256]	; (24002ad8 <HAL_RCC_ClockConfig+0x244>)
240029d8:	4313      	orrs	r3, r2
240029da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
240029dc:	687b      	ldr	r3, [r7, #4]
240029de:	685b      	ldr	r3, [r3, #4]
240029e0:	2b02      	cmp	r3, #2
240029e2:	d107      	bne.n	240029f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
240029e4:	4b3c      	ldr	r3, [pc, #240]	; (24002ad8 <HAL_RCC_ClockConfig+0x244>)
240029e6:	681b      	ldr	r3, [r3, #0]
240029e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
240029ec:	2b00      	cmp	r3, #0
240029ee:	d121      	bne.n	24002a34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
240029f0:	2301      	movs	r3, #1
240029f2:	e0f6      	b.n	24002be2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
240029f4:	687b      	ldr	r3, [r7, #4]
240029f6:	685b      	ldr	r3, [r3, #4]
240029f8:	2b03      	cmp	r3, #3
240029fa:	d107      	bne.n	24002a0c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
240029fc:	4b36      	ldr	r3, [pc, #216]	; (24002ad8 <HAL_RCC_ClockConfig+0x244>)
240029fe:	681b      	ldr	r3, [r3, #0]
24002a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24002a04:	2b00      	cmp	r3, #0
24002a06:	d115      	bne.n	24002a34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
24002a08:	2301      	movs	r3, #1
24002a0a:	e0ea      	b.n	24002be2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
24002a0c:	687b      	ldr	r3, [r7, #4]
24002a0e:	685b      	ldr	r3, [r3, #4]
24002a10:	2b01      	cmp	r3, #1
24002a12:	d107      	bne.n	24002a24 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24002a14:	4b30      	ldr	r3, [pc, #192]	; (24002ad8 <HAL_RCC_ClockConfig+0x244>)
24002a16:	681b      	ldr	r3, [r3, #0]
24002a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
24002a1c:	2b00      	cmp	r3, #0
24002a1e:	d109      	bne.n	24002a34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
24002a20:	2301      	movs	r3, #1
24002a22:	e0de      	b.n	24002be2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24002a24:	4b2c      	ldr	r3, [pc, #176]	; (24002ad8 <HAL_RCC_ClockConfig+0x244>)
24002a26:	681b      	ldr	r3, [r3, #0]
24002a28:	f003 0304 	and.w	r3, r3, #4
24002a2c:	2b00      	cmp	r3, #0
24002a2e:	d101      	bne.n	24002a34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
24002a30:	2301      	movs	r3, #1
24002a32:	e0d6      	b.n	24002be2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
24002a34:	4b28      	ldr	r3, [pc, #160]	; (24002ad8 <HAL_RCC_ClockConfig+0x244>)
24002a36:	691b      	ldr	r3, [r3, #16]
24002a38:	f023 0207 	bic.w	r2, r3, #7
24002a3c:	687b      	ldr	r3, [r7, #4]
24002a3e:	685b      	ldr	r3, [r3, #4]
24002a40:	4925      	ldr	r1, [pc, #148]	; (24002ad8 <HAL_RCC_ClockConfig+0x244>)
24002a42:	4313      	orrs	r3, r2
24002a44:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24002a46:	f7fe f929 	bl	24000c9c <HAL_GetTick>
24002a4a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
24002a4c:	e00a      	b.n	24002a64 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
24002a4e:	f7fe f925 	bl	24000c9c <HAL_GetTick>
24002a52:	4602      	mov	r2, r0
24002a54:	697b      	ldr	r3, [r7, #20]
24002a56:	1ad3      	subs	r3, r2, r3
24002a58:	f241 3288 	movw	r2, #5000	; 0x1388
24002a5c:	4293      	cmp	r3, r2
24002a5e:	d901      	bls.n	24002a64 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
24002a60:	2303      	movs	r3, #3
24002a62:	e0be      	b.n	24002be2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
24002a64:	4b1c      	ldr	r3, [pc, #112]	; (24002ad8 <HAL_RCC_ClockConfig+0x244>)
24002a66:	691b      	ldr	r3, [r3, #16]
24002a68:	f003 0238 	and.w	r2, r3, #56	; 0x38
24002a6c:	687b      	ldr	r3, [r7, #4]
24002a6e:	685b      	ldr	r3, [r3, #4]
24002a70:	00db      	lsls	r3, r3, #3
24002a72:	429a      	cmp	r2, r3
24002a74:	d1eb      	bne.n	24002a4e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
24002a76:	687b      	ldr	r3, [r7, #4]
24002a78:	681b      	ldr	r3, [r3, #0]
24002a7a:	f003 0302 	and.w	r3, r3, #2
24002a7e:	2b00      	cmp	r3, #0
24002a80:	d010      	beq.n	24002aa4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24002a82:	687b      	ldr	r3, [r7, #4]
24002a84:	68da      	ldr	r2, [r3, #12]
24002a86:	4b14      	ldr	r3, [pc, #80]	; (24002ad8 <HAL_RCC_ClockConfig+0x244>)
24002a88:	699b      	ldr	r3, [r3, #24]
24002a8a:	f003 030f 	and.w	r3, r3, #15
24002a8e:	429a      	cmp	r2, r3
24002a90:	d208      	bcs.n	24002aa4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
24002a92:	4b11      	ldr	r3, [pc, #68]	; (24002ad8 <HAL_RCC_ClockConfig+0x244>)
24002a94:	699b      	ldr	r3, [r3, #24]
24002a96:	f023 020f 	bic.w	r2, r3, #15
24002a9a:	687b      	ldr	r3, [r7, #4]
24002a9c:	68db      	ldr	r3, [r3, #12]
24002a9e:	490e      	ldr	r1, [pc, #56]	; (24002ad8 <HAL_RCC_ClockConfig+0x244>)
24002aa0:	4313      	orrs	r3, r2
24002aa2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
24002aa4:	4b0b      	ldr	r3, [pc, #44]	; (24002ad4 <HAL_RCC_ClockConfig+0x240>)
24002aa6:	681b      	ldr	r3, [r3, #0]
24002aa8:	f003 030f 	and.w	r3, r3, #15
24002aac:	683a      	ldr	r2, [r7, #0]
24002aae:	429a      	cmp	r2, r3
24002ab0:	d214      	bcs.n	24002adc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
24002ab2:	4b08      	ldr	r3, [pc, #32]	; (24002ad4 <HAL_RCC_ClockConfig+0x240>)
24002ab4:	681b      	ldr	r3, [r3, #0]
24002ab6:	f023 020f 	bic.w	r2, r3, #15
24002aba:	4906      	ldr	r1, [pc, #24]	; (24002ad4 <HAL_RCC_ClockConfig+0x240>)
24002abc:	683b      	ldr	r3, [r7, #0]
24002abe:	4313      	orrs	r3, r2
24002ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
24002ac2:	4b04      	ldr	r3, [pc, #16]	; (24002ad4 <HAL_RCC_ClockConfig+0x240>)
24002ac4:	681b      	ldr	r3, [r3, #0]
24002ac6:	f003 030f 	and.w	r3, r3, #15
24002aca:	683a      	ldr	r2, [r7, #0]
24002acc:	429a      	cmp	r2, r3
24002ace:	d005      	beq.n	24002adc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
24002ad0:	2301      	movs	r3, #1
24002ad2:	e086      	b.n	24002be2 <HAL_RCC_ClockConfig+0x34e>
24002ad4:	52002000 	.word	0x52002000
24002ad8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
24002adc:	687b      	ldr	r3, [r7, #4]
24002ade:	681b      	ldr	r3, [r3, #0]
24002ae0:	f003 0304 	and.w	r3, r3, #4
24002ae4:	2b00      	cmp	r3, #0
24002ae6:	d010      	beq.n	24002b0a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
24002ae8:	687b      	ldr	r3, [r7, #4]
24002aea:	691a      	ldr	r2, [r3, #16]
24002aec:	4b3f      	ldr	r3, [pc, #252]	; (24002bec <HAL_RCC_ClockConfig+0x358>)
24002aee:	699b      	ldr	r3, [r3, #24]
24002af0:	f003 0370 	and.w	r3, r3, #112	; 0x70
24002af4:	429a      	cmp	r2, r3
24002af6:	d208      	bcs.n	24002b0a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
24002af8:	4b3c      	ldr	r3, [pc, #240]	; (24002bec <HAL_RCC_ClockConfig+0x358>)
24002afa:	699b      	ldr	r3, [r3, #24]
24002afc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
24002b00:	687b      	ldr	r3, [r7, #4]
24002b02:	691b      	ldr	r3, [r3, #16]
24002b04:	4939      	ldr	r1, [pc, #228]	; (24002bec <HAL_RCC_ClockConfig+0x358>)
24002b06:	4313      	orrs	r3, r2
24002b08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
24002b0a:	687b      	ldr	r3, [r7, #4]
24002b0c:	681b      	ldr	r3, [r3, #0]
24002b0e:	f003 0308 	and.w	r3, r3, #8
24002b12:	2b00      	cmp	r3, #0
24002b14:	d010      	beq.n	24002b38 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
24002b16:	687b      	ldr	r3, [r7, #4]
24002b18:	695a      	ldr	r2, [r3, #20]
24002b1a:	4b34      	ldr	r3, [pc, #208]	; (24002bec <HAL_RCC_ClockConfig+0x358>)
24002b1c:	69db      	ldr	r3, [r3, #28]
24002b1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
24002b22:	429a      	cmp	r2, r3
24002b24:	d208      	bcs.n	24002b38 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
24002b26:	4b31      	ldr	r3, [pc, #196]	; (24002bec <HAL_RCC_ClockConfig+0x358>)
24002b28:	69db      	ldr	r3, [r3, #28]
24002b2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
24002b2e:	687b      	ldr	r3, [r7, #4]
24002b30:	695b      	ldr	r3, [r3, #20]
24002b32:	492e      	ldr	r1, [pc, #184]	; (24002bec <HAL_RCC_ClockConfig+0x358>)
24002b34:	4313      	orrs	r3, r2
24002b36:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
24002b38:	687b      	ldr	r3, [r7, #4]
24002b3a:	681b      	ldr	r3, [r3, #0]
24002b3c:	f003 0310 	and.w	r3, r3, #16
24002b40:	2b00      	cmp	r3, #0
24002b42:	d010      	beq.n	24002b66 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
24002b44:	687b      	ldr	r3, [r7, #4]
24002b46:	699a      	ldr	r2, [r3, #24]
24002b48:	4b28      	ldr	r3, [pc, #160]	; (24002bec <HAL_RCC_ClockConfig+0x358>)
24002b4a:	69db      	ldr	r3, [r3, #28]
24002b4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
24002b50:	429a      	cmp	r2, r3
24002b52:	d208      	bcs.n	24002b66 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
24002b54:	4b25      	ldr	r3, [pc, #148]	; (24002bec <HAL_RCC_ClockConfig+0x358>)
24002b56:	69db      	ldr	r3, [r3, #28]
24002b58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
24002b5c:	687b      	ldr	r3, [r7, #4]
24002b5e:	699b      	ldr	r3, [r3, #24]
24002b60:	4922      	ldr	r1, [pc, #136]	; (24002bec <HAL_RCC_ClockConfig+0x358>)
24002b62:	4313      	orrs	r3, r2
24002b64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
24002b66:	687b      	ldr	r3, [r7, #4]
24002b68:	681b      	ldr	r3, [r3, #0]
24002b6a:	f003 0320 	and.w	r3, r3, #32
24002b6e:	2b00      	cmp	r3, #0
24002b70:	d010      	beq.n	24002b94 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
24002b72:	687b      	ldr	r3, [r7, #4]
24002b74:	69da      	ldr	r2, [r3, #28]
24002b76:	4b1d      	ldr	r3, [pc, #116]	; (24002bec <HAL_RCC_ClockConfig+0x358>)
24002b78:	6a1b      	ldr	r3, [r3, #32]
24002b7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
24002b7e:	429a      	cmp	r2, r3
24002b80:	d208      	bcs.n	24002b94 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
24002b82:	4b1a      	ldr	r3, [pc, #104]	; (24002bec <HAL_RCC_ClockConfig+0x358>)
24002b84:	6a1b      	ldr	r3, [r3, #32]
24002b86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
24002b8a:	687b      	ldr	r3, [r7, #4]
24002b8c:	69db      	ldr	r3, [r3, #28]
24002b8e:	4917      	ldr	r1, [pc, #92]	; (24002bec <HAL_RCC_ClockConfig+0x358>)
24002b90:	4313      	orrs	r3, r2
24002b92:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24002b94:	f000 f834 	bl	24002c00 <HAL_RCC_GetSysClockFreq>
24002b98:	4602      	mov	r2, r0
24002b9a:	4b14      	ldr	r3, [pc, #80]	; (24002bec <HAL_RCC_ClockConfig+0x358>)
24002b9c:	699b      	ldr	r3, [r3, #24]
24002b9e:	0a1b      	lsrs	r3, r3, #8
24002ba0:	f003 030f 	and.w	r3, r3, #15
24002ba4:	4912      	ldr	r1, [pc, #72]	; (24002bf0 <HAL_RCC_ClockConfig+0x35c>)
24002ba6:	5ccb      	ldrb	r3, [r1, r3]
24002ba8:	f003 031f 	and.w	r3, r3, #31
24002bac:	fa22 f303 	lsr.w	r3, r2, r3
24002bb0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24002bb2:	4b0e      	ldr	r3, [pc, #56]	; (24002bec <HAL_RCC_ClockConfig+0x358>)
24002bb4:	699b      	ldr	r3, [r3, #24]
24002bb6:	f003 030f 	and.w	r3, r3, #15
24002bba:	4a0d      	ldr	r2, [pc, #52]	; (24002bf0 <HAL_RCC_ClockConfig+0x35c>)
24002bbc:	5cd3      	ldrb	r3, [r2, r3]
24002bbe:	f003 031f 	and.w	r3, r3, #31
24002bc2:	693a      	ldr	r2, [r7, #16]
24002bc4:	fa22 f303 	lsr.w	r3, r2, r3
24002bc8:	4a0a      	ldr	r2, [pc, #40]	; (24002bf4 <HAL_RCC_ClockConfig+0x360>)
24002bca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24002bcc:	4a0a      	ldr	r2, [pc, #40]	; (24002bf8 <HAL_RCC_ClockConfig+0x364>)
24002bce:	693b      	ldr	r3, [r7, #16]
24002bd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
24002bd2:	4b0a      	ldr	r3, [pc, #40]	; (24002bfc <HAL_RCC_ClockConfig+0x368>)
24002bd4:	681b      	ldr	r3, [r3, #0]
24002bd6:	4618      	mov	r0, r3
24002bd8:	f7fe f816 	bl	24000c08 <HAL_InitTick>
24002bdc:	4603      	mov	r3, r0
24002bde:	73fb      	strb	r3, [r7, #15]

  return halstatus;
24002be0:	7bfb      	ldrb	r3, [r7, #15]
}
24002be2:	4618      	mov	r0, r3
24002be4:	3718      	adds	r7, #24
24002be6:	46bd      	mov	sp, r7
24002be8:	bd80      	pop	{r7, pc}
24002bea:	bf00      	nop
24002bec:	58024400 	.word	0x58024400
24002bf0:	24004634 	.word	0x24004634
24002bf4:	240002d8 	.word	0x240002d8
24002bf8:	240002d4 	.word	0x240002d4
24002bfc:	240002dc 	.word	0x240002dc

24002c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
24002c00:	b480      	push	{r7}
24002c02:	b089      	sub	sp, #36	; 0x24
24002c04:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
24002c06:	4bb3      	ldr	r3, [pc, #716]	; (24002ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
24002c08:	691b      	ldr	r3, [r3, #16]
24002c0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
24002c0e:	2b18      	cmp	r3, #24
24002c10:	f200 8155 	bhi.w	24002ebe <HAL_RCC_GetSysClockFreq+0x2be>
24002c14:	a201      	add	r2, pc, #4	; (adr r2, 24002c1c <HAL_RCC_GetSysClockFreq+0x1c>)
24002c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24002c1a:	bf00      	nop
24002c1c:	24002c81 	.word	0x24002c81
24002c20:	24002ebf 	.word	0x24002ebf
24002c24:	24002ebf 	.word	0x24002ebf
24002c28:	24002ebf 	.word	0x24002ebf
24002c2c:	24002ebf 	.word	0x24002ebf
24002c30:	24002ebf 	.word	0x24002ebf
24002c34:	24002ebf 	.word	0x24002ebf
24002c38:	24002ebf 	.word	0x24002ebf
24002c3c:	24002ca7 	.word	0x24002ca7
24002c40:	24002ebf 	.word	0x24002ebf
24002c44:	24002ebf 	.word	0x24002ebf
24002c48:	24002ebf 	.word	0x24002ebf
24002c4c:	24002ebf 	.word	0x24002ebf
24002c50:	24002ebf 	.word	0x24002ebf
24002c54:	24002ebf 	.word	0x24002ebf
24002c58:	24002ebf 	.word	0x24002ebf
24002c5c:	24002cad 	.word	0x24002cad
24002c60:	24002ebf 	.word	0x24002ebf
24002c64:	24002ebf 	.word	0x24002ebf
24002c68:	24002ebf 	.word	0x24002ebf
24002c6c:	24002ebf 	.word	0x24002ebf
24002c70:	24002ebf 	.word	0x24002ebf
24002c74:	24002ebf 	.word	0x24002ebf
24002c78:	24002ebf 	.word	0x24002ebf
24002c7c:	24002cb3 	.word	0x24002cb3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24002c80:	4b94      	ldr	r3, [pc, #592]	; (24002ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
24002c82:	681b      	ldr	r3, [r3, #0]
24002c84:	f003 0320 	and.w	r3, r3, #32
24002c88:	2b00      	cmp	r3, #0
24002c8a:	d009      	beq.n	24002ca0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24002c8c:	4b91      	ldr	r3, [pc, #580]	; (24002ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
24002c8e:	681b      	ldr	r3, [r3, #0]
24002c90:	08db      	lsrs	r3, r3, #3
24002c92:	f003 0303 	and.w	r3, r3, #3
24002c96:	4a90      	ldr	r2, [pc, #576]	; (24002ed8 <HAL_RCC_GetSysClockFreq+0x2d8>)
24002c98:	fa22 f303 	lsr.w	r3, r2, r3
24002c9c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
24002c9e:	e111      	b.n	24002ec4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
24002ca0:	4b8d      	ldr	r3, [pc, #564]	; (24002ed8 <HAL_RCC_GetSysClockFreq+0x2d8>)
24002ca2:	61bb      	str	r3, [r7, #24]
      break;
24002ca4:	e10e      	b.n	24002ec4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
24002ca6:	4b8d      	ldr	r3, [pc, #564]	; (24002edc <HAL_RCC_GetSysClockFreq+0x2dc>)
24002ca8:	61bb      	str	r3, [r7, #24]
      break;
24002caa:	e10b      	b.n	24002ec4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
24002cac:	4b8c      	ldr	r3, [pc, #560]	; (24002ee0 <HAL_RCC_GetSysClockFreq+0x2e0>)
24002cae:	61bb      	str	r3, [r7, #24]
      break;
24002cb0:	e108      	b.n	24002ec4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24002cb2:	4b88      	ldr	r3, [pc, #544]	; (24002ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
24002cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24002cb6:	f003 0303 	and.w	r3, r3, #3
24002cba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
24002cbc:	4b85      	ldr	r3, [pc, #532]	; (24002ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
24002cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24002cc0:	091b      	lsrs	r3, r3, #4
24002cc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24002cc6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
24002cc8:	4b82      	ldr	r3, [pc, #520]	; (24002ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
24002cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24002ccc:	f003 0301 	and.w	r3, r3, #1
24002cd0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24002cd2:	4b80      	ldr	r3, [pc, #512]	; (24002ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
24002cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24002cd6:	08db      	lsrs	r3, r3, #3
24002cd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
24002cdc:	68fa      	ldr	r2, [r7, #12]
24002cde:	fb02 f303 	mul.w	r3, r2, r3
24002ce2:	ee07 3a90 	vmov	s15, r3
24002ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
24002cea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
24002cee:	693b      	ldr	r3, [r7, #16]
24002cf0:	2b00      	cmp	r3, #0
24002cf2:	f000 80e1 	beq.w	24002eb8 <HAL_RCC_GetSysClockFreq+0x2b8>
24002cf6:	697b      	ldr	r3, [r7, #20]
24002cf8:	2b02      	cmp	r3, #2
24002cfa:	f000 8083 	beq.w	24002e04 <HAL_RCC_GetSysClockFreq+0x204>
24002cfe:	697b      	ldr	r3, [r7, #20]
24002d00:	2b02      	cmp	r3, #2
24002d02:	f200 80a1 	bhi.w	24002e48 <HAL_RCC_GetSysClockFreq+0x248>
24002d06:	697b      	ldr	r3, [r7, #20]
24002d08:	2b00      	cmp	r3, #0
24002d0a:	d003      	beq.n	24002d14 <HAL_RCC_GetSysClockFreq+0x114>
24002d0c:	697b      	ldr	r3, [r7, #20]
24002d0e:	2b01      	cmp	r3, #1
24002d10:	d056      	beq.n	24002dc0 <HAL_RCC_GetSysClockFreq+0x1c0>
24002d12:	e099      	b.n	24002e48 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24002d14:	4b6f      	ldr	r3, [pc, #444]	; (24002ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
24002d16:	681b      	ldr	r3, [r3, #0]
24002d18:	f003 0320 	and.w	r3, r3, #32
24002d1c:	2b00      	cmp	r3, #0
24002d1e:	d02d      	beq.n	24002d7c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24002d20:	4b6c      	ldr	r3, [pc, #432]	; (24002ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
24002d22:	681b      	ldr	r3, [r3, #0]
24002d24:	08db      	lsrs	r3, r3, #3
24002d26:	f003 0303 	and.w	r3, r3, #3
24002d2a:	4a6b      	ldr	r2, [pc, #428]	; (24002ed8 <HAL_RCC_GetSysClockFreq+0x2d8>)
24002d2c:	fa22 f303 	lsr.w	r3, r2, r3
24002d30:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24002d32:	687b      	ldr	r3, [r7, #4]
24002d34:	ee07 3a90 	vmov	s15, r3
24002d38:	eef8 6a67 	vcvt.f32.u32	s13, s15
24002d3c:	693b      	ldr	r3, [r7, #16]
24002d3e:	ee07 3a90 	vmov	s15, r3
24002d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
24002d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24002d4a:	4b62      	ldr	r3, [pc, #392]	; (24002ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
24002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24002d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
24002d52:	ee07 3a90 	vmov	s15, r3
24002d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
24002d5a:	ed97 6a02 	vldr	s12, [r7, #8]
24002d5e:	eddf 5a61 	vldr	s11, [pc, #388]	; 24002ee4 <HAL_RCC_GetSysClockFreq+0x2e4>
24002d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
24002d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
24002d6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24002d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
24002d72:	ee67 7a27 	vmul.f32	s15, s14, s15
24002d76:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
24002d7a:	e087      	b.n	24002e8c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24002d7c:	693b      	ldr	r3, [r7, #16]
24002d7e:	ee07 3a90 	vmov	s15, r3
24002d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
24002d86:	eddf 6a58 	vldr	s13, [pc, #352]	; 24002ee8 <HAL_RCC_GetSysClockFreq+0x2e8>
24002d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24002d8e:	4b51      	ldr	r3, [pc, #324]	; (24002ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
24002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24002d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
24002d96:	ee07 3a90 	vmov	s15, r3
24002d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
24002d9e:	ed97 6a02 	vldr	s12, [r7, #8]
24002da2:	eddf 5a50 	vldr	s11, [pc, #320]	; 24002ee4 <HAL_RCC_GetSysClockFreq+0x2e4>
24002da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
24002daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
24002dae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24002db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
24002db6:	ee67 7a27 	vmul.f32	s15, s14, s15
24002dba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
24002dbe:	e065      	b.n	24002e8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24002dc0:	693b      	ldr	r3, [r7, #16]
24002dc2:	ee07 3a90 	vmov	s15, r3
24002dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
24002dca:	eddf 6a48 	vldr	s13, [pc, #288]	; 24002eec <HAL_RCC_GetSysClockFreq+0x2ec>
24002dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24002dd2:	4b40      	ldr	r3, [pc, #256]	; (24002ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
24002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24002dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
24002dda:	ee07 3a90 	vmov	s15, r3
24002dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
24002de2:	ed97 6a02 	vldr	s12, [r7, #8]
24002de6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 24002ee4 <HAL_RCC_GetSysClockFreq+0x2e4>
24002dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
24002dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
24002df2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24002df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
24002dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
24002dfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
24002e02:	e043      	b.n	24002e8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24002e04:	693b      	ldr	r3, [r7, #16]
24002e06:	ee07 3a90 	vmov	s15, r3
24002e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
24002e0e:	eddf 6a38 	vldr	s13, [pc, #224]	; 24002ef0 <HAL_RCC_GetSysClockFreq+0x2f0>
24002e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24002e16:	4b2f      	ldr	r3, [pc, #188]	; (24002ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
24002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24002e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
24002e1e:	ee07 3a90 	vmov	s15, r3
24002e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
24002e26:	ed97 6a02 	vldr	s12, [r7, #8]
24002e2a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 24002ee4 <HAL_RCC_GetSysClockFreq+0x2e4>
24002e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
24002e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
24002e36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24002e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
24002e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
24002e42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
24002e46:	e021      	b.n	24002e8c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24002e48:	693b      	ldr	r3, [r7, #16]
24002e4a:	ee07 3a90 	vmov	s15, r3
24002e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
24002e52:	eddf 6a26 	vldr	s13, [pc, #152]	; 24002eec <HAL_RCC_GetSysClockFreq+0x2ec>
24002e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24002e5a:	4b1e      	ldr	r3, [pc, #120]	; (24002ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
24002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24002e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
24002e62:	ee07 3a90 	vmov	s15, r3
24002e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
24002e6a:	ed97 6a02 	vldr	s12, [r7, #8]
24002e6e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 24002ee4 <HAL_RCC_GetSysClockFreq+0x2e4>
24002e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
24002e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
24002e7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24002e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
24002e82:	ee67 7a27 	vmul.f32	s15, s14, s15
24002e86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
24002e8a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
24002e8c:	4b11      	ldr	r3, [pc, #68]	; (24002ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
24002e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24002e90:	0a5b      	lsrs	r3, r3, #9
24002e92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24002e96:	3301      	adds	r3, #1
24002e98:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
24002e9a:	683b      	ldr	r3, [r7, #0]
24002e9c:	ee07 3a90 	vmov	s15, r3
24002ea0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
24002ea4:	edd7 6a07 	vldr	s13, [r7, #28]
24002ea8:	eec6 7a87 	vdiv.f32	s15, s13, s14
24002eac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24002eb0:	ee17 3a90 	vmov	r3, s15
24002eb4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
24002eb6:	e005      	b.n	24002ec4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
24002eb8:	2300      	movs	r3, #0
24002eba:	61bb      	str	r3, [r7, #24]
      break;
24002ebc:	e002      	b.n	24002ec4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
24002ebe:	4b07      	ldr	r3, [pc, #28]	; (24002edc <HAL_RCC_GetSysClockFreq+0x2dc>)
24002ec0:	61bb      	str	r3, [r7, #24]
      break;
24002ec2:	bf00      	nop
  }

  return sysclockfreq;
24002ec4:	69bb      	ldr	r3, [r7, #24]
}
24002ec6:	4618      	mov	r0, r3
24002ec8:	3724      	adds	r7, #36	; 0x24
24002eca:	46bd      	mov	sp, r7
24002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
24002ed0:	4770      	bx	lr
24002ed2:	bf00      	nop
24002ed4:	58024400 	.word	0x58024400
24002ed8:	03d09000 	.word	0x03d09000
24002edc:	003d0900 	.word	0x003d0900
24002ee0:	017d7840 	.word	0x017d7840
24002ee4:	46000000 	.word	0x46000000
24002ee8:	4c742400 	.word	0x4c742400
24002eec:	4a742400 	.word	0x4a742400
24002ef0:	4bbebc20 	.word	0x4bbebc20

24002ef4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
24002ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
24002ef8:	b0c6      	sub	sp, #280	; 0x118
24002efa:	af00      	add	r7, sp, #0
24002efc:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
24002f00:	2300      	movs	r3, #0
24002f02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
24002f06:	2300      	movs	r3, #0
24002f08:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
24002f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24002f10:	e9d3 2300 	ldrd	r2, r3, [r3]
24002f14:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
24002f18:	2500      	movs	r5, #0
24002f1a:	ea54 0305 	orrs.w	r3, r4, r5
24002f1e:	d049      	beq.n	24002fb4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
24002f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24002f24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24002f26:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
24002f2a:	d02f      	beq.n	24002f8c <HAL_RCCEx_PeriphCLKConfig+0x98>
24002f2c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
24002f30:	d828      	bhi.n	24002f84 <HAL_RCCEx_PeriphCLKConfig+0x90>
24002f32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24002f36:	d01a      	beq.n	24002f6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
24002f38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24002f3c:	d822      	bhi.n	24002f84 <HAL_RCCEx_PeriphCLKConfig+0x90>
24002f3e:	2b00      	cmp	r3, #0
24002f40:	d003      	beq.n	24002f4a <HAL_RCCEx_PeriphCLKConfig+0x56>
24002f42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
24002f46:	d007      	beq.n	24002f58 <HAL_RCCEx_PeriphCLKConfig+0x64>
24002f48:	e01c      	b.n	24002f84 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24002f4a:	4bab      	ldr	r3, [pc, #684]	; (240031f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
24002f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24002f4e:	4aaa      	ldr	r2, [pc, #680]	; (240031f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
24002f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24002f54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
24002f56:	e01a      	b.n	24002f8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24002f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24002f5c:	3308      	adds	r3, #8
24002f5e:	2102      	movs	r1, #2
24002f60:	4618      	mov	r0, r3
24002f62:	f001 f967 	bl	24004234 <RCCEx_PLL2_Config>
24002f66:	4603      	mov	r3, r0
24002f68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
24002f6c:	e00f      	b.n	24002f8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24002f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24002f72:	3328      	adds	r3, #40	; 0x28
24002f74:	2102      	movs	r1, #2
24002f76:	4618      	mov	r0, r3
24002f78:	f001 fa0e 	bl	24004398 <RCCEx_PLL3_Config>
24002f7c:	4603      	mov	r3, r0
24002f7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
24002f82:	e004      	b.n	24002f8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
24002f84:	2301      	movs	r3, #1
24002f86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
24002f8a:	e000      	b.n	24002f8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
24002f8c:	bf00      	nop
    }

    if (ret == HAL_OK)
24002f8e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24002f92:	2b00      	cmp	r3, #0
24002f94:	d10a      	bne.n	24002fac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
24002f96:	4b98      	ldr	r3, [pc, #608]	; (240031f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
24002f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24002f9a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
24002f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24002fa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24002fa4:	4a94      	ldr	r2, [pc, #592]	; (240031f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
24002fa6:	430b      	orrs	r3, r1
24002fa8:	6513      	str	r3, [r2, #80]	; 0x50
24002faa:	e003      	b.n	24002fb4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
24002fac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24002fb0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
24002fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24002fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
24002fbc:	f402 7880 	and.w	r8, r2, #256	; 0x100
24002fc0:	f04f 0900 	mov.w	r9, #0
24002fc4:	ea58 0309 	orrs.w	r3, r8, r9
24002fc8:	d047      	beq.n	2400305a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
24002fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24002fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24002fd0:	2b04      	cmp	r3, #4
24002fd2:	d82a      	bhi.n	2400302a <HAL_RCCEx_PeriphCLKConfig+0x136>
24002fd4:	a201      	add	r2, pc, #4	; (adr r2, 24002fdc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
24002fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24002fda:	bf00      	nop
24002fdc:	24002ff1 	.word	0x24002ff1
24002fe0:	24002fff 	.word	0x24002fff
24002fe4:	24003015 	.word	0x24003015
24002fe8:	24003033 	.word	0x24003033
24002fec:	24003033 	.word	0x24003033
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24002ff0:	4b81      	ldr	r3, [pc, #516]	; (240031f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
24002ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24002ff4:	4a80      	ldr	r2, [pc, #512]	; (240031f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
24002ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24002ffa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
24002ffc:	e01a      	b.n	24003034 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24002ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003002:	3308      	adds	r3, #8
24003004:	2100      	movs	r1, #0
24003006:	4618      	mov	r0, r3
24003008:	f001 f914 	bl	24004234 <RCCEx_PLL2_Config>
2400300c:	4603      	mov	r3, r0
2400300e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
24003012:	e00f      	b.n	24003034 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24003014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003018:	3328      	adds	r3, #40	; 0x28
2400301a:	2100      	movs	r1, #0
2400301c:	4618      	mov	r0, r3
2400301e:	f001 f9bb 	bl	24004398 <RCCEx_PLL3_Config>
24003022:	4603      	mov	r3, r0
24003024:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
24003028:	e004      	b.n	24003034 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2400302a:	2301      	movs	r3, #1
2400302c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
24003030:	e000      	b.n	24003034 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
24003032:	bf00      	nop
    }

    if (ret == HAL_OK)
24003034:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24003038:	2b00      	cmp	r3, #0
2400303a:	d10a      	bne.n	24003052 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
2400303c:	4b6e      	ldr	r3, [pc, #440]	; (240031f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
2400303e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24003040:	f023 0107 	bic.w	r1, r3, #7
24003044:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2400304a:	4a6b      	ldr	r2, [pc, #428]	; (240031f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
2400304c:	430b      	orrs	r3, r1
2400304e:	6513      	str	r3, [r2, #80]	; 0x50
24003050:	e003      	b.n	2400305a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
24003052:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24003056:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
2400305a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
2400305e:	e9d3 2300 	ldrd	r2, r3, [r3]
24003062:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
24003066:	f04f 0b00 	mov.w	fp, #0
2400306a:	ea5a 030b 	orrs.w	r3, sl, fp
2400306e:	d05b      	beq.n	24003128 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
24003070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003074:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
24003078:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
2400307c:	d03b      	beq.n	240030f6 <HAL_RCCEx_PeriphCLKConfig+0x202>
2400307e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
24003082:	d834      	bhi.n	240030ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
24003084:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
24003088:	d037      	beq.n	240030fa <HAL_RCCEx_PeriphCLKConfig+0x206>
2400308a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
2400308e:	d82e      	bhi.n	240030ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
24003090:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
24003094:	d033      	beq.n	240030fe <HAL_RCCEx_PeriphCLKConfig+0x20a>
24003096:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
2400309a:	d828      	bhi.n	240030ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
2400309c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
240030a0:	d01a      	beq.n	240030d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
240030a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
240030a6:	d822      	bhi.n	240030ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
240030a8:	2b00      	cmp	r3, #0
240030aa:	d003      	beq.n	240030b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
240030ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
240030b0:	d007      	beq.n	240030c2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
240030b2:	e01c      	b.n	240030ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240030b4:	4b50      	ldr	r3, [pc, #320]	; (240031f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
240030b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240030b8:	4a4f      	ldr	r2, [pc, #316]	; (240031f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
240030ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240030be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
240030c0:	e01e      	b.n	24003100 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240030c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
240030c6:	3308      	adds	r3, #8
240030c8:	2100      	movs	r1, #0
240030ca:	4618      	mov	r0, r3
240030cc:	f001 f8b2 	bl	24004234 <RCCEx_PLL2_Config>
240030d0:	4603      	mov	r3, r0
240030d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
240030d6:	e013      	b.n	24003100 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
240030d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
240030dc:	3328      	adds	r3, #40	; 0x28
240030de:	2100      	movs	r1, #0
240030e0:	4618      	mov	r0, r3
240030e2:	f001 f959 	bl	24004398 <RCCEx_PLL3_Config>
240030e6:	4603      	mov	r3, r0
240030e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
240030ec:	e008      	b.n	24003100 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
240030ee:	2301      	movs	r3, #1
240030f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
240030f4:	e004      	b.n	24003100 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
240030f6:	bf00      	nop
240030f8:	e002      	b.n	24003100 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
240030fa:	bf00      	nop
240030fc:	e000      	b.n	24003100 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
240030fe:	bf00      	nop
    }

    if (ret == HAL_OK)
24003100:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24003104:	2b00      	cmp	r3, #0
24003106:	d10b      	bne.n	24003120 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
24003108:	4b3b      	ldr	r3, [pc, #236]	; (240031f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
2400310a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2400310c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
24003110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003114:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
24003118:	4a37      	ldr	r2, [pc, #220]	; (240031f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
2400311a:	430b      	orrs	r3, r1
2400311c:	6593      	str	r3, [r2, #88]	; 0x58
2400311e:	e003      	b.n	24003128 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
24003120:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24003124:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
24003128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
2400312c:	e9d3 2300 	ldrd	r2, r3, [r3]
24003130:	f402 6300 	and.w	r3, r2, #2048	; 0x800
24003134:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
24003138:	2300      	movs	r3, #0
2400313a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
2400313e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
24003142:	460b      	mov	r3, r1
24003144:	4313      	orrs	r3, r2
24003146:	d05d      	beq.n	24003204 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
24003148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
2400314c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
24003150:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
24003154:	d03b      	beq.n	240031ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
24003156:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
2400315a:	d834      	bhi.n	240031c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
2400315c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
24003160:	d037      	beq.n	240031d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
24003162:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
24003166:	d82e      	bhi.n	240031c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
24003168:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
2400316c:	d033      	beq.n	240031d6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
2400316e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
24003172:	d828      	bhi.n	240031c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
24003174:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24003178:	d01a      	beq.n	240031b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
2400317a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2400317e:	d822      	bhi.n	240031c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
24003180:	2b00      	cmp	r3, #0
24003182:	d003      	beq.n	2400318c <HAL_RCCEx_PeriphCLKConfig+0x298>
24003184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
24003188:	d007      	beq.n	2400319a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
2400318a:	e01c      	b.n	240031c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400318c:	4b1a      	ldr	r3, [pc, #104]	; (240031f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
2400318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24003190:	4a19      	ldr	r2, [pc, #100]	; (240031f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
24003192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24003196:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
24003198:	e01e      	b.n	240031d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2400319a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
2400319e:	3308      	adds	r3, #8
240031a0:	2100      	movs	r1, #0
240031a2:	4618      	mov	r0, r3
240031a4:	f001 f846 	bl	24004234 <RCCEx_PLL2_Config>
240031a8:	4603      	mov	r3, r0
240031aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
240031ae:	e013      	b.n	240031d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
240031b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
240031b4:	3328      	adds	r3, #40	; 0x28
240031b6:	2100      	movs	r1, #0
240031b8:	4618      	mov	r0, r3
240031ba:	f001 f8ed 	bl	24004398 <RCCEx_PLL3_Config>
240031be:	4603      	mov	r3, r0
240031c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
240031c4:	e008      	b.n	240031d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
240031c6:	2301      	movs	r3, #1
240031c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
240031cc:	e004      	b.n	240031d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
240031ce:	bf00      	nop
240031d0:	e002      	b.n	240031d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
240031d2:	bf00      	nop
240031d4:	e000      	b.n	240031d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
240031d6:	bf00      	nop
    }

    if (ret == HAL_OK)
240031d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
240031dc:	2b00      	cmp	r3, #0
240031de:	d10d      	bne.n	240031fc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
240031e0:	4b05      	ldr	r3, [pc, #20]	; (240031f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
240031e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240031e4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
240031e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
240031ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
240031f0:	4a01      	ldr	r2, [pc, #4]	; (240031f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
240031f2:	430b      	orrs	r3, r1
240031f4:	6593      	str	r3, [r2, #88]	; 0x58
240031f6:	e005      	b.n	24003204 <HAL_RCCEx_PeriphCLKConfig+0x310>
240031f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
240031fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24003200:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
24003204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003208:	e9d3 2300 	ldrd	r2, r3, [r3]
2400320c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
24003210:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
24003214:	2300      	movs	r3, #0
24003216:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
2400321a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
2400321e:	460b      	mov	r3, r1
24003220:	4313      	orrs	r3, r2
24003222:	d03a      	beq.n	2400329a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
24003224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2400322a:	2b30      	cmp	r3, #48	; 0x30
2400322c:	d01f      	beq.n	2400326e <HAL_RCCEx_PeriphCLKConfig+0x37a>
2400322e:	2b30      	cmp	r3, #48	; 0x30
24003230:	d819      	bhi.n	24003266 <HAL_RCCEx_PeriphCLKConfig+0x372>
24003232:	2b20      	cmp	r3, #32
24003234:	d00c      	beq.n	24003250 <HAL_RCCEx_PeriphCLKConfig+0x35c>
24003236:	2b20      	cmp	r3, #32
24003238:	d815      	bhi.n	24003266 <HAL_RCCEx_PeriphCLKConfig+0x372>
2400323a:	2b00      	cmp	r3, #0
2400323c:	d019      	beq.n	24003272 <HAL_RCCEx_PeriphCLKConfig+0x37e>
2400323e:	2b10      	cmp	r3, #16
24003240:	d111      	bne.n	24003266 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24003242:	4baa      	ldr	r3, [pc, #680]	; (240034ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
24003244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24003246:	4aa9      	ldr	r2, [pc, #676]	; (240034ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
24003248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400324c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
2400324e:	e011      	b.n	24003274 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24003250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003254:	3308      	adds	r3, #8
24003256:	2102      	movs	r1, #2
24003258:	4618      	mov	r0, r3
2400325a:	f000 ffeb 	bl	24004234 <RCCEx_PLL2_Config>
2400325e:	4603      	mov	r3, r0
24003260:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
24003264:	e006      	b.n	24003274 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
24003266:	2301      	movs	r3, #1
24003268:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
2400326c:	e002      	b.n	24003274 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
2400326e:	bf00      	nop
24003270:	e000      	b.n	24003274 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
24003272:	bf00      	nop
    }

    if (ret == HAL_OK)
24003274:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24003278:	2b00      	cmp	r3, #0
2400327a:	d10a      	bne.n	24003292 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
2400327c:	4b9b      	ldr	r3, [pc, #620]	; (240034ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2400327e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24003280:	f023 0130 	bic.w	r1, r3, #48	; 0x30
24003284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2400328a:	4a98      	ldr	r2, [pc, #608]	; (240034ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2400328c:	430b      	orrs	r3, r1
2400328e:	64d3      	str	r3, [r2, #76]	; 0x4c
24003290:	e003      	b.n	2400329a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
24003292:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24003296:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
2400329a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
2400329e:	e9d3 2300 	ldrd	r2, r3, [r3]
240032a2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
240032a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
240032aa:	2300      	movs	r3, #0
240032ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
240032b0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
240032b4:	460b      	mov	r3, r1
240032b6:	4313      	orrs	r3, r2
240032b8:	d051      	beq.n	2400335e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
240032ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
240032be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240032c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
240032c4:	d035      	beq.n	24003332 <HAL_RCCEx_PeriphCLKConfig+0x43e>
240032c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
240032ca:	d82e      	bhi.n	2400332a <HAL_RCCEx_PeriphCLKConfig+0x436>
240032cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
240032d0:	d031      	beq.n	24003336 <HAL_RCCEx_PeriphCLKConfig+0x442>
240032d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
240032d6:	d828      	bhi.n	2400332a <HAL_RCCEx_PeriphCLKConfig+0x436>
240032d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
240032dc:	d01a      	beq.n	24003314 <HAL_RCCEx_PeriphCLKConfig+0x420>
240032de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
240032e2:	d822      	bhi.n	2400332a <HAL_RCCEx_PeriphCLKConfig+0x436>
240032e4:	2b00      	cmp	r3, #0
240032e6:	d003      	beq.n	240032f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
240032e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
240032ec:	d007      	beq.n	240032fe <HAL_RCCEx_PeriphCLKConfig+0x40a>
240032ee:	e01c      	b.n	2400332a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240032f0:	4b7e      	ldr	r3, [pc, #504]	; (240034ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
240032f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240032f4:	4a7d      	ldr	r2, [pc, #500]	; (240034ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
240032f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240032fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
240032fc:	e01c      	b.n	24003338 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240032fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003302:	3308      	adds	r3, #8
24003304:	2100      	movs	r1, #0
24003306:	4618      	mov	r0, r3
24003308:	f000 ff94 	bl	24004234 <RCCEx_PLL2_Config>
2400330c:	4603      	mov	r3, r0
2400330e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
24003312:	e011      	b.n	24003338 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24003314:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003318:	3328      	adds	r3, #40	; 0x28
2400331a:	2100      	movs	r1, #0
2400331c:	4618      	mov	r0, r3
2400331e:	f001 f83b 	bl	24004398 <RCCEx_PLL3_Config>
24003322:	4603      	mov	r3, r0
24003324:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
24003328:	e006      	b.n	24003338 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2400332a:	2301      	movs	r3, #1
2400332c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
24003330:	e002      	b.n	24003338 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
24003332:	bf00      	nop
24003334:	e000      	b.n	24003338 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
24003336:	bf00      	nop
    }

    if (ret == HAL_OK)
24003338:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
2400333c:	2b00      	cmp	r3, #0
2400333e:	d10a      	bne.n	24003356 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
24003340:	4b6a      	ldr	r3, [pc, #424]	; (240034ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
24003342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24003344:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
24003348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
2400334c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400334e:	4a67      	ldr	r2, [pc, #412]	; (240034ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
24003350:	430b      	orrs	r3, r1
24003352:	6513      	str	r3, [r2, #80]	; 0x50
24003354:	e003      	b.n	2400335e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
24003356:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
2400335a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
2400335e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003362:	e9d3 2300 	ldrd	r2, r3, [r3]
24003366:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
2400336a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
2400336e:	2300      	movs	r3, #0
24003370:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
24003374:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
24003378:	460b      	mov	r3, r1
2400337a:	4313      	orrs	r3, r2
2400337c:	d053      	beq.n	24003426 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
2400337e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24003384:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
24003388:	d033      	beq.n	240033f2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
2400338a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2400338e:	d82c      	bhi.n	240033ea <HAL_RCCEx_PeriphCLKConfig+0x4f6>
24003390:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
24003394:	d02f      	beq.n	240033f6 <HAL_RCCEx_PeriphCLKConfig+0x502>
24003396:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
2400339a:	d826      	bhi.n	240033ea <HAL_RCCEx_PeriphCLKConfig+0x4f6>
2400339c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
240033a0:	d02b      	beq.n	240033fa <HAL_RCCEx_PeriphCLKConfig+0x506>
240033a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
240033a6:	d820      	bhi.n	240033ea <HAL_RCCEx_PeriphCLKConfig+0x4f6>
240033a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
240033ac:	d012      	beq.n	240033d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
240033ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
240033b2:	d81a      	bhi.n	240033ea <HAL_RCCEx_PeriphCLKConfig+0x4f6>
240033b4:	2b00      	cmp	r3, #0
240033b6:	d022      	beq.n	240033fe <HAL_RCCEx_PeriphCLKConfig+0x50a>
240033b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
240033bc:	d115      	bne.n	240033ea <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
240033be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
240033c2:	3308      	adds	r3, #8
240033c4:	2101      	movs	r1, #1
240033c6:	4618      	mov	r0, r3
240033c8:	f000 ff34 	bl	24004234 <RCCEx_PLL2_Config>
240033cc:	4603      	mov	r3, r0
240033ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
240033d2:	e015      	b.n	24003400 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
240033d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
240033d8:	3328      	adds	r3, #40	; 0x28
240033da:	2101      	movs	r1, #1
240033dc:	4618      	mov	r0, r3
240033de:	f000 ffdb 	bl	24004398 <RCCEx_PLL3_Config>
240033e2:	4603      	mov	r3, r0
240033e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
240033e8:	e00a      	b.n	24003400 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
240033ea:	2301      	movs	r3, #1
240033ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
240033f0:	e006      	b.n	24003400 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
240033f2:	bf00      	nop
240033f4:	e004      	b.n	24003400 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
240033f6:	bf00      	nop
240033f8:	e002      	b.n	24003400 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
240033fa:	bf00      	nop
240033fc:	e000      	b.n	24003400 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
240033fe:	bf00      	nop
    }

    if (ret == HAL_OK)
24003400:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24003404:	2b00      	cmp	r3, #0
24003406:	d10a      	bne.n	2400341e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
24003408:	4b38      	ldr	r3, [pc, #224]	; (240034ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2400340a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400340c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
24003410:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24003416:	4a35      	ldr	r2, [pc, #212]	; (240034ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
24003418:	430b      	orrs	r3, r1
2400341a:	6513      	str	r3, [r2, #80]	; 0x50
2400341c:	e003      	b.n	24003426 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
2400341e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24003422:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
24003426:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
2400342a:	e9d3 2300 	ldrd	r2, r3, [r3]
2400342e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
24003432:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
24003436:	2300      	movs	r3, #0
24003438:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
2400343c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
24003440:	460b      	mov	r3, r1
24003442:	4313      	orrs	r3, r2
24003444:	d058      	beq.n	240034f8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
24003446:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
2400344a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
2400344e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24003452:	d033      	beq.n	240034bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
24003454:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24003458:	d82c      	bhi.n	240034b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
2400345a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2400345e:	d02f      	beq.n	240034c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
24003460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24003464:	d826      	bhi.n	240034b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
24003466:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2400346a:	d02b      	beq.n	240034c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
2400346c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24003470:	d820      	bhi.n	240034b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
24003472:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24003476:	d012      	beq.n	2400349e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
24003478:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2400347c:	d81a      	bhi.n	240034b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
2400347e:	2b00      	cmp	r3, #0
24003480:	d022      	beq.n	240034c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
24003482:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24003486:	d115      	bne.n	240034b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24003488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
2400348c:	3308      	adds	r3, #8
2400348e:	2101      	movs	r1, #1
24003490:	4618      	mov	r0, r3
24003492:	f000 fecf 	bl	24004234 <RCCEx_PLL2_Config>
24003496:	4603      	mov	r3, r0
24003498:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
2400349c:	e015      	b.n	240034ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400349e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
240034a2:	3328      	adds	r3, #40	; 0x28
240034a4:	2101      	movs	r1, #1
240034a6:	4618      	mov	r0, r3
240034a8:	f000 ff76 	bl	24004398 <RCCEx_PLL3_Config>
240034ac:	4603      	mov	r3, r0
240034ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
240034b2:	e00a      	b.n	240034ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
240034b4:	2301      	movs	r3, #1
240034b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
240034ba:	e006      	b.n	240034ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
240034bc:	bf00      	nop
240034be:	e004      	b.n	240034ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
240034c0:	bf00      	nop
240034c2:	e002      	b.n	240034ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
240034c4:	bf00      	nop
240034c6:	e000      	b.n	240034ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
240034c8:	bf00      	nop
    }

    if (ret == HAL_OK)
240034ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
240034ce:	2b00      	cmp	r3, #0
240034d0:	d10e      	bne.n	240034f0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
240034d2:	4b06      	ldr	r3, [pc, #24]	; (240034ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
240034d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240034d6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
240034da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
240034de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
240034e2:	4a02      	ldr	r2, [pc, #8]	; (240034ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
240034e4:	430b      	orrs	r3, r1
240034e6:	6593      	str	r3, [r2, #88]	; 0x58
240034e8:	e006      	b.n	240034f8 <HAL_RCCEx_PeriphCLKConfig+0x604>
240034ea:	bf00      	nop
240034ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
240034f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
240034f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
240034f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
240034fc:	e9d3 2300 	ldrd	r2, r3, [r3]
24003500:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
24003504:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
24003508:	2300      	movs	r3, #0
2400350a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
2400350e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
24003512:	460b      	mov	r3, r1
24003514:	4313      	orrs	r3, r2
24003516:	d037      	beq.n	24003588 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
24003518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
2400351c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
2400351e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24003522:	d00e      	beq.n	24003542 <HAL_RCCEx_PeriphCLKConfig+0x64e>
24003524:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24003528:	d816      	bhi.n	24003558 <HAL_RCCEx_PeriphCLKConfig+0x664>
2400352a:	2b00      	cmp	r3, #0
2400352c:	d018      	beq.n	24003560 <HAL_RCCEx_PeriphCLKConfig+0x66c>
2400352e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24003532:	d111      	bne.n	24003558 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24003534:	4bc4      	ldr	r3, [pc, #784]	; (24003848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
24003536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24003538:	4ac3      	ldr	r2, [pc, #780]	; (24003848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2400353a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400353e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
24003540:	e00f      	b.n	24003562 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24003542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003546:	3308      	adds	r3, #8
24003548:	2101      	movs	r1, #1
2400354a:	4618      	mov	r0, r3
2400354c:	f000 fe72 	bl	24004234 <RCCEx_PLL2_Config>
24003550:	4603      	mov	r3, r0
24003552:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
24003556:	e004      	b.n	24003562 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
24003558:	2301      	movs	r3, #1
2400355a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
2400355e:	e000      	b.n	24003562 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
24003560:	bf00      	nop
    }

    if (ret == HAL_OK)
24003562:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24003566:	2b00      	cmp	r3, #0
24003568:	d10a      	bne.n	24003580 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
2400356a:	4bb7      	ldr	r3, [pc, #732]	; (24003848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2400356c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400356e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
24003572:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24003578:	4ab3      	ldr	r2, [pc, #716]	; (24003848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2400357a:	430b      	orrs	r3, r1
2400357c:	6513      	str	r3, [r2, #80]	; 0x50
2400357e:	e003      	b.n	24003588 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
24003580:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24003584:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
24003588:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
2400358c:	e9d3 2300 	ldrd	r2, r3, [r3]
24003590:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
24003594:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
24003598:	2300      	movs	r3, #0
2400359a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
2400359e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
240035a2:	460b      	mov	r3, r1
240035a4:	4313      	orrs	r3, r2
240035a6:	d039      	beq.n	2400361c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
240035a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
240035ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
240035ae:	2b03      	cmp	r3, #3
240035b0:	d81c      	bhi.n	240035ec <HAL_RCCEx_PeriphCLKConfig+0x6f8>
240035b2:	a201      	add	r2, pc, #4	; (adr r2, 240035b8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
240035b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
240035b8:	240035f5 	.word	0x240035f5
240035bc:	240035c9 	.word	0x240035c9
240035c0:	240035d7 	.word	0x240035d7
240035c4:	240035f5 	.word	0x240035f5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240035c8:	4b9f      	ldr	r3, [pc, #636]	; (24003848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
240035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240035cc:	4a9e      	ldr	r2, [pc, #632]	; (24003848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
240035ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240035d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
240035d4:	e00f      	b.n	240035f6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
240035d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
240035da:	3308      	adds	r3, #8
240035dc:	2102      	movs	r1, #2
240035de:	4618      	mov	r0, r3
240035e0:	f000 fe28 	bl	24004234 <RCCEx_PLL2_Config>
240035e4:	4603      	mov	r3, r0
240035e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
240035ea:	e004      	b.n	240035f6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
240035ec:	2301      	movs	r3, #1
240035ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
240035f2:	e000      	b.n	240035f6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
240035f4:	bf00      	nop
    }

    if (ret == HAL_OK)
240035f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
240035fa:	2b00      	cmp	r3, #0
240035fc:	d10a      	bne.n	24003614 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
240035fe:	4b92      	ldr	r3, [pc, #584]	; (24003848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
24003600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24003602:	f023 0103 	bic.w	r1, r3, #3
24003606:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
2400360a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2400360c:	4a8e      	ldr	r2, [pc, #568]	; (24003848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2400360e:	430b      	orrs	r3, r1
24003610:	64d3      	str	r3, [r2, #76]	; 0x4c
24003612:	e003      	b.n	2400361c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
24003614:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24003618:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
2400361c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003620:	e9d3 2300 	ldrd	r2, r3, [r3]
24003624:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
24003628:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
2400362c:	2300      	movs	r3, #0
2400362e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
24003632:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
24003636:	460b      	mov	r3, r1
24003638:	4313      	orrs	r3, r2
2400363a:	f000 8099 	beq.w	24003770 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
2400363e:	4b83      	ldr	r3, [pc, #524]	; (2400384c <HAL_RCCEx_PeriphCLKConfig+0x958>)
24003640:	681b      	ldr	r3, [r3, #0]
24003642:	4a82      	ldr	r2, [pc, #520]	; (2400384c <HAL_RCCEx_PeriphCLKConfig+0x958>)
24003644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24003648:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
2400364a:	f7fd fb27 	bl	24000c9c <HAL_GetTick>
2400364e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
24003652:	e00b      	b.n	2400366c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
24003654:	f7fd fb22 	bl	24000c9c <HAL_GetTick>
24003658:	4602      	mov	r2, r0
2400365a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
2400365e:	1ad3      	subs	r3, r2, r3
24003660:	2b64      	cmp	r3, #100	; 0x64
24003662:	d903      	bls.n	2400366c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
24003664:	2303      	movs	r3, #3
24003666:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
2400366a:	e005      	b.n	24003678 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2400366c:	4b77      	ldr	r3, [pc, #476]	; (2400384c <HAL_RCCEx_PeriphCLKConfig+0x958>)
2400366e:	681b      	ldr	r3, [r3, #0]
24003670:	f403 7380 	and.w	r3, r3, #256	; 0x100
24003674:	2b00      	cmp	r3, #0
24003676:	d0ed      	beq.n	24003654 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
24003678:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
2400367c:	2b00      	cmp	r3, #0
2400367e:	d173      	bne.n	24003768 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
24003680:	4b71      	ldr	r3, [pc, #452]	; (24003848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
24003682:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24003684:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003688:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
2400368c:	4053      	eors	r3, r2
2400368e:	f403 7340 	and.w	r3, r3, #768	; 0x300
24003692:	2b00      	cmp	r3, #0
24003694:	d015      	beq.n	240036c2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
24003696:	4b6c      	ldr	r3, [pc, #432]	; (24003848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
24003698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2400369a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
2400369e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
240036a2:	4b69      	ldr	r3, [pc, #420]	; (24003848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
240036a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240036a6:	4a68      	ldr	r2, [pc, #416]	; (24003848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
240036a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240036ac:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
240036ae:	4b66      	ldr	r3, [pc, #408]	; (24003848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
240036b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240036b2:	4a65      	ldr	r2, [pc, #404]	; (24003848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
240036b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
240036b8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
240036ba:	4a63      	ldr	r2, [pc, #396]	; (24003848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
240036bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
240036c0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
240036c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
240036c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
240036ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
240036ce:	d118      	bne.n	24003702 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
240036d0:	f7fd fae4 	bl	24000c9c <HAL_GetTick>
240036d4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
240036d8:	e00d      	b.n	240036f6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
240036da:	f7fd fadf 	bl	24000c9c <HAL_GetTick>
240036de:	4602      	mov	r2, r0
240036e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
240036e4:	1ad2      	subs	r2, r2, r3
240036e6:	f241 3388 	movw	r3, #5000	; 0x1388
240036ea:	429a      	cmp	r2, r3
240036ec:	d903      	bls.n	240036f6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
240036ee:	2303      	movs	r3, #3
240036f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
240036f4:	e005      	b.n	24003702 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
240036f6:	4b54      	ldr	r3, [pc, #336]	; (24003848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
240036f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240036fa:	f003 0302 	and.w	r3, r3, #2
240036fe:	2b00      	cmp	r3, #0
24003700:	d0eb      	beq.n	240036da <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
24003702:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24003706:	2b00      	cmp	r3, #0
24003708:	d129      	bne.n	2400375e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
2400370a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
2400370e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
24003712:	f403 7340 	and.w	r3, r3, #768	; 0x300
24003716:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
2400371a:	d10e      	bne.n	2400373a <HAL_RCCEx_PeriphCLKConfig+0x846>
2400371c:	4b4a      	ldr	r3, [pc, #296]	; (24003848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2400371e:	691b      	ldr	r3, [r3, #16]
24003720:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
24003724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003728:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
2400372c:	091a      	lsrs	r2, r3, #4
2400372e:	4b48      	ldr	r3, [pc, #288]	; (24003850 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
24003730:	4013      	ands	r3, r2
24003732:	4a45      	ldr	r2, [pc, #276]	; (24003848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
24003734:	430b      	orrs	r3, r1
24003736:	6113      	str	r3, [r2, #16]
24003738:	e005      	b.n	24003746 <HAL_RCCEx_PeriphCLKConfig+0x852>
2400373a:	4b43      	ldr	r3, [pc, #268]	; (24003848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2400373c:	691b      	ldr	r3, [r3, #16]
2400373e:	4a42      	ldr	r2, [pc, #264]	; (24003848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
24003740:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
24003744:	6113      	str	r3, [r2, #16]
24003746:	4b40      	ldr	r3, [pc, #256]	; (24003848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
24003748:	6f19      	ldr	r1, [r3, #112]	; 0x70
2400374a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
2400374e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
24003752:	f3c3 030b 	ubfx	r3, r3, #0, #12
24003756:	4a3c      	ldr	r2, [pc, #240]	; (24003848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
24003758:	430b      	orrs	r3, r1
2400375a:	6713      	str	r3, [r2, #112]	; 0x70
2400375c:	e008      	b.n	24003770 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
2400375e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24003762:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
24003766:	e003      	b.n	24003770 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
24003768:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
2400376c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
24003770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003774:	e9d3 2300 	ldrd	r2, r3, [r3]
24003778:	f002 0301 	and.w	r3, r2, #1
2400377c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
24003780:	2300      	movs	r3, #0
24003782:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
24003786:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
2400378a:	460b      	mov	r3, r1
2400378c:	4313      	orrs	r3, r2
2400378e:	f000 808f 	beq.w	240038b0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
24003792:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003796:	6f9b      	ldr	r3, [r3, #120]	; 0x78
24003798:	2b28      	cmp	r3, #40	; 0x28
2400379a:	d871      	bhi.n	24003880 <HAL_RCCEx_PeriphCLKConfig+0x98c>
2400379c:	a201      	add	r2, pc, #4	; (adr r2, 240037a4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
2400379e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
240037a2:	bf00      	nop
240037a4:	24003889 	.word	0x24003889
240037a8:	24003881 	.word	0x24003881
240037ac:	24003881 	.word	0x24003881
240037b0:	24003881 	.word	0x24003881
240037b4:	24003881 	.word	0x24003881
240037b8:	24003881 	.word	0x24003881
240037bc:	24003881 	.word	0x24003881
240037c0:	24003881 	.word	0x24003881
240037c4:	24003855 	.word	0x24003855
240037c8:	24003881 	.word	0x24003881
240037cc:	24003881 	.word	0x24003881
240037d0:	24003881 	.word	0x24003881
240037d4:	24003881 	.word	0x24003881
240037d8:	24003881 	.word	0x24003881
240037dc:	24003881 	.word	0x24003881
240037e0:	24003881 	.word	0x24003881
240037e4:	2400386b 	.word	0x2400386b
240037e8:	24003881 	.word	0x24003881
240037ec:	24003881 	.word	0x24003881
240037f0:	24003881 	.word	0x24003881
240037f4:	24003881 	.word	0x24003881
240037f8:	24003881 	.word	0x24003881
240037fc:	24003881 	.word	0x24003881
24003800:	24003881 	.word	0x24003881
24003804:	24003889 	.word	0x24003889
24003808:	24003881 	.word	0x24003881
2400380c:	24003881 	.word	0x24003881
24003810:	24003881 	.word	0x24003881
24003814:	24003881 	.word	0x24003881
24003818:	24003881 	.word	0x24003881
2400381c:	24003881 	.word	0x24003881
24003820:	24003881 	.word	0x24003881
24003824:	24003889 	.word	0x24003889
24003828:	24003881 	.word	0x24003881
2400382c:	24003881 	.word	0x24003881
24003830:	24003881 	.word	0x24003881
24003834:	24003881 	.word	0x24003881
24003838:	24003881 	.word	0x24003881
2400383c:	24003881 	.word	0x24003881
24003840:	24003881 	.word	0x24003881
24003844:	24003889 	.word	0x24003889
24003848:	58024400 	.word	0x58024400
2400384c:	58024800 	.word	0x58024800
24003850:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24003854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003858:	3308      	adds	r3, #8
2400385a:	2101      	movs	r1, #1
2400385c:	4618      	mov	r0, r3
2400385e:	f000 fce9 	bl	24004234 <RCCEx_PLL2_Config>
24003862:	4603      	mov	r3, r0
24003864:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
24003868:	e00f      	b.n	2400388a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400386a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
2400386e:	3328      	adds	r3, #40	; 0x28
24003870:	2101      	movs	r1, #1
24003872:	4618      	mov	r0, r3
24003874:	f000 fd90 	bl	24004398 <RCCEx_PLL3_Config>
24003878:	4603      	mov	r3, r0
2400387a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
2400387e:	e004      	b.n	2400388a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
24003880:	2301      	movs	r3, #1
24003882:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
24003886:	e000      	b.n	2400388a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
24003888:	bf00      	nop
    }

    if (ret == HAL_OK)
2400388a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
2400388e:	2b00      	cmp	r3, #0
24003890:	d10a      	bne.n	240038a8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
24003892:	4bbf      	ldr	r3, [pc, #764]	; (24003b90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
24003894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24003896:	f023 0138 	bic.w	r1, r3, #56	; 0x38
2400389a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
2400389e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
240038a0:	4abb      	ldr	r2, [pc, #748]	; (24003b90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
240038a2:	430b      	orrs	r3, r1
240038a4:	6553      	str	r3, [r2, #84]	; 0x54
240038a6:	e003      	b.n	240038b0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
240038a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
240038ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
240038b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
240038b4:	e9d3 2300 	ldrd	r2, r3, [r3]
240038b8:	f002 0302 	and.w	r3, r2, #2
240038bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
240038c0:	2300      	movs	r3, #0
240038c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
240038c6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
240038ca:	460b      	mov	r3, r1
240038cc:	4313      	orrs	r3, r2
240038ce:	d041      	beq.n	24003954 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
240038d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
240038d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
240038d6:	2b05      	cmp	r3, #5
240038d8:	d824      	bhi.n	24003924 <HAL_RCCEx_PeriphCLKConfig+0xa30>
240038da:	a201      	add	r2, pc, #4	; (adr r2, 240038e0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
240038dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
240038e0:	2400392d 	.word	0x2400392d
240038e4:	240038f9 	.word	0x240038f9
240038e8:	2400390f 	.word	0x2400390f
240038ec:	2400392d 	.word	0x2400392d
240038f0:	2400392d 	.word	0x2400392d
240038f4:	2400392d 	.word	0x2400392d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
240038f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
240038fc:	3308      	adds	r3, #8
240038fe:	2101      	movs	r1, #1
24003900:	4618      	mov	r0, r3
24003902:	f000 fc97 	bl	24004234 <RCCEx_PLL2_Config>
24003906:	4603      	mov	r3, r0
24003908:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
2400390c:	e00f      	b.n	2400392e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400390e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003912:	3328      	adds	r3, #40	; 0x28
24003914:	2101      	movs	r1, #1
24003916:	4618      	mov	r0, r3
24003918:	f000 fd3e 	bl	24004398 <RCCEx_PLL3_Config>
2400391c:	4603      	mov	r3, r0
2400391e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
24003922:	e004      	b.n	2400392e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
24003924:	2301      	movs	r3, #1
24003926:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
2400392a:	e000      	b.n	2400392e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
2400392c:	bf00      	nop
    }

    if (ret == HAL_OK)
2400392e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24003932:	2b00      	cmp	r3, #0
24003934:	d10a      	bne.n	2400394c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
24003936:	4b96      	ldr	r3, [pc, #600]	; (24003b90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
24003938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2400393a:	f023 0107 	bic.w	r1, r3, #7
2400393e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
24003944:	4a92      	ldr	r2, [pc, #584]	; (24003b90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
24003946:	430b      	orrs	r3, r1
24003948:	6553      	str	r3, [r2, #84]	; 0x54
2400394a:	e003      	b.n	24003954 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
2400394c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24003950:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
24003954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003958:	e9d3 2300 	ldrd	r2, r3, [r3]
2400395c:	f002 0304 	and.w	r3, r2, #4
24003960:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
24003964:	2300      	movs	r3, #0
24003966:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
2400396a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
2400396e:	460b      	mov	r3, r1
24003970:	4313      	orrs	r3, r2
24003972:	d044      	beq.n	240039fe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
24003974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2400397c:	2b05      	cmp	r3, #5
2400397e:	d825      	bhi.n	240039cc <HAL_RCCEx_PeriphCLKConfig+0xad8>
24003980:	a201      	add	r2, pc, #4	; (adr r2, 24003988 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
24003982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24003986:	bf00      	nop
24003988:	240039d5 	.word	0x240039d5
2400398c:	240039a1 	.word	0x240039a1
24003990:	240039b7 	.word	0x240039b7
24003994:	240039d5 	.word	0x240039d5
24003998:	240039d5 	.word	0x240039d5
2400399c:	240039d5 	.word	0x240039d5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
240039a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
240039a4:	3308      	adds	r3, #8
240039a6:	2101      	movs	r1, #1
240039a8:	4618      	mov	r0, r3
240039aa:	f000 fc43 	bl	24004234 <RCCEx_PLL2_Config>
240039ae:	4603      	mov	r3, r0
240039b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
240039b4:	e00f      	b.n	240039d6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
240039b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
240039ba:	3328      	adds	r3, #40	; 0x28
240039bc:	2101      	movs	r1, #1
240039be:	4618      	mov	r0, r3
240039c0:	f000 fcea 	bl	24004398 <RCCEx_PLL3_Config>
240039c4:	4603      	mov	r3, r0
240039c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
240039ca:	e004      	b.n	240039d6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
240039cc:	2301      	movs	r3, #1
240039ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
240039d2:	e000      	b.n	240039d6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
240039d4:	bf00      	nop
    }

    if (ret == HAL_OK)
240039d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
240039da:	2b00      	cmp	r3, #0
240039dc:	d10b      	bne.n	240039f6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
240039de:	4b6c      	ldr	r3, [pc, #432]	; (24003b90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
240039e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240039e2:	f023 0107 	bic.w	r1, r3, #7
240039e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
240039ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
240039ee:	4a68      	ldr	r2, [pc, #416]	; (24003b90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
240039f0:	430b      	orrs	r3, r1
240039f2:	6593      	str	r3, [r2, #88]	; 0x58
240039f4:	e003      	b.n	240039fe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
240039f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
240039fa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
240039fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003a02:	e9d3 2300 	ldrd	r2, r3, [r3]
24003a06:	f002 0320 	and.w	r3, r2, #32
24003a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
24003a0e:	2300      	movs	r3, #0
24003a10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
24003a14:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
24003a18:	460b      	mov	r3, r1
24003a1a:	4313      	orrs	r3, r2
24003a1c:	d055      	beq.n	24003aca <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
24003a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003a22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
24003a26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24003a2a:	d033      	beq.n	24003a94 <HAL_RCCEx_PeriphCLKConfig+0xba0>
24003a2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24003a30:	d82c      	bhi.n	24003a8c <HAL_RCCEx_PeriphCLKConfig+0xb98>
24003a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24003a36:	d02f      	beq.n	24003a98 <HAL_RCCEx_PeriphCLKConfig+0xba4>
24003a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24003a3c:	d826      	bhi.n	24003a8c <HAL_RCCEx_PeriphCLKConfig+0xb98>
24003a3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24003a42:	d02b      	beq.n	24003a9c <HAL_RCCEx_PeriphCLKConfig+0xba8>
24003a44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24003a48:	d820      	bhi.n	24003a8c <HAL_RCCEx_PeriphCLKConfig+0xb98>
24003a4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24003a4e:	d012      	beq.n	24003a76 <HAL_RCCEx_PeriphCLKConfig+0xb82>
24003a50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24003a54:	d81a      	bhi.n	24003a8c <HAL_RCCEx_PeriphCLKConfig+0xb98>
24003a56:	2b00      	cmp	r3, #0
24003a58:	d022      	beq.n	24003aa0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
24003a5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24003a5e:	d115      	bne.n	24003a8c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24003a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003a64:	3308      	adds	r3, #8
24003a66:	2100      	movs	r1, #0
24003a68:	4618      	mov	r0, r3
24003a6a:	f000 fbe3 	bl	24004234 <RCCEx_PLL2_Config>
24003a6e:	4603      	mov	r3, r0
24003a70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
24003a74:	e015      	b.n	24003aa2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24003a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003a7a:	3328      	adds	r3, #40	; 0x28
24003a7c:	2102      	movs	r1, #2
24003a7e:	4618      	mov	r0, r3
24003a80:	f000 fc8a 	bl	24004398 <RCCEx_PLL3_Config>
24003a84:	4603      	mov	r3, r0
24003a86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
24003a8a:	e00a      	b.n	24003aa2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
24003a8c:	2301      	movs	r3, #1
24003a8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
24003a92:	e006      	b.n	24003aa2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
24003a94:	bf00      	nop
24003a96:	e004      	b.n	24003aa2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
24003a98:	bf00      	nop
24003a9a:	e002      	b.n	24003aa2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
24003a9c:	bf00      	nop
24003a9e:	e000      	b.n	24003aa2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
24003aa0:	bf00      	nop
    }

    if (ret == HAL_OK)
24003aa2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24003aa6:	2b00      	cmp	r3, #0
24003aa8:	d10b      	bne.n	24003ac2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
24003aaa:	4b39      	ldr	r3, [pc, #228]	; (24003b90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
24003aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24003aae:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
24003ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
24003aba:	4a35      	ldr	r2, [pc, #212]	; (24003b90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
24003abc:	430b      	orrs	r3, r1
24003abe:	6553      	str	r3, [r2, #84]	; 0x54
24003ac0:	e003      	b.n	24003aca <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
24003ac2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24003ac6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
24003aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003ace:	e9d3 2300 	ldrd	r2, r3, [r3]
24003ad2:	f002 0340 	and.w	r3, r2, #64	; 0x40
24003ad6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
24003ada:	2300      	movs	r3, #0
24003adc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
24003ae0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
24003ae4:	460b      	mov	r3, r1
24003ae6:	4313      	orrs	r3, r2
24003ae8:	d058      	beq.n	24003b9c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
24003aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003aee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
24003af2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
24003af6:	d033      	beq.n	24003b60 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
24003af8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
24003afc:	d82c      	bhi.n	24003b58 <HAL_RCCEx_PeriphCLKConfig+0xc64>
24003afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24003b02:	d02f      	beq.n	24003b64 <HAL_RCCEx_PeriphCLKConfig+0xc70>
24003b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24003b08:	d826      	bhi.n	24003b58 <HAL_RCCEx_PeriphCLKConfig+0xc64>
24003b0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
24003b0e:	d02b      	beq.n	24003b68 <HAL_RCCEx_PeriphCLKConfig+0xc74>
24003b10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
24003b14:	d820      	bhi.n	24003b58 <HAL_RCCEx_PeriphCLKConfig+0xc64>
24003b16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
24003b1a:	d012      	beq.n	24003b42 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
24003b1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
24003b20:	d81a      	bhi.n	24003b58 <HAL_RCCEx_PeriphCLKConfig+0xc64>
24003b22:	2b00      	cmp	r3, #0
24003b24:	d022      	beq.n	24003b6c <HAL_RCCEx_PeriphCLKConfig+0xc78>
24003b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
24003b2a:	d115      	bne.n	24003b58 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24003b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003b30:	3308      	adds	r3, #8
24003b32:	2100      	movs	r1, #0
24003b34:	4618      	mov	r0, r3
24003b36:	f000 fb7d 	bl	24004234 <RCCEx_PLL2_Config>
24003b3a:	4603      	mov	r3, r0
24003b3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
24003b40:	e015      	b.n	24003b6e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24003b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003b46:	3328      	adds	r3, #40	; 0x28
24003b48:	2102      	movs	r1, #2
24003b4a:	4618      	mov	r0, r3
24003b4c:	f000 fc24 	bl	24004398 <RCCEx_PLL3_Config>
24003b50:	4603      	mov	r3, r0
24003b52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
24003b56:	e00a      	b.n	24003b6e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
24003b58:	2301      	movs	r3, #1
24003b5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
24003b5e:	e006      	b.n	24003b6e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
24003b60:	bf00      	nop
24003b62:	e004      	b.n	24003b6e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
24003b64:	bf00      	nop
24003b66:	e002      	b.n	24003b6e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
24003b68:	bf00      	nop
24003b6a:	e000      	b.n	24003b6e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
24003b6c:	bf00      	nop
    }

    if (ret == HAL_OK)
24003b6e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24003b72:	2b00      	cmp	r3, #0
24003b74:	d10e      	bne.n	24003b94 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
24003b76:	4b06      	ldr	r3, [pc, #24]	; (24003b90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
24003b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24003b7a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
24003b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003b82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
24003b86:	4a02      	ldr	r2, [pc, #8]	; (24003b90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
24003b88:	430b      	orrs	r3, r1
24003b8a:	6593      	str	r3, [r2, #88]	; 0x58
24003b8c:	e006      	b.n	24003b9c <HAL_RCCEx_PeriphCLKConfig+0xca8>
24003b8e:	bf00      	nop
24003b90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
24003b94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24003b98:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
24003b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
24003ba4:	f002 0380 	and.w	r3, r2, #128	; 0x80
24003ba8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
24003bac:	2300      	movs	r3, #0
24003bae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
24003bb2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
24003bb6:	460b      	mov	r3, r1
24003bb8:	4313      	orrs	r3, r2
24003bba:	d055      	beq.n	24003c68 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
24003bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003bc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
24003bc4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
24003bc8:	d033      	beq.n	24003c32 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
24003bca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
24003bce:	d82c      	bhi.n	24003c2a <HAL_RCCEx_PeriphCLKConfig+0xd36>
24003bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
24003bd4:	d02f      	beq.n	24003c36 <HAL_RCCEx_PeriphCLKConfig+0xd42>
24003bd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
24003bda:	d826      	bhi.n	24003c2a <HAL_RCCEx_PeriphCLKConfig+0xd36>
24003bdc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
24003be0:	d02b      	beq.n	24003c3a <HAL_RCCEx_PeriphCLKConfig+0xd46>
24003be2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
24003be6:	d820      	bhi.n	24003c2a <HAL_RCCEx_PeriphCLKConfig+0xd36>
24003be8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24003bec:	d012      	beq.n	24003c14 <HAL_RCCEx_PeriphCLKConfig+0xd20>
24003bee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24003bf2:	d81a      	bhi.n	24003c2a <HAL_RCCEx_PeriphCLKConfig+0xd36>
24003bf4:	2b00      	cmp	r3, #0
24003bf6:	d022      	beq.n	24003c3e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
24003bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24003bfc:	d115      	bne.n	24003c2a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24003bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003c02:	3308      	adds	r3, #8
24003c04:	2100      	movs	r1, #0
24003c06:	4618      	mov	r0, r3
24003c08:	f000 fb14 	bl	24004234 <RCCEx_PLL2_Config>
24003c0c:	4603      	mov	r3, r0
24003c0e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
24003c12:	e015      	b.n	24003c40 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24003c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003c18:	3328      	adds	r3, #40	; 0x28
24003c1a:	2102      	movs	r1, #2
24003c1c:	4618      	mov	r0, r3
24003c1e:	f000 fbbb 	bl	24004398 <RCCEx_PLL3_Config>
24003c22:	4603      	mov	r3, r0
24003c24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
24003c28:	e00a      	b.n	24003c40 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
24003c2a:	2301      	movs	r3, #1
24003c2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
24003c30:	e006      	b.n	24003c40 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
24003c32:	bf00      	nop
24003c34:	e004      	b.n	24003c40 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
24003c36:	bf00      	nop
24003c38:	e002      	b.n	24003c40 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
24003c3a:	bf00      	nop
24003c3c:	e000      	b.n	24003c40 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
24003c3e:	bf00      	nop
    }

    if (ret == HAL_OK)
24003c40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24003c44:	2b00      	cmp	r3, #0
24003c46:	d10b      	bne.n	24003c60 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
24003c48:	4ba0      	ldr	r3, [pc, #640]	; (24003ecc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
24003c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24003c4c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
24003c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003c54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
24003c58:	4a9c      	ldr	r2, [pc, #624]	; (24003ecc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
24003c5a:	430b      	orrs	r3, r1
24003c5c:	6593      	str	r3, [r2, #88]	; 0x58
24003c5e:	e003      	b.n	24003c68 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
24003c60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24003c64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
24003c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
24003c70:	f002 0308 	and.w	r3, r2, #8
24003c74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
24003c78:	2300      	movs	r3, #0
24003c7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
24003c7e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
24003c82:	460b      	mov	r3, r1
24003c84:	4313      	orrs	r3, r2
24003c86:	d01e      	beq.n	24003cc6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
24003c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
24003c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24003c94:	d10c      	bne.n	24003cb0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24003c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003c9a:	3328      	adds	r3, #40	; 0x28
24003c9c:	2102      	movs	r1, #2
24003c9e:	4618      	mov	r0, r3
24003ca0:	f000 fb7a 	bl	24004398 <RCCEx_PLL3_Config>
24003ca4:	4603      	mov	r3, r0
24003ca6:	2b00      	cmp	r3, #0
24003ca8:	d002      	beq.n	24003cb0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
24003caa:	2301      	movs	r3, #1
24003cac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
24003cb0:	4b86      	ldr	r3, [pc, #536]	; (24003ecc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
24003cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24003cb4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
24003cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
24003cc0:	4a82      	ldr	r2, [pc, #520]	; (24003ecc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
24003cc2:	430b      	orrs	r3, r1
24003cc4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
24003cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003cca:	e9d3 2300 	ldrd	r2, r3, [r3]
24003cce:	f002 0310 	and.w	r3, r2, #16
24003cd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
24003cd6:	2300      	movs	r3, #0
24003cd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
24003cdc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
24003ce0:	460b      	mov	r3, r1
24003ce2:	4313      	orrs	r3, r2
24003ce4:	d01e      	beq.n	24003d24 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
24003ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
24003cee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24003cf2:	d10c      	bne.n	24003d0e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24003cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003cf8:	3328      	adds	r3, #40	; 0x28
24003cfa:	2102      	movs	r1, #2
24003cfc:	4618      	mov	r0, r3
24003cfe:	f000 fb4b 	bl	24004398 <RCCEx_PLL3_Config>
24003d02:	4603      	mov	r3, r0
24003d04:	2b00      	cmp	r3, #0
24003d06:	d002      	beq.n	24003d0e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
24003d08:	2301      	movs	r3, #1
24003d0a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
24003d0e:	4b6f      	ldr	r3, [pc, #444]	; (24003ecc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
24003d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24003d12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
24003d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
24003d1e:	4a6b      	ldr	r2, [pc, #428]	; (24003ecc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
24003d20:	430b      	orrs	r3, r1
24003d22:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
24003d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003d28:	e9d3 2300 	ldrd	r2, r3, [r3]
24003d2c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
24003d30:	67bb      	str	r3, [r7, #120]	; 0x78
24003d32:	2300      	movs	r3, #0
24003d34:	67fb      	str	r3, [r7, #124]	; 0x7c
24003d36:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
24003d3a:	460b      	mov	r3, r1
24003d3c:	4313      	orrs	r3, r2
24003d3e:	d03e      	beq.n	24003dbe <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
24003d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003d44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
24003d48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24003d4c:	d022      	beq.n	24003d94 <HAL_RCCEx_PeriphCLKConfig+0xea0>
24003d4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24003d52:	d81b      	bhi.n	24003d8c <HAL_RCCEx_PeriphCLKConfig+0xe98>
24003d54:	2b00      	cmp	r3, #0
24003d56:	d003      	beq.n	24003d60 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
24003d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24003d5c:	d00b      	beq.n	24003d76 <HAL_RCCEx_PeriphCLKConfig+0xe82>
24003d5e:	e015      	b.n	24003d8c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24003d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003d64:	3308      	adds	r3, #8
24003d66:	2100      	movs	r1, #0
24003d68:	4618      	mov	r0, r3
24003d6a:	f000 fa63 	bl	24004234 <RCCEx_PLL2_Config>
24003d6e:	4603      	mov	r3, r0
24003d70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
24003d74:	e00f      	b.n	24003d96 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24003d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003d7a:	3328      	adds	r3, #40	; 0x28
24003d7c:	2102      	movs	r1, #2
24003d7e:	4618      	mov	r0, r3
24003d80:	f000 fb0a 	bl	24004398 <RCCEx_PLL3_Config>
24003d84:	4603      	mov	r3, r0
24003d86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
24003d8a:	e004      	b.n	24003d96 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
24003d8c:	2301      	movs	r3, #1
24003d8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
24003d92:	e000      	b.n	24003d96 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
24003d94:	bf00      	nop
    }

    if (ret == HAL_OK)
24003d96:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24003d9a:	2b00      	cmp	r3, #0
24003d9c:	d10b      	bne.n	24003db6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
24003d9e:	4b4b      	ldr	r3, [pc, #300]	; (24003ecc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
24003da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24003da2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
24003da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003daa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
24003dae:	4a47      	ldr	r2, [pc, #284]	; (24003ecc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
24003db0:	430b      	orrs	r3, r1
24003db2:	6593      	str	r3, [r2, #88]	; 0x58
24003db4:	e003      	b.n	24003dbe <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
24003db6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24003dba:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
24003dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
24003dc6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
24003dca:	673b      	str	r3, [r7, #112]	; 0x70
24003dcc:	2300      	movs	r3, #0
24003dce:	677b      	str	r3, [r7, #116]	; 0x74
24003dd0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
24003dd4:	460b      	mov	r3, r1
24003dd6:	4313      	orrs	r3, r2
24003dd8:	d03b      	beq.n	24003e52 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
24003dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
24003de2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
24003de6:	d01f      	beq.n	24003e28 <HAL_RCCEx_PeriphCLKConfig+0xf34>
24003de8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
24003dec:	d818      	bhi.n	24003e20 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
24003dee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
24003df2:	d003      	beq.n	24003dfc <HAL_RCCEx_PeriphCLKConfig+0xf08>
24003df4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24003df8:	d007      	beq.n	24003e0a <HAL_RCCEx_PeriphCLKConfig+0xf16>
24003dfa:	e011      	b.n	24003e20 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24003dfc:	4b33      	ldr	r3, [pc, #204]	; (24003ecc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
24003dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24003e00:	4a32      	ldr	r2, [pc, #200]	; (24003ecc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
24003e02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24003e06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
24003e08:	e00f      	b.n	24003e2a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24003e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003e0e:	3328      	adds	r3, #40	; 0x28
24003e10:	2101      	movs	r1, #1
24003e12:	4618      	mov	r0, r3
24003e14:	f000 fac0 	bl	24004398 <RCCEx_PLL3_Config>
24003e18:	4603      	mov	r3, r0
24003e1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
24003e1e:	e004      	b.n	24003e2a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
24003e20:	2301      	movs	r3, #1
24003e22:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
24003e26:	e000      	b.n	24003e2a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
24003e28:	bf00      	nop
    }

    if (ret == HAL_OK)
24003e2a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24003e2e:	2b00      	cmp	r3, #0
24003e30:	d10b      	bne.n	24003e4a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
24003e32:	4b26      	ldr	r3, [pc, #152]	; (24003ecc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
24003e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24003e36:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
24003e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
24003e42:	4a22      	ldr	r2, [pc, #136]	; (24003ecc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
24003e44:	430b      	orrs	r3, r1
24003e46:	6553      	str	r3, [r2, #84]	; 0x54
24003e48:	e003      	b.n	24003e52 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
24003e4a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24003e4e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
24003e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003e56:	e9d3 2300 	ldrd	r2, r3, [r3]
24003e5a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
24003e5e:	66bb      	str	r3, [r7, #104]	; 0x68
24003e60:	2300      	movs	r3, #0
24003e62:	66fb      	str	r3, [r7, #108]	; 0x6c
24003e64:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
24003e68:	460b      	mov	r3, r1
24003e6a:	4313      	orrs	r3, r2
24003e6c:	d034      	beq.n	24003ed8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
24003e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24003e74:	2b00      	cmp	r3, #0
24003e76:	d003      	beq.n	24003e80 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
24003e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24003e7c:	d007      	beq.n	24003e8e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
24003e7e:	e011      	b.n	24003ea4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24003e80:	4b12      	ldr	r3, [pc, #72]	; (24003ecc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
24003e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24003e84:	4a11      	ldr	r2, [pc, #68]	; (24003ecc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
24003e86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24003e8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
24003e8c:	e00e      	b.n	24003eac <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24003e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003e92:	3308      	adds	r3, #8
24003e94:	2102      	movs	r1, #2
24003e96:	4618      	mov	r0, r3
24003e98:	f000 f9cc 	bl	24004234 <RCCEx_PLL2_Config>
24003e9c:	4603      	mov	r3, r0
24003e9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
24003ea2:	e003      	b.n	24003eac <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
24003ea4:	2301      	movs	r3, #1
24003ea6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
24003eaa:	bf00      	nop
    }

    if (ret == HAL_OK)
24003eac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24003eb0:	2b00      	cmp	r3, #0
24003eb2:	d10d      	bne.n	24003ed0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
24003eb4:	4b05      	ldr	r3, [pc, #20]	; (24003ecc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
24003eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24003eb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
24003ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24003ec2:	4a02      	ldr	r2, [pc, #8]	; (24003ecc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
24003ec4:	430b      	orrs	r3, r1
24003ec6:	64d3      	str	r3, [r2, #76]	; 0x4c
24003ec8:	e006      	b.n	24003ed8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
24003eca:	bf00      	nop
24003ecc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
24003ed0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24003ed4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
24003ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003edc:	e9d3 2300 	ldrd	r2, r3, [r3]
24003ee0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
24003ee4:	663b      	str	r3, [r7, #96]	; 0x60
24003ee6:	2300      	movs	r3, #0
24003ee8:	667b      	str	r3, [r7, #100]	; 0x64
24003eea:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
24003eee:	460b      	mov	r3, r1
24003ef0:	4313      	orrs	r3, r2
24003ef2:	d00c      	beq.n	24003f0e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24003ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003ef8:	3328      	adds	r3, #40	; 0x28
24003efa:	2102      	movs	r1, #2
24003efc:	4618      	mov	r0, r3
24003efe:	f000 fa4b 	bl	24004398 <RCCEx_PLL3_Config>
24003f02:	4603      	mov	r3, r0
24003f04:	2b00      	cmp	r3, #0
24003f06:	d002      	beq.n	24003f0e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
24003f08:	2301      	movs	r3, #1
24003f0a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
24003f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003f12:	e9d3 2300 	ldrd	r2, r3, [r3]
24003f16:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
24003f1a:	65bb      	str	r3, [r7, #88]	; 0x58
24003f1c:	2300      	movs	r3, #0
24003f1e:	65fb      	str	r3, [r7, #92]	; 0x5c
24003f20:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
24003f24:	460b      	mov	r3, r1
24003f26:	4313      	orrs	r3, r2
24003f28:	d036      	beq.n	24003f98 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
24003f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003f2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
24003f30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
24003f34:	d018      	beq.n	24003f68 <HAL_RCCEx_PeriphCLKConfig+0x1074>
24003f36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
24003f3a:	d811      	bhi.n	24003f60 <HAL_RCCEx_PeriphCLKConfig+0x106c>
24003f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
24003f40:	d014      	beq.n	24003f6c <HAL_RCCEx_PeriphCLKConfig+0x1078>
24003f42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
24003f46:	d80b      	bhi.n	24003f60 <HAL_RCCEx_PeriphCLKConfig+0x106c>
24003f48:	2b00      	cmp	r3, #0
24003f4a:	d011      	beq.n	24003f70 <HAL_RCCEx_PeriphCLKConfig+0x107c>
24003f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24003f50:	d106      	bne.n	24003f60 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24003f52:	4bb7      	ldr	r3, [pc, #732]	; (24004230 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
24003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24003f56:	4ab6      	ldr	r2, [pc, #728]	; (24004230 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
24003f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24003f5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
24003f5e:	e008      	b.n	24003f72 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
24003f60:	2301      	movs	r3, #1
24003f62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
24003f66:	e004      	b.n	24003f72 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
24003f68:	bf00      	nop
24003f6a:	e002      	b.n	24003f72 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
24003f6c:	bf00      	nop
24003f6e:	e000      	b.n	24003f72 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
24003f70:	bf00      	nop
    }

    if (ret == HAL_OK)
24003f72:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24003f76:	2b00      	cmp	r3, #0
24003f78:	d10a      	bne.n	24003f90 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
24003f7a:	4bad      	ldr	r3, [pc, #692]	; (24004230 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
24003f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24003f7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
24003f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003f86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
24003f88:	4aa9      	ldr	r2, [pc, #676]	; (24004230 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
24003f8a:	430b      	orrs	r3, r1
24003f8c:	6553      	str	r3, [r2, #84]	; 0x54
24003f8e:	e003      	b.n	24003f98 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
24003f90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24003f94:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
24003f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
24003fa0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
24003fa4:	653b      	str	r3, [r7, #80]	; 0x50
24003fa6:	2300      	movs	r3, #0
24003fa8:	657b      	str	r3, [r7, #84]	; 0x54
24003faa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
24003fae:	460b      	mov	r3, r1
24003fb0:	4313      	orrs	r3, r2
24003fb2:	d009      	beq.n	24003fc8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
24003fb4:	4b9e      	ldr	r3, [pc, #632]	; (24004230 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
24003fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24003fb8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
24003fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24003fc2:	4a9b      	ldr	r2, [pc, #620]	; (24004230 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
24003fc4:	430b      	orrs	r3, r1
24003fc6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
24003fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
24003fd0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
24003fd4:	64bb      	str	r3, [r7, #72]	; 0x48
24003fd6:	2300      	movs	r3, #0
24003fd8:	64fb      	str	r3, [r7, #76]	; 0x4c
24003fda:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
24003fde:	460b      	mov	r3, r1
24003fe0:	4313      	orrs	r3, r2
24003fe2:	d009      	beq.n	24003ff8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
24003fe4:	4b92      	ldr	r3, [pc, #584]	; (24004230 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
24003fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24003fe8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
24003fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003ff0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24003ff2:	4a8f      	ldr	r2, [pc, #572]	; (24004230 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
24003ff4:	430b      	orrs	r3, r1
24003ff6:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
24003ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24003ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
24004000:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
24004004:	643b      	str	r3, [r7, #64]	; 0x40
24004006:	2300      	movs	r3, #0
24004008:	647b      	str	r3, [r7, #68]	; 0x44
2400400a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
2400400e:	460b      	mov	r3, r1
24004010:	4313      	orrs	r3, r2
24004012:	d00e      	beq.n	24004032 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
24004014:	4b86      	ldr	r3, [pc, #536]	; (24004230 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
24004016:	691b      	ldr	r3, [r3, #16]
24004018:	4a85      	ldr	r2, [pc, #532]	; (24004230 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
2400401a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
2400401e:	6113      	str	r3, [r2, #16]
24004020:	4b83      	ldr	r3, [pc, #524]	; (24004230 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
24004022:	6919      	ldr	r1, [r3, #16]
24004024:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24004028:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
2400402c:	4a80      	ldr	r2, [pc, #512]	; (24004230 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
2400402e:	430b      	orrs	r3, r1
24004030:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
24004032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24004036:	e9d3 2300 	ldrd	r2, r3, [r3]
2400403a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
2400403e:	63bb      	str	r3, [r7, #56]	; 0x38
24004040:	2300      	movs	r3, #0
24004042:	63fb      	str	r3, [r7, #60]	; 0x3c
24004044:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
24004048:	460b      	mov	r3, r1
2400404a:	4313      	orrs	r3, r2
2400404c:	d009      	beq.n	24004062 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
2400404e:	4b78      	ldr	r3, [pc, #480]	; (24004230 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
24004050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24004052:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
24004056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
2400405a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2400405c:	4a74      	ldr	r2, [pc, #464]	; (24004230 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
2400405e:	430b      	orrs	r3, r1
24004060:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
24004062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24004066:	e9d3 2300 	ldrd	r2, r3, [r3]
2400406a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
2400406e:	633b      	str	r3, [r7, #48]	; 0x30
24004070:	2300      	movs	r3, #0
24004072:	637b      	str	r3, [r7, #52]	; 0x34
24004074:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
24004078:	460b      	mov	r3, r1
2400407a:	4313      	orrs	r3, r2
2400407c:	d00a      	beq.n	24004094 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
2400407e:	4b6c      	ldr	r3, [pc, #432]	; (24004230 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
24004080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24004082:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
24004086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
2400408a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2400408e:	4a68      	ldr	r2, [pc, #416]	; (24004230 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
24004090:	430b      	orrs	r3, r1
24004092:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
24004094:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24004098:	e9d3 2300 	ldrd	r2, r3, [r3]
2400409c:	2100      	movs	r1, #0
2400409e:	62b9      	str	r1, [r7, #40]	; 0x28
240040a0:	f003 0301 	and.w	r3, r3, #1
240040a4:	62fb      	str	r3, [r7, #44]	; 0x2c
240040a6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
240040aa:	460b      	mov	r3, r1
240040ac:	4313      	orrs	r3, r2
240040ae:	d011      	beq.n	240040d4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240040b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
240040b4:	3308      	adds	r3, #8
240040b6:	2100      	movs	r1, #0
240040b8:	4618      	mov	r0, r3
240040ba:	f000 f8bb 	bl	24004234 <RCCEx_PLL2_Config>
240040be:	4603      	mov	r3, r0
240040c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
240040c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
240040c8:	2b00      	cmp	r3, #0
240040ca:	d003      	beq.n	240040d4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
240040cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
240040d0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
240040d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
240040d8:	e9d3 2300 	ldrd	r2, r3, [r3]
240040dc:	2100      	movs	r1, #0
240040de:	6239      	str	r1, [r7, #32]
240040e0:	f003 0302 	and.w	r3, r3, #2
240040e4:	627b      	str	r3, [r7, #36]	; 0x24
240040e6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
240040ea:	460b      	mov	r3, r1
240040ec:	4313      	orrs	r3, r2
240040ee:	d011      	beq.n	24004114 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
240040f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
240040f4:	3308      	adds	r3, #8
240040f6:	2101      	movs	r1, #1
240040f8:	4618      	mov	r0, r3
240040fa:	f000 f89b 	bl	24004234 <RCCEx_PLL2_Config>
240040fe:	4603      	mov	r3, r0
24004100:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
24004104:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24004108:	2b00      	cmp	r3, #0
2400410a:	d003      	beq.n	24004114 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
2400410c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24004110:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
24004114:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24004118:	e9d3 2300 	ldrd	r2, r3, [r3]
2400411c:	2100      	movs	r1, #0
2400411e:	61b9      	str	r1, [r7, #24]
24004120:	f003 0304 	and.w	r3, r3, #4
24004124:	61fb      	str	r3, [r7, #28]
24004126:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
2400412a:	460b      	mov	r3, r1
2400412c:	4313      	orrs	r3, r2
2400412e:	d011      	beq.n	24004154 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24004130:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24004134:	3308      	adds	r3, #8
24004136:	2102      	movs	r1, #2
24004138:	4618      	mov	r0, r3
2400413a:	f000 f87b 	bl	24004234 <RCCEx_PLL2_Config>
2400413e:	4603      	mov	r3, r0
24004140:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
24004144:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24004148:	2b00      	cmp	r3, #0
2400414a:	d003      	beq.n	24004154 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
2400414c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24004150:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
24004154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24004158:	e9d3 2300 	ldrd	r2, r3, [r3]
2400415c:	2100      	movs	r1, #0
2400415e:	6139      	str	r1, [r7, #16]
24004160:	f003 0308 	and.w	r3, r3, #8
24004164:	617b      	str	r3, [r7, #20]
24004166:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
2400416a:	460b      	mov	r3, r1
2400416c:	4313      	orrs	r3, r2
2400416e:	d011      	beq.n	24004194 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24004170:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24004174:	3328      	adds	r3, #40	; 0x28
24004176:	2100      	movs	r1, #0
24004178:	4618      	mov	r0, r3
2400417a:	f000 f90d 	bl	24004398 <RCCEx_PLL3_Config>
2400417e:	4603      	mov	r3, r0
24004180:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
24004184:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24004188:	2b00      	cmp	r3, #0
2400418a:	d003      	beq.n	24004194 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
2400418c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24004190:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
24004194:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
24004198:	e9d3 2300 	ldrd	r2, r3, [r3]
2400419c:	2100      	movs	r1, #0
2400419e:	60b9      	str	r1, [r7, #8]
240041a0:	f003 0310 	and.w	r3, r3, #16
240041a4:	60fb      	str	r3, [r7, #12]
240041a6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
240041aa:	460b      	mov	r3, r1
240041ac:	4313      	orrs	r3, r2
240041ae:	d011      	beq.n	240041d4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
240041b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
240041b4:	3328      	adds	r3, #40	; 0x28
240041b6:	2101      	movs	r1, #1
240041b8:	4618      	mov	r0, r3
240041ba:	f000 f8ed 	bl	24004398 <RCCEx_PLL3_Config>
240041be:	4603      	mov	r3, r0
240041c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
240041c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
240041c8:	2b00      	cmp	r3, #0
240041ca:	d003      	beq.n	240041d4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
240041cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
240041d0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
240041d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
240041d8:	e9d3 2300 	ldrd	r2, r3, [r3]
240041dc:	2100      	movs	r1, #0
240041de:	6039      	str	r1, [r7, #0]
240041e0:	f003 0320 	and.w	r3, r3, #32
240041e4:	607b      	str	r3, [r7, #4]
240041e6:	e9d7 1200 	ldrd	r1, r2, [r7]
240041ea:	460b      	mov	r3, r1
240041ec:	4313      	orrs	r3, r2
240041ee:	d011      	beq.n	24004214 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
240041f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
240041f4:	3328      	adds	r3, #40	; 0x28
240041f6:	2102      	movs	r1, #2
240041f8:	4618      	mov	r0, r3
240041fa:	f000 f8cd 	bl	24004398 <RCCEx_PLL3_Config>
240041fe:	4603      	mov	r3, r0
24004200:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
24004204:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24004208:	2b00      	cmp	r3, #0
2400420a:	d003      	beq.n	24004214 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
2400420c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
24004210:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
24004214:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
24004218:	2b00      	cmp	r3, #0
2400421a:	d101      	bne.n	24004220 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
2400421c:	2300      	movs	r3, #0
2400421e:	e000      	b.n	24004222 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
24004220:	2301      	movs	r3, #1
}
24004222:	4618      	mov	r0, r3
24004224:	f507 778c 	add.w	r7, r7, #280	; 0x118
24004228:	46bd      	mov	sp, r7
2400422a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
2400422e:	bf00      	nop
24004230:	58024400 	.word	0x58024400

24004234 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
24004234:	b580      	push	{r7, lr}
24004236:	b084      	sub	sp, #16
24004238:	af00      	add	r7, sp, #0
2400423a:	6078      	str	r0, [r7, #4]
2400423c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
2400423e:	2300      	movs	r3, #0
24004240:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
24004242:	4b53      	ldr	r3, [pc, #332]	; (24004390 <RCCEx_PLL2_Config+0x15c>)
24004244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24004246:	f003 0303 	and.w	r3, r3, #3
2400424a:	2b03      	cmp	r3, #3
2400424c:	d101      	bne.n	24004252 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
2400424e:	2301      	movs	r3, #1
24004250:	e099      	b.n	24004386 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
24004252:	4b4f      	ldr	r3, [pc, #316]	; (24004390 <RCCEx_PLL2_Config+0x15c>)
24004254:	681b      	ldr	r3, [r3, #0]
24004256:	4a4e      	ldr	r2, [pc, #312]	; (24004390 <RCCEx_PLL2_Config+0x15c>)
24004258:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
2400425c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2400425e:	f7fc fd1d 	bl	24000c9c <HAL_GetTick>
24004262:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
24004264:	e008      	b.n	24004278 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
24004266:	f7fc fd19 	bl	24000c9c <HAL_GetTick>
2400426a:	4602      	mov	r2, r0
2400426c:	68bb      	ldr	r3, [r7, #8]
2400426e:	1ad3      	subs	r3, r2, r3
24004270:	2b02      	cmp	r3, #2
24004272:	d901      	bls.n	24004278 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
24004274:	2303      	movs	r3, #3
24004276:	e086      	b.n	24004386 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
24004278:	4b45      	ldr	r3, [pc, #276]	; (24004390 <RCCEx_PLL2_Config+0x15c>)
2400427a:	681b      	ldr	r3, [r3, #0]
2400427c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24004280:	2b00      	cmp	r3, #0
24004282:	d1f0      	bne.n	24004266 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
24004284:	4b42      	ldr	r3, [pc, #264]	; (24004390 <RCCEx_PLL2_Config+0x15c>)
24004286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24004288:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
2400428c:	687b      	ldr	r3, [r7, #4]
2400428e:	681b      	ldr	r3, [r3, #0]
24004290:	031b      	lsls	r3, r3, #12
24004292:	493f      	ldr	r1, [pc, #252]	; (24004390 <RCCEx_PLL2_Config+0x15c>)
24004294:	4313      	orrs	r3, r2
24004296:	628b      	str	r3, [r1, #40]	; 0x28
24004298:	687b      	ldr	r3, [r7, #4]
2400429a:	685b      	ldr	r3, [r3, #4]
2400429c:	3b01      	subs	r3, #1
2400429e:	f3c3 0208 	ubfx	r2, r3, #0, #9
240042a2:	687b      	ldr	r3, [r7, #4]
240042a4:	689b      	ldr	r3, [r3, #8]
240042a6:	3b01      	subs	r3, #1
240042a8:	025b      	lsls	r3, r3, #9
240042aa:	b29b      	uxth	r3, r3
240042ac:	431a      	orrs	r2, r3
240042ae:	687b      	ldr	r3, [r7, #4]
240042b0:	68db      	ldr	r3, [r3, #12]
240042b2:	3b01      	subs	r3, #1
240042b4:	041b      	lsls	r3, r3, #16
240042b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
240042ba:	431a      	orrs	r2, r3
240042bc:	687b      	ldr	r3, [r7, #4]
240042be:	691b      	ldr	r3, [r3, #16]
240042c0:	3b01      	subs	r3, #1
240042c2:	061b      	lsls	r3, r3, #24
240042c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
240042c8:	4931      	ldr	r1, [pc, #196]	; (24004390 <RCCEx_PLL2_Config+0x15c>)
240042ca:	4313      	orrs	r3, r2
240042cc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
240042ce:	4b30      	ldr	r3, [pc, #192]	; (24004390 <RCCEx_PLL2_Config+0x15c>)
240042d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240042d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
240042d6:	687b      	ldr	r3, [r7, #4]
240042d8:	695b      	ldr	r3, [r3, #20]
240042da:	492d      	ldr	r1, [pc, #180]	; (24004390 <RCCEx_PLL2_Config+0x15c>)
240042dc:	4313      	orrs	r3, r2
240042de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
240042e0:	4b2b      	ldr	r3, [pc, #172]	; (24004390 <RCCEx_PLL2_Config+0x15c>)
240042e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240042e4:	f023 0220 	bic.w	r2, r3, #32
240042e8:	687b      	ldr	r3, [r7, #4]
240042ea:	699b      	ldr	r3, [r3, #24]
240042ec:	4928      	ldr	r1, [pc, #160]	; (24004390 <RCCEx_PLL2_Config+0x15c>)
240042ee:	4313      	orrs	r3, r2
240042f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
240042f2:	4b27      	ldr	r3, [pc, #156]	; (24004390 <RCCEx_PLL2_Config+0x15c>)
240042f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240042f6:	4a26      	ldr	r2, [pc, #152]	; (24004390 <RCCEx_PLL2_Config+0x15c>)
240042f8:	f023 0310 	bic.w	r3, r3, #16
240042fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
240042fe:	4b24      	ldr	r3, [pc, #144]	; (24004390 <RCCEx_PLL2_Config+0x15c>)
24004300:	6bda      	ldr	r2, [r3, #60]	; 0x3c
24004302:	4b24      	ldr	r3, [pc, #144]	; (24004394 <RCCEx_PLL2_Config+0x160>)
24004304:	4013      	ands	r3, r2
24004306:	687a      	ldr	r2, [r7, #4]
24004308:	69d2      	ldr	r2, [r2, #28]
2400430a:	00d2      	lsls	r2, r2, #3
2400430c:	4920      	ldr	r1, [pc, #128]	; (24004390 <RCCEx_PLL2_Config+0x15c>)
2400430e:	4313      	orrs	r3, r2
24004310:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
24004312:	4b1f      	ldr	r3, [pc, #124]	; (24004390 <RCCEx_PLL2_Config+0x15c>)
24004314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24004316:	4a1e      	ldr	r2, [pc, #120]	; (24004390 <RCCEx_PLL2_Config+0x15c>)
24004318:	f043 0310 	orr.w	r3, r3, #16
2400431c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
2400431e:	683b      	ldr	r3, [r7, #0]
24004320:	2b00      	cmp	r3, #0
24004322:	d106      	bne.n	24004332 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
24004324:	4b1a      	ldr	r3, [pc, #104]	; (24004390 <RCCEx_PLL2_Config+0x15c>)
24004326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24004328:	4a19      	ldr	r2, [pc, #100]	; (24004390 <RCCEx_PLL2_Config+0x15c>)
2400432a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
2400432e:	62d3      	str	r3, [r2, #44]	; 0x2c
24004330:	e00f      	b.n	24004352 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
24004332:	683b      	ldr	r3, [r7, #0]
24004334:	2b01      	cmp	r3, #1
24004336:	d106      	bne.n	24004346 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
24004338:	4b15      	ldr	r3, [pc, #84]	; (24004390 <RCCEx_PLL2_Config+0x15c>)
2400433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400433c:	4a14      	ldr	r2, [pc, #80]	; (24004390 <RCCEx_PLL2_Config+0x15c>)
2400433e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
24004342:	62d3      	str	r3, [r2, #44]	; 0x2c
24004344:	e005      	b.n	24004352 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
24004346:	4b12      	ldr	r3, [pc, #72]	; (24004390 <RCCEx_PLL2_Config+0x15c>)
24004348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400434a:	4a11      	ldr	r2, [pc, #68]	; (24004390 <RCCEx_PLL2_Config+0x15c>)
2400434c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
24004350:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
24004352:	4b0f      	ldr	r3, [pc, #60]	; (24004390 <RCCEx_PLL2_Config+0x15c>)
24004354:	681b      	ldr	r3, [r3, #0]
24004356:	4a0e      	ldr	r2, [pc, #56]	; (24004390 <RCCEx_PLL2_Config+0x15c>)
24004358:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
2400435c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2400435e:	f7fc fc9d 	bl	24000c9c <HAL_GetTick>
24004362:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
24004364:	e008      	b.n	24004378 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
24004366:	f7fc fc99 	bl	24000c9c <HAL_GetTick>
2400436a:	4602      	mov	r2, r0
2400436c:	68bb      	ldr	r3, [r7, #8]
2400436e:	1ad3      	subs	r3, r2, r3
24004370:	2b02      	cmp	r3, #2
24004372:	d901      	bls.n	24004378 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
24004374:	2303      	movs	r3, #3
24004376:	e006      	b.n	24004386 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
24004378:	4b05      	ldr	r3, [pc, #20]	; (24004390 <RCCEx_PLL2_Config+0x15c>)
2400437a:	681b      	ldr	r3, [r3, #0]
2400437c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24004380:	2b00      	cmp	r3, #0
24004382:	d0f0      	beq.n	24004366 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
24004384:	7bfb      	ldrb	r3, [r7, #15]
}
24004386:	4618      	mov	r0, r3
24004388:	3710      	adds	r7, #16
2400438a:	46bd      	mov	sp, r7
2400438c:	bd80      	pop	{r7, pc}
2400438e:	bf00      	nop
24004390:	58024400 	.word	0x58024400
24004394:	ffff0007 	.word	0xffff0007

24004398 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
24004398:	b580      	push	{r7, lr}
2400439a:	b084      	sub	sp, #16
2400439c:	af00      	add	r7, sp, #0
2400439e:	6078      	str	r0, [r7, #4]
240043a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
240043a2:	2300      	movs	r3, #0
240043a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
240043a6:	4b53      	ldr	r3, [pc, #332]	; (240044f4 <RCCEx_PLL3_Config+0x15c>)
240043a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240043aa:	f003 0303 	and.w	r3, r3, #3
240043ae:	2b03      	cmp	r3, #3
240043b0:	d101      	bne.n	240043b6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
240043b2:	2301      	movs	r3, #1
240043b4:	e099      	b.n	240044ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
240043b6:	4b4f      	ldr	r3, [pc, #316]	; (240044f4 <RCCEx_PLL3_Config+0x15c>)
240043b8:	681b      	ldr	r3, [r3, #0]
240043ba:	4a4e      	ldr	r2, [pc, #312]	; (240044f4 <RCCEx_PLL3_Config+0x15c>)
240043bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
240043c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
240043c2:	f7fc fc6b 	bl	24000c9c <HAL_GetTick>
240043c6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
240043c8:	e008      	b.n	240043dc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
240043ca:	f7fc fc67 	bl	24000c9c <HAL_GetTick>
240043ce:	4602      	mov	r2, r0
240043d0:	68bb      	ldr	r3, [r7, #8]
240043d2:	1ad3      	subs	r3, r2, r3
240043d4:	2b02      	cmp	r3, #2
240043d6:	d901      	bls.n	240043dc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
240043d8:	2303      	movs	r3, #3
240043da:	e086      	b.n	240044ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
240043dc:	4b45      	ldr	r3, [pc, #276]	; (240044f4 <RCCEx_PLL3_Config+0x15c>)
240043de:	681b      	ldr	r3, [r3, #0]
240043e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
240043e4:	2b00      	cmp	r3, #0
240043e6:	d1f0      	bne.n	240043ca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
240043e8:	4b42      	ldr	r3, [pc, #264]	; (240044f4 <RCCEx_PLL3_Config+0x15c>)
240043ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240043ec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
240043f0:	687b      	ldr	r3, [r7, #4]
240043f2:	681b      	ldr	r3, [r3, #0]
240043f4:	051b      	lsls	r3, r3, #20
240043f6:	493f      	ldr	r1, [pc, #252]	; (240044f4 <RCCEx_PLL3_Config+0x15c>)
240043f8:	4313      	orrs	r3, r2
240043fa:	628b      	str	r3, [r1, #40]	; 0x28
240043fc:	687b      	ldr	r3, [r7, #4]
240043fe:	685b      	ldr	r3, [r3, #4]
24004400:	3b01      	subs	r3, #1
24004402:	f3c3 0208 	ubfx	r2, r3, #0, #9
24004406:	687b      	ldr	r3, [r7, #4]
24004408:	689b      	ldr	r3, [r3, #8]
2400440a:	3b01      	subs	r3, #1
2400440c:	025b      	lsls	r3, r3, #9
2400440e:	b29b      	uxth	r3, r3
24004410:	431a      	orrs	r2, r3
24004412:	687b      	ldr	r3, [r7, #4]
24004414:	68db      	ldr	r3, [r3, #12]
24004416:	3b01      	subs	r3, #1
24004418:	041b      	lsls	r3, r3, #16
2400441a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
2400441e:	431a      	orrs	r2, r3
24004420:	687b      	ldr	r3, [r7, #4]
24004422:	691b      	ldr	r3, [r3, #16]
24004424:	3b01      	subs	r3, #1
24004426:	061b      	lsls	r3, r3, #24
24004428:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
2400442c:	4931      	ldr	r1, [pc, #196]	; (240044f4 <RCCEx_PLL3_Config+0x15c>)
2400442e:	4313      	orrs	r3, r2
24004430:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
24004432:	4b30      	ldr	r3, [pc, #192]	; (240044f4 <RCCEx_PLL3_Config+0x15c>)
24004434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24004436:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
2400443a:	687b      	ldr	r3, [r7, #4]
2400443c:	695b      	ldr	r3, [r3, #20]
2400443e:	492d      	ldr	r1, [pc, #180]	; (240044f4 <RCCEx_PLL3_Config+0x15c>)
24004440:	4313      	orrs	r3, r2
24004442:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
24004444:	4b2b      	ldr	r3, [pc, #172]	; (240044f4 <RCCEx_PLL3_Config+0x15c>)
24004446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24004448:	f423 7200 	bic.w	r2, r3, #512	; 0x200
2400444c:	687b      	ldr	r3, [r7, #4]
2400444e:	699b      	ldr	r3, [r3, #24]
24004450:	4928      	ldr	r1, [pc, #160]	; (240044f4 <RCCEx_PLL3_Config+0x15c>)
24004452:	4313      	orrs	r3, r2
24004454:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
24004456:	4b27      	ldr	r3, [pc, #156]	; (240044f4 <RCCEx_PLL3_Config+0x15c>)
24004458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400445a:	4a26      	ldr	r2, [pc, #152]	; (240044f4 <RCCEx_PLL3_Config+0x15c>)
2400445c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
24004460:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
24004462:	4b24      	ldr	r3, [pc, #144]	; (240044f4 <RCCEx_PLL3_Config+0x15c>)
24004464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
24004466:	4b24      	ldr	r3, [pc, #144]	; (240044f8 <RCCEx_PLL3_Config+0x160>)
24004468:	4013      	ands	r3, r2
2400446a:	687a      	ldr	r2, [r7, #4]
2400446c:	69d2      	ldr	r2, [r2, #28]
2400446e:	00d2      	lsls	r2, r2, #3
24004470:	4920      	ldr	r1, [pc, #128]	; (240044f4 <RCCEx_PLL3_Config+0x15c>)
24004472:	4313      	orrs	r3, r2
24004474:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
24004476:	4b1f      	ldr	r3, [pc, #124]	; (240044f4 <RCCEx_PLL3_Config+0x15c>)
24004478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400447a:	4a1e      	ldr	r2, [pc, #120]	; (240044f4 <RCCEx_PLL3_Config+0x15c>)
2400447c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24004480:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
24004482:	683b      	ldr	r3, [r7, #0]
24004484:	2b00      	cmp	r3, #0
24004486:	d106      	bne.n	24004496 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
24004488:	4b1a      	ldr	r3, [pc, #104]	; (240044f4 <RCCEx_PLL3_Config+0x15c>)
2400448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400448c:	4a19      	ldr	r2, [pc, #100]	; (240044f4 <RCCEx_PLL3_Config+0x15c>)
2400448e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
24004492:	62d3      	str	r3, [r2, #44]	; 0x2c
24004494:	e00f      	b.n	240044b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
24004496:	683b      	ldr	r3, [r7, #0]
24004498:	2b01      	cmp	r3, #1
2400449a:	d106      	bne.n	240044aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
2400449c:	4b15      	ldr	r3, [pc, #84]	; (240044f4 <RCCEx_PLL3_Config+0x15c>)
2400449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240044a0:	4a14      	ldr	r2, [pc, #80]	; (240044f4 <RCCEx_PLL3_Config+0x15c>)
240044a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
240044a6:	62d3      	str	r3, [r2, #44]	; 0x2c
240044a8:	e005      	b.n	240044b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
240044aa:	4b12      	ldr	r3, [pc, #72]	; (240044f4 <RCCEx_PLL3_Config+0x15c>)
240044ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240044ae:	4a11      	ldr	r2, [pc, #68]	; (240044f4 <RCCEx_PLL3_Config+0x15c>)
240044b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
240044b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
240044b6:	4b0f      	ldr	r3, [pc, #60]	; (240044f4 <RCCEx_PLL3_Config+0x15c>)
240044b8:	681b      	ldr	r3, [r3, #0]
240044ba:	4a0e      	ldr	r2, [pc, #56]	; (240044f4 <RCCEx_PLL3_Config+0x15c>)
240044bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
240044c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
240044c2:	f7fc fbeb 	bl	24000c9c <HAL_GetTick>
240044c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
240044c8:	e008      	b.n	240044dc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
240044ca:	f7fc fbe7 	bl	24000c9c <HAL_GetTick>
240044ce:	4602      	mov	r2, r0
240044d0:	68bb      	ldr	r3, [r7, #8]
240044d2:	1ad3      	subs	r3, r2, r3
240044d4:	2b02      	cmp	r3, #2
240044d6:	d901      	bls.n	240044dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
240044d8:	2303      	movs	r3, #3
240044da:	e006      	b.n	240044ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
240044dc:	4b05      	ldr	r3, [pc, #20]	; (240044f4 <RCCEx_PLL3_Config+0x15c>)
240044de:	681b      	ldr	r3, [r3, #0]
240044e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
240044e4:	2b00      	cmp	r3, #0
240044e6:	d0f0      	beq.n	240044ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
240044e8:	7bfb      	ldrb	r3, [r7, #15]
}
240044ea:	4618      	mov	r0, r3
240044ec:	3710      	adds	r7, #16
240044ee:	46bd      	mov	sp, r7
240044f0:	bd80      	pop	{r7, pc}
240044f2:	bf00      	nop
240044f4:	58024400 	.word	0x58024400
240044f8:	ffff0007 	.word	0xffff0007

240044fc <__libc_init_array>:
240044fc:	b570      	push	{r4, r5, r6, lr}
240044fe:	4d0d      	ldr	r5, [pc, #52]	; (24004534 <__libc_init_array+0x38>)
24004500:	4c0d      	ldr	r4, [pc, #52]	; (24004538 <__libc_init_array+0x3c>)
24004502:	1b64      	subs	r4, r4, r5
24004504:	10a4      	asrs	r4, r4, #2
24004506:	2600      	movs	r6, #0
24004508:	42a6      	cmp	r6, r4
2400450a:	d109      	bne.n	24004520 <__libc_init_array+0x24>
2400450c:	4d0b      	ldr	r5, [pc, #44]	; (2400453c <__libc_init_array+0x40>)
2400450e:	4c0c      	ldr	r4, [pc, #48]	; (24004540 <__libc_init_array+0x44>)
24004510:	f000 f820 	bl	24004554 <_init>
24004514:	1b64      	subs	r4, r4, r5
24004516:	10a4      	asrs	r4, r4, #2
24004518:	2600      	movs	r6, #0
2400451a:	42a6      	cmp	r6, r4
2400451c:	d105      	bne.n	2400452a <__libc_init_array+0x2e>
2400451e:	bd70      	pop	{r4, r5, r6, pc}
24004520:	f855 3b04 	ldr.w	r3, [r5], #4
24004524:	4798      	blx	r3
24004526:	3601      	adds	r6, #1
24004528:	e7ee      	b.n	24004508 <__libc_init_array+0xc>
2400452a:	f855 3b04 	ldr.w	r3, [r5], #4
2400452e:	4798      	blx	r3
24004530:	3601      	adds	r6, #1
24004532:	e7f2      	b.n	2400451a <__libc_init_array+0x1e>
24004534:	240002cc 	.word	0x240002cc
24004538:	240002cc 	.word	0x240002cc
2400453c:	240002cc 	.word	0x240002cc
24004540:	240002d0 	.word	0x240002d0

24004544 <memset>:
24004544:	4402      	add	r2, r0
24004546:	4603      	mov	r3, r0
24004548:	4293      	cmp	r3, r2
2400454a:	d100      	bne.n	2400454e <memset+0xa>
2400454c:	4770      	bx	lr
2400454e:	f803 1b01 	strb.w	r1, [r3], #1
24004552:	e7f9      	b.n	24004548 <memset+0x4>

24004554 <_init>:
24004554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24004556:	bf00      	nop
24004558:	bcf8      	pop	{r3, r4, r5, r6, r7}
2400455a:	bc08      	pop	{r3}
2400455c:	469e      	mov	lr, r3
2400455e:	4770      	bx	lr

24004560 <_fini>:
24004560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24004562:	bf00      	nop
24004564:	bcf8      	pop	{r3, r4, r5, r6, r7}
24004566:	bc08      	pop	{r3}
24004568:	469e      	mov	lr, r3
2400456a:	4770      	bx	lr
